{"clone_type": "MT3", "method1_id": 5132884, "method2_id": 7350139, "code1": "public byte [] encryptMsg (String encryptString) {\n    byte [] encryptByte = null;\n    try {\n        MessageDigest messageDigest = MessageDigest.getInstance (\"MD5\");\n        messageDigest.update (encryptString.getBytes ());\n        encryptByte = messageDigest.digest ();\n    } catch (NoSuchAlgorithmException ex) {\n        ex.printStackTrace ();\n    }\n    return encryptByte;\n}\n", "code2": "public static void messageDigestTest () {\n    try {\n        MessageDigest md = MessageDigest.getInstance (\"MD5\");\n        md.update (\"computer\".getBytes ());\n        md.update (\"networks\".getBytes ());\n        System.out.println (new String (md.digest ()));\n        System.out.println (new String (md.digest (\"computernetworks\".getBytes ())));\n    } catch (Exception e) {\n        e.printStackTrace ();\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 16502662, "method2_id": 22122895, "code1": "public static String hash (String toEncripty) {\n    if (toEncripty != null) {\n        try {\n            synchronized (toEncripty) {\n                MessageDigest md = MessageDigest.getInstance (\"MD5\");\n                md.update (toEncripty.getBytes ());\n                byte [] hash = md.digest ();\n                StringBuffer hexString = new StringBuffer ();\n                for (int i = 0;\n                i < hash.length; i ++) {\n                    if ((0xff & hash [i]) < 0x10) hexString.append (\"0\" + Integer.toHexString ((0xFF & hash [i])));\n                    else hexString.append (Integer.toHexString (0xFF & hash [i]));\n\n                }\n                toEncripty = hexString.toString ();\n            }\n        } catch (Exception e) {\n            e.getMessage ();\n        }\n    }\n    return toEncripty;\n}\n", "code2": "protected String getHashCode (String value) {\n    if (log.isDebugEnabled ()) log.debug (\"getHashCode(...) -> begin\");\n\n    String retVal = null;\n    try {\n        MessageDigest mdAlgorithm = MessageDigest.getInstance (\"MD5\");\n        mdAlgorithm.update (value.getBytes ());\n        byte [] digest = mdAlgorithm.digest ();\n        StringBuffer sb = new StringBuffer ();\n        for (int i = 0;\n        i < digest.length; i ++) {\n            sb.append (this.toHexString (digest [i]));\n        }\n        retVal = sb.toString ();\n        if (log.isDebugEnabled ()) log.debug (\"getHashCode(...) -> hashcode = \" + retVal);\n\n    } catch (Exception e) {\n        log.error (\"getHashCode(...) -> error occured generating hashcode \", e);\n    }\n    if (log.isDebugEnabled ()) log.debug (\"getHashCode(...) -> end\");\n\n    return retVal;\n}\n"}
{"clone_type": "MT3", "method1_id": 7468718, "method2_id": 11786463, "code1": "private static void writeZipBytes (int rootLength, File file, ZipOutputStream out) throws Exception {\n    if (file.isFile ()) {\n        final int BUFFER = 2048;\n        byte data [] = new byte [BUFFER];\n        FileInputStream fin = new FileInputStream (file);\n        BufferedInputStream original = new BufferedInputStream (fin, BUFFER);\n        String entryName = file.getAbsolutePath ().substring (rootLength + 1);\n        ZipEntry entry = new ZipEntry (entryName);\n        out.putNextEntry (entry);\n        int readed;\n        while ((readed = original.read (data, 0, BUFFER)) != - 1) {\n            out.write (data, 0, readed);\n        }\n        original.close ();\n    } else {\n        File [] files = file.listFiles ();\n        for (File _file : files) {\n            writeZipBytes (rootLength, _file, out);\n        }\n    }\n}\n", "code2": "private void zipSubFolder (File folder, ZipOutputStream out) throws Exception {\n    File children [] = folder.listFiles ();\n    for (File child : children) {\n        if (child.isDirectory ()) {\n            zipSubFolder (child, out);\n        } else {\n            String filePath = child.getAbsolutePath ();\n            String relPath = filePath.substring (folderPathIdx + 1);\n            updateMonitor (child.getName ());\n            FileInputStream fi = new FileInputStream (child);\n            origin = new BufferedInputStream (fi, BUFFER);\n            ZipEntry entry = new ZipEntry (relPath);\n            out.putNextEntry (entry);\n            int count;\n            while ((count = origin.read (data, 0, BUFFER)) != - 1) {\n                out.write (data, 0, count);\n            }\n            origin.close ();\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 2279291, "method2_id": 5373841, "code1": "public static String encrypt (String plainText) throws Exception {\n    MessageDigest md = null;\n    try {\n        md = MessageDigest.getInstance (\"MD5\");\n    } catch (NoSuchAlgorithmException e) {\n        throw new Exception (e.getMessage ());\n    }\n    try {\n        md.update (plainText.getBytes (\"UTF-8\"));\n    } catch (UnsupportedEncodingException e) {\n        throw new Exception (e.getMessage ());\n    }\n    byte raw [] = md.digest ();\n    String hash = (new BASE64Encoder ()).encode (raw);\n    return hash;\n}\n", "code2": "public static String encryptPassword (String password) throws PasswordException {\n    String hash = null;\n    if (password != null && ! password.equals (\"\")) {\n        try {\n            MessageDigest md = MessageDigest.getInstance (\"SHA\");\n            md.update (password.getBytes (\"UTF-8\"));\n            byte raw [] = md.digest ();\n            hash = String.valueOf (Base64Coder.encode (raw));\n        } catch (NoSuchAlgorithmException nsae) {\n            throw new PasswordException (PasswordException.SYSTEM_ERROR);\n        } catch (UnsupportedEncodingException uee) {\n            throw new PasswordException (PasswordException.SYSTEM_ERROR);\n        }\n    }\n    return hash;\n}\n"}
{"clone_type": "MT3", "method1_id": 17883770, "method2_id": 19214553, "code1": "public Matrix transpose () {\n    Matrix X = new Matrix (n, m);\n    double [] [] C = X.getArray ();\n    for (int i = 0;\n    i < m; i ++) {\n        for (int j = 0;\n        j < n; j ++) {\n            C [j] [i] = A [i] [j];\n        }\n    }\n    return X;\n}\n", "code2": "public IntSquareMatrix copyUpperToLower () {\n    for (int i = 0;\n    i < cols - 1; i ++) {\n        for (int j = i + 1;\n        j < cols; j ++) {\n            flmat [j] [i] = flmat [i] [j];\n        }\n    }\n    return this;\n}\n"}
{"clone_type": "MT3", "method1_id": 11457386, "method2_id": 19810820, "code1": "public static void copyFile (File in, File out) throws IOException {\n    FileChannel inChannel = new FileInputStream (in).getChannel ();\n    FileChannel outChannel = new FileOutputStream (out).getChannel ();\n    try {\n        int maxCount = 67076096;\n        long size = inChannel.size ();\n        long position = 0;\n        while (position < size) {\n            position += inChannel.transferTo (position, maxCount, outChannel);\n        }\n    } catch (IOException e) {\n        throw e;\n    } finally {\n        if (inChannel != null) {\n            inChannel.close ();\n        }\n        if (outChannel != null) {\n            outChannel.close ();\n        }\n    }\n}\n", "code2": "public static void copyFileChannel (File src, File dst, boolean preserveModificationTime) throws IOException {\n    FileChannel inputChannel = null;\n    FileChannel outputChannel = null;\n    long length = 0;\n    try {\n        inputChannel = new FileInputStream (src).getChannel ();\n        length = inputChannel.size ();\n        outputChannel = new FileOutputStream (dst).getChannel ();\n        long total = 0;\n        while (total < length) {\n            total += inputChannel.transferTo (0, length, outputChannel);\n        }\n        if (preserveModificationTime) {\n            dst.setLastModified (src.lastModified ());\n        }\n    } finally {\n        if (inputChannel != null) {\n            inputChannel.close ();\n        }\n        if (outputChannel != null) {\n            outputChannel.close ();\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 8664461, "method2_id": 22961265, "code1": "public String getMatches () {\n    StringBuilder builder = new StringBuilder (\"\");\n    try {\n        URL url = new URL (LIVE_SCORE_URL);\n        BufferedReader in = new BufferedReader (new InputStreamReader (url.openStream ()));\n        String inputLine;\n        while ((inputLine = in.readLine ()) != null) {\n            builder.append (inputLine);\n        }\n        in.close ();\n    } catch (IOException e) {\n        e.printStackTrace ();\n    }\n    return builder.toString ();\n}\n", "code2": "public static String readFromURL (String sURL) {\n    logger.info (\"com.rooster.utils.URLReader.readFromURL - Entry\");\n    String sWebPage = \"\";\n    try {\n        URL url = new URL (sURL);\n        BufferedReader in = new BufferedReader (new InputStreamReader (url.openStream ()));\n        String inputLine = \"\";\n        while ((inputLine = in.readLine ()) != null) {\n            sWebPage += inputLine;\n        }\n        in.close ();\n    } catch (Exception e) {\n        logger.debug (\"com.rooster.utils.URLReader.readFromURL - Error\" + e);\n    }\n    logger.info (\"com.rooster.utils.URLReader.readFromURL - Exit\");\n    return sWebPage;\n}\n"}
{"clone_type": "MT3", "method1_id": 10708168, "method2_id": 21172448, "code1": "private static void addDir (File rootDir, File dirObj, ZipOutputStream out) throws IOException {\n    File [] files = dirObj.listFiles ();\n    byte [] tmpBuf = new byte [1024];\n    for (int i = 0;\n    i < files.length; i ++) {\n        if (files [i].isDirectory ()) {\n            addDir (rootDir, files [i], out);\n            continue;\n        }\n        FileInputStream in = new FileInputStream (files [i].getAbsolutePath ());\n        System.out.println (\" Adding: \" + files [i].getAbsolutePath ());\n        out.putNextEntry (new ZipEntry (files [i].getAbsolutePath ().substring (rootDir.getAbsolutePath ().length () + 1)));\n        int len;\n        while ((len = in.read (tmpBuf)) > 0) {\n            out.write (tmpBuf, 0, len);\n        }\n        out.closeEntry ();\n        in.close ();\n    }\n}\n", "code2": "private static void addDirectory (ZipOutputStream zout, File fileSource, String innerFolder) throws IOException {\n    if (fileSource.isHidden ()) {\n        System.out.println (\"Skiping hidden folder \" + fileSource.getName ());\n        return;\n    }\n    File [] files = fileSource.listFiles ();\n    System.out.println (\"Adding directory \" + fileSource.getName ());\n    for (int i = 0;\n    i < files.length; i ++) {\n        if (files [i].isDirectory ()) {\n            addDirectory (zout, files [i], innerFolder + files [i].getName () + \"/\");\n            continue;\n        }\n        try {\n            System.out.println (\"Adding file \" + files [i].getName ());\n            byte [] buffer = new byte [1024];\n            FileInputStream fin = new FileInputStream (files [i]);\n            zout.putNextEntry (new ZipEntry (innerFolder + files [i].getName ()));\n            int length;\n            while ((length = fin.read (buffer)) > 0) {\n                zout.write (buffer, 0, length);\n            }\n            zout.closeEntry ();\n            fin.close ();\n        } catch (IOException ioe) {\n            System.out.println (\"IOException :\" + ioe);\n            throw ioe;\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 6644756, "method2_id": 20955452, "code1": "public void alterar (Cliente cliente) throws Exception {\n    Connection connection = criaConexao (false);\n    String sql = \"update cliente set nome = ?, sexo = ?, cod_cidade = ? where cod_cliente = ?\";\n    PreparedStatement stmt = null;\n    try {\n        stmt = connection.prepareStatement (sql);\n        stmt.setString (1, cliente.getNome ());\n        stmt.setString (2, cliente.getSexo ());\n        stmt.setInt (3, cliente.getCidade ().getCodCidade ());\n        stmt.setLong (4, cliente.getId ());\n        int retorno = stmt.executeUpdate ();\n        if (retorno == 0) {\n            connection.rollback ();\n            throw new SQLException (\"Ocorreu um erro inesperado no momento de alterar dados de cliente no banco!\");\n        }\n        connection.commit ();\n    } catch (SQLException e) {\n        connection.rollback ();\n        throw e;\n    } finally {\n        try {\n            stmt.close ();\n            this.fechaConexao ();\n        } catch (SQLException e) {\n            throw e;\n        }\n    }\n}\n", "code2": "private void criarQuestaoMultiplaEscolha (QuestaoMultiplaEscolha q) throws SQLException {\n    PreparedStatement stmt = null;\n    String sql = \"INSERT INTO multipla_escolha (id_questao, texto, gabarito) VALUES (?,?,?)\";\n    try {\n        for (Alternativa alternativa : q.getAlternativa ()) {\n            stmt = conexao.prepareStatement (sql);\n            stmt.setInt (1, q.getIdQuestao ());\n            stmt.setString (2, alternativa.getTexto ());\n            stmt.setBoolean (3, alternativa.getGabarito ());\n            stmt.executeUpdate ();\n            conexao.commit ();\n        }\n    } catch (SQLException e) {\n        conexao.rollback ();\n        throw e;\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 10353862, "method2_id": 15537156, "code1": "public boolean copyTo (String targetFilePath) {\n    try {\n        FileInputStream srcFile = new FileInputStream (filePath);\n        FileOutputStream target = new FileOutputStream (targetFilePath);\n        byte [] buff = new byte [1024];\n        int readed = - 1;\n        while ((readed = srcFile.read (buff)) > 0) target.write (buff, 0, readed);\n\n        srcFile.close ();\n        target.close ();\n        return true;\n    } catch (Exception e) {\n        e.printStackTrace ();\n        return false;\n    }\n}\n", "code2": "private void copy (String inputPath, String outputPath, String name) {\n    try {\n        FileReader in = new FileReader (inputPath + name);\n        FileWriter out = new FileWriter (outputPath + name);\n        int c;\n        while ((c = in.read ()) != - 1) out.write (c);\n\n        in.close ();\n        out.close ();\n    } catch (FileNotFoundException e) {\n        e.printStackTrace ();\n    } catch (IOException e) {\n        e.printStackTrace ();\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 6319402, "method2_id": 22307321, "code1": "public static String genetateSHA256 (String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n    MessageDigest md = MessageDigest.getInstance (\"SHA-256\");\n    md.update (password.getBytes (\"UTF-8\"));\n    byte [] passWd = md.digest ();\n    String hex = toHex (passWd);\n    return hex;\n}\n", "code2": "public static String crypt (String target) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n    MessageDigest md = MessageDigest.getInstance (\"MD5\");\n    md.update (target.getBytes (\"UTF-16\"));\n    BigInteger res = new BigInteger (1, md.digest (key.getBytes ()));\n    return res.toString (16);\n}\n"}
{"clone_type": "MT3", "method1_id": 13834118, "method2_id": 17637279, "code1": "public static void copyFile (File src, File dst) throws IOException {\n    InputStream in = new FileInputStream (src);\n    OutputStream out = new FileOutputStream (dst);\n    byte [] buf = new byte [1024];\n    int len;\n    while ((len = in.read (buf)) > 0) out.write (buf, 0, len);\n\n    in.close ();\n    out.close ();\n}\n", "code2": "private static void copy (File source, File dest) throws FileNotFoundException, IOException {\n    FileInputStream input = new FileInputStream (source);\n    FileOutputStream output = new FileOutputStream (dest);\n    System.out.println (\"Copying \" + source + \" to \" + dest);\n    IOUtils.copy (input, output);\n    output.close ();\n    input.close ();\n    dest.setLastModified (source.lastModified ());\n}\n"}
{"clone_type": "MT3", "method1_id": 3822426, "method2_id": 7704001, "code1": "public int addPermissionsForUserAndAgenda (Integer userId, Integer agendaId, String permissions) throws TechnicalException {\n    if (permissions == null) {\n        throw new TechnicalException (new Exception (new Exception (\"Column 'permissions' cannot be null\")));\n    }\n    Session session = null;\n    Transaction transaction = null;\n    try {\n        session = HibernateUtil.getCurrentSession ();\n        transaction = session.beginTransaction ();\n        String query = \"INSERT INTO j_user_agenda (userId, agendaId, permissions) VALUES(\" + userId + \",\" + agendaId + \",\\\"\" + permissions + \"\\\")\";\n        Statement statement = session.connection ().createStatement ();\n        int rowsUpdated = statement.executeUpdate (query);\n        transaction.commit ();\n        return rowsUpdated;\n    } catch (HibernateException ex) {\n        if (transaction != null) transaction.rollback ();\n\n        throw new TechnicalException (ex);\n    } catch (SQLException e) {\n        if (transaction != null) transaction.rollback ();\n\n        throw new TechnicalException (e);\n    }\n}\n", "code2": "public void deleteGroupInstruction (int id, int rank) throws FidoDatabaseException, InstructionNotFoundException {\n    try {\n        Connection conn = null;\n        Statement stmt = null;\n        try {\n            conn = fido.util.FidoDataSource.getConnection ();\n            conn.setAutoCommit (false);\n            stmt = conn.createStatement ();\n            String sql = \"delete from InstructionGroups \" + \"where InstructionId = \" + id + \" and Rank = \" + rank;\n            stmt.executeUpdate (sql);\n            bumpAllRowsUp (stmt, id, rank);\n            conn.commit ();\n        } catch (SQLException e) {\n            if (conn != null) conn.rollback ();\n\n            throw e;\n        } finally {\n            if (stmt != null) stmt.close ();\n\n            if (conn != null) conn.close ();\n\n        }\n    } catch (SQLException e) {\n        throw new FidoDatabaseException (e);\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 13122191, "method2_id": 18310878, "code1": "public static void copy (String inputFile, String outputFile) throws EDITSException {\n    try {\n        FileReader in = new FileReader (inputFile);\n        FileWriter out = new FileWriter (outputFile);\n        int c;\n        while ((c = in.read ()) != - 1) out.write (c);\n\n        in.close ();\n        out.close ();\n    } catch (Exception e) {\n        throw new EDITSException (\"Could not copy \" + inputFile + \" into \" + outputFile + \" because:\\n\" + e.getMessage ());\n    }\n}\n", "code2": "public static void copyFile (File src, File dst) throws IOException {\n    File inputFile = src;\n    File outputFile = dst;\n    FileReader in = new FileReader (inputFile);\n    FileWriter out = new FileWriter (outputFile);\n    int c;\n    while ((c = in.read ()) != - 1) out.write (c);\n\n    in.close ();\n    out.close ();\n}\n"}
{"clone_type": "MT3", "method1_id": 3891116, "method2_id": 8686161, "code1": "public FoundExpressions getFoundExpressions (String regExpr) {\n    FoundExpressions expressions = null;\n    Pattern p = Pattern.compile (regExpr);\n    Matcher m = p.matcher (text);\n    while (m.find ()) {\n        int start = m.start ();\n        int end = m.end ();\n        if (expressions == null) {\n            expressions = new FoundExpressions ();\n        }\n        Selection selection = new Selection ();\n        selection.setStart (start);\n        selection.setEnd (end);\n        expressions.add (selection);\n    }\n    return expressions;\n}\n", "code2": "private String fixUnicode (String s) {\n    String s2 = \"\";\n    String patron = \"(\\\\\\\\[U][+])([0-9A-Fa-f]{4})\";\n    Pattern compiledPatron = Pattern.compile (patron);\n    Matcher matcher = compiledPatron.matcher (s);\n    int lastEnd = 0;\n    while (matcher.find ()) {\n        int start = matcher.start ();\n        int end = matcher.end ();\n        String code = matcher.group (2);\n        String hexa = \"0x\" + code;\n        int caracter = Integer.decode (hexa).intValue ();\n        s2 = s2 + s.substring (lastEnd, start) + (char) caracter;\n        lastEnd = end;\n    }\n    s2 = s2 + s.substring (lastEnd);\n    return s2;\n}\n"}
{"clone_type": "MT3", "method1_id": 3584277, "method2_id": 13783549, "code1": "public static int copyFile (File src, File dest) throws IOException {\n    FileChannel in = null, out = null;\n    try {\n        in = new FileInputStream (src).getChannel ();\n        out = new FileOutputStream (dest).getChannel ();\n        in.transferTo (0, in.size (), out);\n    } finally {\n        if (in != null) in.close ();\n\n        if (out != null) out.close ();\n\n    }\n    return 1;\n}\n", "code2": "private static void copy (String sourceName, String destName) throws IOException {\n    File source = new File (sourceName);\n    File dest = new File (destName);\n    FileChannel in = null, out = null;\n    try {\n        in = new FileInputStream (source).getChannel ();\n        out = new FileOutputStream (dest).getChannel ();\n        long size = in.size ();\n        MappedByteBuffer buf = in.map (FileChannel.MapMode.READ_ONLY, 0, size);\n        out.write (buf);\n    } finally {\n        if (in != null) in.close ();\n\n        if (out != null) out.close ();\n\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 2142503, "method2_id": 17401582, "code1": "public static void openUrl (Component parentComponent, String url) {\n    if (Desktop.isDesktopSupported ()) {\n        Desktop desktop = Desktop.getDesktop ();\n        URI uri = null;\n        try {\n            uri = new URI (url);\n            desktop.browse (uri);\n        } catch (IOException ioe) {\n            JOptionPane.showMessageDialog (parentComponent, ioe.getMessage (), Messages.getString (\"VcMainFrame.msgTitleError\"), JOptionPane.ERROR_MESSAGE);\n        } catch (URISyntaxException use) {\n            JOptionPane.showMessageDialog (parentComponent, use.getMessage (), Messages.getString (\"VcMainFrame.msgTitleError\"), JOptionPane.ERROR_MESSAGE);\n        }\n    }\n}\n", "code2": "@Override\npublic void actionPerformed (ActionEvent e) {\n    if (Desktop.isDesktopSupported ()) {\n        Desktop d = Desktop.getDesktop ();\n        try {\n            if (d.isSupported (Desktop.Action.BROWSE)) {\n                d.browse (new URI (\"http://zdfmediathk.sourceforge.net/\"));\n            }\n        } catch (Exception ex) {\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 1741919, "method2_id": 2374764, "code1": "public static String hash (String text) throws Exception {\n    StringBuffer hexString;\n    MessageDigest mdAlgorithm = MessageDigest.getInstance (\"MD5\");\n    mdAlgorithm.update (text.getBytes ());\n    byte [] digest = mdAlgorithm.digest ();\n    hexString = new StringBuffer ();\n    for (int i = 0;\n    i < digest.length; i ++) {\n        text = Integer.toHexString (0xFF & digest [i]);\n        if (text.length () < 2) {\n            text = \"0\" + text;\n        }\n        hexString.append (text);\n    }\n    return hexString.toString ();\n}\n", "code2": "private static String getHash (char [] passwd, String algorithm) throws NoSuchAlgorithmException {\n    MessageDigest alg = MessageDigest.getInstance (algorithm);\n    alg.reset ();\n    alg.update (new String (passwd).getBytes ());\n    byte [] digest = alg.digest ();\n    StringBuilder sb = new StringBuilder ();\n    for (int i = 0;\n    i < digest.length; i ++) {\n        String hex = Integer.toHexString (0xff & digest [i]);\n        if (hex.length () == 1) {\n            sb.append ('0');\n        }\n        sb.append (hex);\n    }\n    return sb.toString ();\n}\n"}
{"clone_type": "MT3", "method1_id": 13952259, "method2_id": 16700020, "code1": "private static String getMD5 (String phrase) {\n    try {\n        MessageDigest md = MessageDigest.getInstance (\"MD5\");\n        md.update (phrase.getBytes ());\n        return asHexString (md.digest ());\n    } catch (Exception e) {\n    }\n    return \"\";\n}\n", "code2": "public static byte [] computeMD5 (String s) {\n    try {\n        MessageDigest md = MessageDigest.getInstance (\"MD5\");\n        md.reset ();\n        md.update (s.getBytes ());\n        return md.digest ();\n    } catch (NoSuchAlgorithmException ex) {\n        throw new RuntimeException (ex);\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 13940356, "method2_id": 14691829, "code1": "public static String md5 (String s) {\n    try {\n        MessageDigest digest = MessageDigest.getInstance (\"MD5\");\n        digest.update (s.getBytes ());\n        byte [] md5sum = digest.digest ();\n        BigInteger bigInt = new BigInteger (1, md5sum);\n        String output = bigInt.toString (16);\n        return prepad (output, 32, '0');\n    } catch (NoSuchAlgorithmException e) {\n        System.err.println (\"No MD5 algorithm. we are sunk.\");\n        return s;\n    }\n}\n", "code2": "public static String getMD5Hash (String in) {\n    StringBuffer result = new StringBuffer (32);\n    try {\n        MessageDigest md5 = MessageDigest.getInstance (\"MD5\");\n        md5.update (in.getBytes ());\n        Formatter f = new Formatter (result);\n        for (byte b : md5.digest ()) {\n            f.format (\"%02x\", b);\n        }\n    } catch (NoSuchAlgorithmException ex) {\n        ex.printStackTrace ();\n    }\n    return result.toString ();\n}\n"}
{"clone_type": "MT3", "method1_id": 5671908, "method2_id": 10212189, "code1": "private static String readGeoJSON (String feature) {\n    StringBuffer content = new StringBuffer ();\n    try {\n        URL url = new URL (feature);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection ();\n        conn.connect ();\n        BufferedReader rd = new BufferedReader (new InputStreamReader (conn.getInputStream ()));\n        String line;\n        while ((line = rd.readLine ()) != null) {\n            content.append (line);\n        }\n        conn.disconnect ();\n    } catch (Exception e) {\n    }\n    return content.toString ();\n}\n", "code2": "public String getXML (String servletURL, String request) {\n    StringBuffer stringBuffer = new StringBuffer ();\n    try {\n        String encodedRequest = URLEncoder.encode (request, \"UTF-8\");\n        URL url = new URL (servletURL + request);\n        BufferedReader in = new BufferedReader (new InputStreamReader (url.openStream ()));\n        String inputLine;\n        while ((inputLine = in.readLine ()) != null) {\n            stringBuffer.append (inputLine);\n        }\n        in.close ();\n    } catch (MalformedURLException ex) {\n        return null;\n    } catch (UnsupportedEncodingException ex) {\n        return null;\n    } catch (IOException ex) {\n        return null;\n    }\n    return stringBuffer.toString ();\n}\n"}
{"clone_type": "MT3", "method1_id": 1042184, "method2_id": 18241505, "code1": "public static String scramble (String text) {\n    try {\n        MessageDigest md = MessageDigest.getInstance (\"SHA-1\");\n        md.update (text.getBytes (\"UTF-8\"));\n        StringBuffer sb = new StringBuffer ();\n        for (byte b : md.digest ()) sb.append (Integer.toString (b & 0xFF, 16));\n\n        return sb.toString ();\n    } catch (UnsupportedEncodingException e) {\n        return null;\n    } catch (NoSuchAlgorithmException e) {\n        return null;\n    }\n}\n", "code2": "public static String generateToken (ClientInfo clientInfo) {\n    try {\n        MessageDigest md5 = MessageDigest.getInstance (\"MD5\");\n        Random rand = new Random ();\n        String random = clientInfo.getIpAddress () + \":\" + clientInfo.getPort () + \":\" + rand.nextInt ();\n        md5.update (random.getBytes ());\n        String token = toHexString (md5.digest ((new Date ()).toString ().getBytes ()));\n        clientInfo.setToken (token);\n        return token;\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace ();\n    }\n    return null;\n}\n"}
{"clone_type": "MT3", "method1_id": 1428985, "method2_id": 4580377, "code1": "public static void copyDirectory (File srcPath, File dstPath) throws IOException {\n    if (srcPath.getName ().contains (\"svn\") || srcPath.getName ().contains (\"backup\")) return;\n\n    if (srcPath.isDirectory ()) {\n        if (! dstPath.exists ()) {\n            dstPath.mkdirs ();\n        }\n        String files [] = srcPath.list ();\n        for (int i = 0;\n        i < files.length; i ++) {\n            copyDirectory (new File (srcPath, files [i]), new File (dstPath, files [i]));\n        }\n    } else {\n        if (! srcPath.exists ()) {\n            System.out.println (\"Arquivo ou diret\ufffdrio n\ufffdo existe.\");\n            System.exit (0);\n        } else {\n            InputStream in = new FileInputStream (srcPath);\n            OutputStream out = new FileOutputStream (dstPath);\n            byte [] buf = new byte [1024];\n            int len;\n            while ((len = in.read (buf)) > 0) {\n                out.write (buf, 0, len);\n            }\n            in.close ();\n            out.close ();\n        }\n    }\n    System.out.println (\"Directory copied.\");\n}\n", "code2": "public static void copyTransformationResources (File sourceLocation, File targetLocation) throws IOException, FileNotFoundException {\n    try {\n        if (sourceLocation.isDirectory ()) {\n            if (! targetLocation.exists ()) {\n                targetLocation.mkdir ();\n            }\n            String [] children = sourceLocation.list (new FilenameFilter () {\n                @Override\n                public boolean accept (File dir, String name) {\n                    return ! name.contains (\".svn\");\n                }}\n\n            );\n            for (int i = 0;\n            i < children.length; i ++) {\n                copyTransformationResources (new File (sourceLocation, children [i]), new File (targetLocation, children [i]));\n            }\n        } else {\n            InputStream in = new FileInputStream (sourceLocation);\n            OutputStream out = new FileOutputStream (targetLocation);\n            byte [] buf = new byte [1024];\n            int len;\n            while ((len = in.read (buf)) > 0) {\n                out.write (buf, 0, len);\n            }\n            in.close ();\n            out.close ();\n        }\n    } catch (FileNotFoundException ex) {\n        ex.printStackTrace ();\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 1789990, "method2_id": 19026786, "code1": "public String getHash (final String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n    final MessageDigest digest = MessageDigest.getInstance (\"MD5\");\n    byte [] md5hash;\n    digest.update (password.getBytes (\"utf-8\"), 0, password.length ());\n    md5hash = digest.digest ();\n    return convertToHex (md5hash);\n}\n", "code2": "private String SHA1 (String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n    MessageDigest md;\n    md = MessageDigest.getInstance (\"SHA-1\");\n    byte [] sha1hash = new byte [40];\n    md.update (text.getBytes (\"iso-8859-1\"), 0, text.length ());\n    sha1hash = md.digest ();\n    return convertToHex (sha1hash);\n}\n"}
{"clone_type": "MT3", "method1_id": 81754, "method2_id": 8054454, "code1": "public void Sort (int a []) {\n    for (int i = a.length;\n    -- i >= 0;) {\n        for (int j = 0;\n        j < i; j ++) {\n            if (a [j] > a [j + 1]) {\n                int temp = a [j];\n                a [j] = a [j + 1];\n                a [j + 1] = temp;\n            }\n        }\n    }\n}\n", "code2": "public void sortIndexes () {\n    int i, j, count;\n    int t;\n    count = m_ItemIndexes.length;\n    for (i = 1; i < count; i ++) {\n        for (j = 0; j < count - i; j ++) {\n            if (m_ItemIndexes [j] > m_ItemIndexes [j + 1]) {\n                t = m_ItemIndexes [j];\n                m_ItemIndexes [j] = m_ItemIndexes [j + 1];\n                m_ItemIndexes [j + 1] = t;\n            }\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 6305269, "method2_id": 20691789, "code1": "protected void copyFile (File sourceFile, File destFile) {\n    FileChannel in = null;\n    FileChannel out = null;\n    try {\n        if (! verifyOrCreateParentPath (destFile.getParentFile ())) {\n            throw new IOException (\"Parent directory path \" + destFile.getAbsolutePath () + \" did not exist and could not be created\");\n        }\n        if (destFile.exists () || destFile.createNewFile ()) {\n            in = new FileInputStream (sourceFile).getChannel ();\n            out = new FileOutputStream (destFile).getChannel ();\n            in.transferTo (0, in.size (), out);\n        } else {\n            throw new IOException (\"Couldn't create file for \" + destFile.getAbsolutePath ());\n        }\n    } catch (IOException ioe) {\n        if (destFile.exists () && destFile.length () < sourceFile.length ()) {\n            destFile.delete ();\n        }\n        ioe.printStackTrace ();\n    } finally {\n        try {\n            in.close ();\n        } catch (Throwable t) {\n        }\n        try {\n            out.close ();\n        } catch (Throwable t) {\n        }\n        destFile.setLastModified (sourceFile.lastModified ());\n    }\n}\n", "code2": "public static void copyFile (File inputFile, File outputFile) throws IOException {\n    FileChannel inChannel = null;\n    FileChannel outChannel = null;\n    try {\n        inChannel = new FileInputStream (inputFile).getChannel ();\n        outChannel = new FileOutputStream (outputFile).getChannel ();\n        inChannel.transferTo (0, inChannel.size (), outChannel);\n    } catch (IOException e) {\n        throw e;\n    } finally {\n        try {\n            if (inChannel != null) {\n                inChannel.close ();\n            }\n            if (outChannel != null) {\n                outChannel.close ();\n            }\n        } catch (IOException e) {\n            throw e;\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 5467907, "method2_id": 11319480, "code1": "public static boolean copyFile (final File src, final File dst) {\n    boolean result = false;\n    FileChannel inChannel = null;\n    FileChannel outChannel = null;\n    synchronized (FileUtil.DATA_LOCK) {\n        try {\n            inChannel = new FileInputStream (src).getChannel ();\n            outChannel = new FileOutputStream (dst).getChannel ();\n            inChannel.transferTo (0, inChannel.size (), outChannel);\n            result = true;\n        } catch (IOException e) {\n        } finally {\n            if (inChannel != null && inChannel.isOpen ()) {\n                try {\n                    inChannel.close ();\n                } catch (IOException e) {\n                }\n            }\n            if (outChannel != null && outChannel.isOpen ()) {\n                try {\n                    outChannel.close ();\n                } catch (IOException e) {\n                }\n            }\n        }\n    }\n    return result;\n}\n", "code2": "public static boolean decodeFileToFile (String infile, String outfile) {\n    boolean success = false;\n    java.io.InputStream in = null;\n    java.io.OutputStream out = null;\n    try {\n        in = new Base64.InputStream (new java.io.BufferedInputStream (new java.io.FileInputStream (infile)), Base64.DECODE);\n        out = new java.io.BufferedOutputStream (new java.io.FileOutputStream (outfile));\n        byte [] buffer = new byte [65536];\n        int read = - 1;\n        while ((read = in.read (buffer)) >= 0) {\n            out.write (buffer, 0, read);\n        }\n        success = true;\n    } catch (java.io.IOException exc) {\n        exc.printStackTrace ();\n    } finally {\n        try {\n            in.close ();\n        } catch (Exception exc) {\n        }\n        try {\n            out.close ();\n        } catch (Exception exc) {\n        }\n    }\n    return success;\n}\n"}
{"clone_type": "MT3", "method1_id": 19131858, "method2_id": 21393871, "code1": "private String fetchContent () throws IOException {\n    BufferedReader reader = new BufferedReader (new InputStreamReader (url.openStream ()));\n    StringBuffer buf = new StringBuffer ();\n    String str;\n    while ((str = reader.readLine ()) != null) {\n        buf.append (str);\n    }\n    return buf.toString ();\n}\n", "code2": "public String call () throws Exception {\n    InputStream stream = url.openStream ();\n    StringBuffer sb = new StringBuffer ();\n    BufferedReader reader = new BufferedReader (new InputStreamReader (stream));\n    String line = null;\n    while ((line = reader.readLine ()) != null) {\n        sb.append (line);\n    }\n    return sb.toString ();\n}\n"}
{"clone_type": "MT3", "method1_id": 14313423, "method2_id": 19373644, "code1": "public void transpose () {\n    for (int i = 0;\n    i < rows; i ++) {\n        for (int j = 0;\n        j < i; j ++) {\n            double t = flmat [i] [j];\n            flmat [i] [j] = flmat [j] [i];\n            flmat [j] [i] = t;\n        }\n    }\n}\n", "code2": "public Matrix transpose () {\n    Matrix X = new Matrix (n, m);\n    double [] [] C = X.getArray ();\n    for (int i = 0;\n    i < m; i ++) {\n        for (int j = 0;\n        j < n; j ++) {\n            C [j] [i] = A [i] [j];\n        }\n    }\n    return X;\n}\n"}
{"clone_type": "MT3", "method1_id": 4723745, "method2_id": 16063556, "code1": "public static String encodePassword (String password) {\n    try {\n        MessageDigest messageDiegest = MessageDigest.getInstance (\"SHA-1\");\n        messageDiegest.update (password.getBytes (\"UTF-8\"));\n        return Base64.encodeToString (messageDiegest.digest (), false);\n    } catch (NoSuchAlgorithmException e) {\n        log.error (\"Exception while encoding password\");\n        throw new Error (e);\n    } catch (UnsupportedEncodingException e) {\n        log.error (\"Exception while encoding password\");\n        throw new Error (e);\n    }\n}\n", "code2": "public static String md (String passwd) {\n    MessageDigest md5 = null;\n    String digest = passwd;\n    try {\n        md5 = MessageDigest.getInstance (\"MD5\");\n        md5.update (passwd.getBytes ());\n        byte [] digestData = md5.digest ();\n        digest = byteArrayToHex (digestData);\n    } catch (NoSuchAlgorithmException e) {\n        LOG.warn (\"MD5 not supported. Using plain string as password!\");\n    } catch (Exception e) {\n        LOG.warn (\"Digest creation failed. Using plain string as password!\");\n    }\n    return digest;\n}\n"}
{"clone_type": "MT3", "method1_id": 2825450, "method2_id": 10565544, "code1": "public static void copy (File source, File dest) throws IOException {\n    FileChannel in = null, out = null;\n    try {\n        in = new FileInputStream (source).getChannel ();\n        out = new FileOutputStream (dest).getChannel ();\n        long size = in.size ();\n        MappedByteBuffer buf = in.map (FileChannel.MapMode.READ_ONLY, 0, size);\n        out.write (buf);\n    } finally {\n        if (in != null) in.close ();\n\n        if (out != null) out.close ();\n\n    }\n}\n", "code2": "public static void copyToFileAndCloseStreams (InputStream istr, File destFile) throws IOException {\n    OutputStream ostr = null;\n    try {\n        ostr = new FileOutputStream (destFile);\n        IOUtils.copy (istr, ostr);\n    } finally {\n        if (ostr != null) ostr.close ();\n\n        if (istr != null) istr.close ();\n\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 13541067, "method2_id": 22899260, "code1": "private String digestMd5 (final String password) {\n    String base64;\n    try {\n        MessageDigest digest = MessageDigest.getInstance (\"MD5\");\n        digest.update (password.getBytes ());\n        base64 = fr.cnes.sitools.util.Base64.encodeBytes (digest.digest ());\n    } catch (NoSuchAlgorithmException e) {\n        throw new RuntimeException (e);\n    }\n    return \"{MD5}\" + base64;\n}\n", "code2": "public static String sha1Hash (String input) {\n    try {\n        MessageDigest sha1Digest = MessageDigest.getInstance (\"SHA-1\");\n        sha1Digest.update (input.getBytes ());\n        return byteArrayToString (sha1Digest.digest ());\n    } catch (Exception e) {\n        logger.error (e.getMessage (), e);\n    }\n    return \"\";\n}\n"}
{"clone_type": "MT3", "method1_id": 135138, "method2_id": 23677175, "code1": "public long fib (long n) {\n    if (n <= 1) return n;\n    else return fib (n - 1) + fib (n - 2);\n\n}\n", "code2": "public static int getFibonacci (int n) {\n    if (n == 0) return 0;\n    else if (n == 1) return 1;\n    else return getFibonacci (n - 1) + getFibonacci (n - 2);\n\n}\n"}
{"clone_type": "MT3", "method1_id": 12603125, "method2_id": 17989082, "code1": "public static int binarySearch (int vl, int [] vls, int from, int to) {\n    int low = from;\n    int high = to - 1;\n    while (low <= high) {\n        int mid = (low + high) / 2;\n        if (vls [mid] < vl) {\n            low = mid + 1;\n        } else if (vls [mid] > vl) {\n            high = mid - 1;\n        } else {\n            return mid;\n        }\n\n    }\n    return - 1;\n}\n", "code2": "public static int search (int [] array, int value) {\n    int end = array.length - 1;\n    int start = 0;\n    int middle;\n    while (start < end) {\n        middle = (start + end) / 2;\n        if (value > array [middle]) {\n            start = middle + 1;\n        } else if (value < array [middle]) {\n            end = middle - 1;\n        } else {\n            return middle;\n        }\n\n    }\n    return - 1;\n}\n"}
{"clone_type": "MT3", "method1_id": 4511510, "method2_id": 10005624, "code1": "public static String cryptoSHA (String _strSrc) {\n    try {\n        BASE64Encoder encoder = new BASE64Encoder ();\n        MessageDigest sha = MessageDigest.getInstance (\"SHA\");\n        sha.update (_strSrc.getBytes ());\n        byte [] buffer = sha.digest ();\n        return encoder.encode (buffer);\n    } catch (Exception err) {\n        System.out.println (err);\n    }\n    return \"\";\n}\n", "code2": "public Object run () {\n    try {\n        MessageDigest digest = MessageDigest.getInstance (\"SHA\");\n        digest.update (buf.toString ().getBytes ());\n        byte [] data = digest.digest ();\n        serialNum = new BASE64Encoder ().encode (data);\n        return serialNum;\n    } catch (NoSuchAlgorithmException exp) {\n        BootSecurityManager.securityLogger.log (Level.SEVERE, exp.getMessage (), exp);\n        return buf.toString ();\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 14132965, "method2_id": 21247844, "code1": "public static void copia (File nombreFuente, File nombreDestino) throws IOException {\n    FileInputStream fis = new FileInputStream (nombreFuente);\n    FileOutputStream fos = new FileOutputStream (nombreDestino);\n    FileChannel canalFuente = fis.getChannel ();\n    FileChannel canalDestino = fos.getChannel ();\n    canalFuente.transferTo (0, canalFuente.size (), canalDestino);\n    fis.close ();\n    fos.close ();\n}\n", "code2": "public static void kopirujSoubor (File vstup, File vystup) throws IOException {\n    FileChannel sourceChannel = new FileInputStream (vstup).getChannel ();\n    FileChannel destinationChannel = new FileOutputStream (vystup).getChannel ();\n    sourceChannel.transferTo (0, sourceChannel.size (), destinationChannel);\n    sourceChannel.close ();\n    destinationChannel.close ();\n}\n"}
{"clone_type": "MT3", "method1_id": 10598170, "method2_id": 23677139, "code1": "private static String sort (final String item) {\n    final char [] chars = item.toCharArray ();\n    for (int i = 1;\n    i < chars.length; i ++) {\n        for (int j = 0;\n        j < chars.length - 1; j ++) {\n            if (chars [j] > chars [j + 1]) {\n                final char temp = chars [j];\n                chars [j] = chars [j + 1];\n                chars [j + 1] = temp;\n            }\n        }\n    }\n    return String.valueOf (chars);\n}\n", "code2": "public static void BubbleSortLong1 (long [] num) {\n    boolean flag = true;\n    long temp;\n    while (flag) {\n        flag = false;\n        for (int j = 0;\n        j < num.length - 1; j ++) {\n            if (num [j] > num [j + 1]) {\n                temp = num [j];\n                num [j] = num [j + 1];\n                num [j + 1] = temp;\n                flag = true;\n            }\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 12236729, "method2_id": 17467385, "code1": "private void copy (File inputFile, File outputFile) throws Exception {\n    FileReader in = new FileReader (inputFile);\n    FileWriter out = new FileWriter (outputFile);\n    int c;\n    while ((c = in.read ()) != - 1) out.write (c);\n\n    in.close ();\n    out.close ();\n}\n", "code2": "private void moveFile (File orig, File target) throws IOException {\n    byte buffer [] = new byte [1000];\n    int bread = 0;\n    FileInputStream fis = new FileInputStream (orig);\n    FileOutputStream fos = new FileOutputStream (target);\n    while (bread != - 1) {\n        bread = fis.read (buffer);\n        if (bread != - 1) fos.write (buffer, 0, bread);\n\n    }\n    fis.close ();\n    fos.close ();\n    orig.delete ();\n}\n"}
{"clone_type": "MT3", "method1_id": 11419588, "method2_id": 21636561, "code1": "public static String MD5 (String text) {\n    try {\n        MessageDigest md;\n        md = MessageDigest.getInstance (\"MD5\");\n        byte [] md5hash = new byte [32];\n        md.update (text.getBytes (\"iso-8859-1\"), 0, text.length ());\n        md5hash = md.digest ();\n        return convertToHex (md5hash);\n    } catch (Exception e) {\n        System.out.println (e.toString ());\n    }\n    return null;\n}\n", "code2": "public static String SHA1 (String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n    MessageDigest md;\n    md = MessageDigest.getInstance (\"SHA-1\");\n    byte [] sha1hash = new byte [40];\n    md.update (text.getBytes (\"iso-8859-1\"), 0, text.length ());\n    sha1hash = md.digest ();\n    return convertToHex (sha1hash);\n}\n"}
{"clone_type": "MT3", "method1_id": 15609433, "method2_id": 23677141, "code1": "public static int [] bubbleSort2 (int [] source) {\n    if (null != source && source.length > 0) {\n        boolean flag = false;\n        while (! flag) {\n            for (int i = 0;\n            i < source.length - 1; i ++) {\n                if (source [i] > source [i + 1]) {\n                    int temp = source [i];\n                    source [i] = source [i + 1];\n                    source [i + 1] = temp;\n                    break;\n                } else if (i == source.length - 2) {\n                    flag = true;\n                }\n\n            }\n        }\n    }\n    return source;\n}\n", "code2": "public static void BubbleSortShort1 (short [] num) {\n    boolean flag = true;\n    short temp;\n    while (flag) {\n        flag = false;\n        for (int j = 0;\n        j < num.length - 1; j ++) {\n            if (num [j] > num [j + 1]) {\n                temp = num [j];\n                num [j] = num [j + 1];\n                num [j + 1] = temp;\n                flag = true;\n            }\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 19117993, "method2_id": 20082006, "code1": "public static final void copyFile (File argSource, File argDestination) throws IOException {\n    FileChannel srcChannel = new FileInputStream (argSource).getChannel ();\n    FileChannel dstChannel = new FileOutputStream (argDestination).getChannel ();\n    try {\n        dstChannel.transferFrom (srcChannel, 0, srcChannel.size ());\n    } finally {\n        srcChannel.close ();\n        dstChannel.close ();\n    }\n}\n", "code2": "public static void copyFile (File src, File dst) throws IOException {\n    FileChannel sourceChannel = new FileInputStream (src).getChannel ();\n    FileChannel destinationChannel = new FileOutputStream (dst).getChannel ();\n    sourceChannel.transferTo (0, sourceChannel.size (), destinationChannel);\n    sourceChannel.close ();\n    destinationChannel.close ();\n}\n"}
{"clone_type": "MT3", "method1_id": 13901037, "method2_id": 17224030, "code1": "public static String generateGuid (boolean secure) {\n    MessageDigest md5 = null;\n    String valueBeforeMD5 = null;\n    String valueAfterMD5 = null;\n    StringBuffer sbValueBeforeMD5 = new StringBuffer ();\n    try {\n        md5 = MessageDigest.getInstance (\"MD5\");\n    } catch (NoSuchAlgorithmException e) {\n        log.error (\"Error: \" + e);\n    }\n    try {\n        long time = System.currentTimeMillis ();\n        long rand = 0L;\n        if (secure) rand = mySecureRand.nextLong ();\n        else rand = myRand.nextLong ();\n\n        sbValueBeforeMD5.append (s_id);\n        sbValueBeforeMD5.append (\":\");\n        sbValueBeforeMD5.append (Long.toString (time));\n        sbValueBeforeMD5.append (\":\");\n        sbValueBeforeMD5.append (Long.toString (rand));\n        valueBeforeMD5 = sbValueBeforeMD5.toString ();\n        md5.update (valueBeforeMD5.getBytes ());\n        byte array [] = md5.digest ();\n        StringBuffer sb = new StringBuffer ();\n        for (int j = 0;\n        j < array.length; j ++) {\n            int b = array [j] & 0xff;\n            if (b < 16) sb.append ('0');\n\n            sb.append (Integer.toHexString (b));\n        }\n        valueAfterMD5 = sb.toString ();\n    } catch (Exception e) {\n        log.error (\"Error:\" + e);\n    }\n    String raw = valueAfterMD5.toUpperCase ();\n    StringBuffer sb = new StringBuffer ();\n    sb.append (raw.substring (0, 8));\n    sb.append (\"-\");\n    sb.append (raw.substring (8, 12));\n    sb.append (\"-\");\n    sb.append (raw.substring (12, 16));\n    sb.append (\"-\");\n    sb.append (raw.substring (16, 20));\n    sb.append (\"-\");\n    sb.append (raw.substring (20));\n    return sb.toString ();\n}\n", "code2": "private void getRandomGUID (boolean secure) {\n    MessageDigest md5 = null;\n    StringBuffer sbValueBeforeMD5 = new StringBuffer ();\n    try {\n        md5 = MessageDigest.getInstance (\"MD5\");\n    } catch (NoSuchAlgorithmException e) {\n        System.out.println (\"Error: \" + e);\n    }\n    try {\n        long time = System.currentTimeMillis ();\n        long rand = 0;\n        if (secure) {\n            rand = mySecureRand.nextLong ();\n        } else {\n            rand = myRand.nextLong ();\n        }\n        sbValueBeforeMD5.append (s_id);\n        sbValueBeforeMD5.append (\":\");\n        sbValueBeforeMD5.append (Long.toString (time));\n        sbValueBeforeMD5.append (\":\");\n        sbValueBeforeMD5.append (Long.toString (rand));\n        valueBeforeMD5 = sbValueBeforeMD5.toString ();\n        md5.update (valueBeforeMD5.getBytes ());\n        byte [] array = md5.digest ();\n        StringBuffer sb = new StringBuffer ();\n        for (int j = 0;\n        j < array.length; ++ j) {\n            int b = array [j] & 0xFF;\n            if (b < 0x10) sb.append ('0');\n\n            sb.append (Integer.toHexString (b));\n        }\n        valueAfterMD5 = sb.toString ();\n    } catch (Exception e) {\n        System.out.println (\"Error:\" + e);\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 10695599, "method2_id": 13884047, "code1": "public static String stringOfUrl (String addr) throws IOException {\n    ByteArrayOutputStream output = new ByteArrayOutputStream ();\n    URL url = new URL (addr);\n    IOUtils.copy (url.openStream (), output);\n    return output.toString ();\n}\n", "code2": "private byte [] getBytes (String resource) throws IOException {\n    InputStream is = HttpServletFileDownloadTest.class.getResourceAsStream (resource);\n    ByteArrayOutputStream out = new ByteArrayOutputStream ();\n    IOUtils.copy (is, out);\n    return out.toByteArray ();\n}\n"}
{"clone_type": "MT3", "method1_id": 2433175, "method2_id": 11522419, "code1": "private void copyFile (File orig, File dest) {\n    byte [] buffer = new byte [1024];\n    try {\n        FileInputStream fis = new FileInputStream (orig);\n        FileOutputStream fos = new FileOutputStream (dest, true);\n        int readBytes = 0;\n        do {\n            readBytes = fis.read (buffer);\n            if (readBytes > 0) fos.write (buffer, 0, readBytes);\n\n        } while (readBytes > 0);\n        fos.close ();\n        fis.close ();\n    } catch (Exception e) {\n        e.printStackTrace ();\n    }\n}\n", "code2": "public static void copyFile (File in, File out) {\n    int len;\n    byte [] buffer = new byte [1024];\n    try {\n        FileInputStream fin = new FileInputStream (in);\n        FileOutputStream fout = new FileOutputStream (out);\n        while ((len = fin.read (buffer)) >= 0) fout.write (buffer, 0, len);\n\n        fin.close ();\n        fout.close ();\n    } catch (IOException ex) {\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 7635628, "method2_id": 23677141, "code1": "private void bubbleSort (int values []) {\n    int len = values.length - 1;\n    for (int i = 0;\n    i < len; i ++) {\n        for (int j = 0;\n        j < len - i; j ++) {\n            if (values [j] > values [j + 1]) {\n                int tmp = values [j];\n                values [j] = values [j + 1];\n                values [j + 1] = tmp;\n            }\n        }\n    }\n}\n", "code2": "public static void BubbleSortShort1 (short [] num) {\n    boolean flag = true;\n    short temp;\n    while (flag) {\n        flag = false;\n        for (int j = 0;\n        j < num.length - 1; j ++) {\n            if (num [j] > num [j + 1]) {\n                temp = num [j];\n                num [j] = num [j + 1];\n                num [j + 1] = temp;\n                flag = true;\n            }\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 2264195, "method2_id": 12736403, "code1": "public static int binarySearch (List pl, Comparator c, Object p) {\n    int l = 0;\n    int u = pl.size () - 1;\n    while (l <= u) {\n        int m = (l + u) / 2;\n        int v = c.compare (pl.get (m), p);\n        if (v > 0) {\n            l = m + 1;\n        } else if (v < 0) {\n            u = m - 1;\n        } else {\n            return m;\n        }\n\n    }\n    return - (l + 1);\n}\n", "code2": "protected synchronized int findIndex (int virtualIndex) {\n    int low = 0;\n    int high = realSize - 1;\n    int mid;\n    while (low <= high) {\n        mid = (low + high) / 2;\n        if (indices [mid] > virtualIndex) {\n            high = mid - 1;\n        } else if (indices [mid] < virtualIndex) {\n            low = mid + 1;\n        } else {\n            return mid;\n        }\n\n    }\n    throw new AssertionError (\"Addressing error! (could not find proper index)\");\n}\n"}
{"clone_type": "MT3", "method1_id": 18942517, "method2_id": 18942519, "code1": "public Long addRole (AuthSession authSession, RoleBean roleBean) {\n    PreparedStatement ps = null;\n    DatabaseAdapter dbDyn = null;\n    try {\n        dbDyn = DatabaseAdapter.getInstance ();\n        CustomSequenceType seq = new CustomSequenceType ();\n        seq.setSequenceName (\"seq_WM_AUTH_ACCESS_GROUP\");\n        seq.setTableName (\"WM_AUTH_ACCESS_GROUP\");\n        seq.setColumnName (\"ID_ACCESS_GROUP\");\n        Long sequenceValue = dbDyn.getSequenceNextValue (seq);\n        ps = dbDyn.prepareStatement (\"insert into WM_AUTH_ACCESS_GROUP \" + \"( ID_ACCESS_GROUP, NAME_ACCESS_GROUP ) values \" + (dbDyn.getIsNeedUpdateBracket () ? \"(\" : \"\") + \" ?, ? \" + (dbDyn.getIsNeedUpdateBracket () ? \")\" : \"\"));\n        RsetTools.setLong (ps, 1, sequenceValue);\n        ps.setString (2, roleBean.getName ());\n        int i1 = ps.executeUpdate ();\n        if (log.isDebugEnabled ()) log.debug (\"Count of inserted records - \" + i1);\n\n        dbDyn.commit ();\n        return sequenceValue;\n    } catch (Exception e) {\n        try {\n            if (dbDyn != null) dbDyn.rollback ();\n\n        } catch (Exception e001) {\n        }\n        String es = \"Error add new role\";\n        log.error (es, e);\n        throw new IllegalStateException (es, e);\n    } finally {\n        DatabaseManager.close (dbDyn, ps);\n        dbDyn = null;\n        ps = null;\n    }\n}\n", "code2": "public void deleteRole (AuthSession authSession, RoleBean roleBean) {\n    DatabaseAdapter dbDyn = null;\n    PreparedStatement ps = null;\n    try {\n        dbDyn = DatabaseAdapter.getInstance ();\n        if (roleBean.getRoleId () == null) throw new IllegalArgumentException (\"role id is null\");\n\n        String sql = \"delete from WM_AUTH_ACCESS_GROUP where ID_ACCESS_GROUP=? \";\n        ps = dbDyn.prepareStatement (sql);\n        RsetTools.setLong (ps, 1, roleBean.getRoleId ());\n        int i1 = ps.executeUpdate ();\n        if (log.isDebugEnabled ()) log.debug (\"Count of deleted records - \" + i1);\n\n        dbDyn.commit ();\n    } catch (Exception e) {\n        try {\n            if (dbDyn != null) dbDyn.rollback ();\n\n        } catch (Exception e001) {\n        }\n        String es = \"Error delete role\";\n        log.error (es, e);\n        throw new IllegalStateException (es, e);\n    } finally {\n        DatabaseManager.close (dbDyn, ps);\n        dbDyn = null;\n        ps = null;\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 9019939, "method2_id": 22571951, "code1": "String [] [] transpose (String [] [] data) {\n    int r = data.length;\n    int c = data [0].length;\n    String matrix [] [] = new String [c] [r];\n    for (int i = 0;\n    i < r; i ++) {\n        for (int j = 0;\n        j < c; j ++) {\n            matrix [j] [i] = data [i] [j];\n        }\n    }\n    return matrix;\n}\n", "code2": "@Override\npublic Matrix transpose (Factory factory) {\n    if (factory == null) throw new NullPointerException ();\n\n    double result [] [] = new double [columns] [rows];\n    for (int i = 0;\n    i < rows; i ++) {\n        for (int j = 0;\n        j < columns; j ++) {\n            result [j] [i] = self [i] [j];\n        }\n    }\n    return factory.createMatrix (result);\n}\n"}
{"clone_type": "MT3", "method1_id": 6330721, "method2_id": 15165294, "code1": "public int setData (String mysql) {\n    int mycount = 0;\n    try {\n        conn.setAutoCommit (false);\n        mycount = 0;\n        stmt = conn.createStatement ();\n        mycount = stmt.executeUpdate (mysql);\n    } catch (Exception e) {\n        mycount = - 1;\n    } finally {\n        if (mycount > 0) {\n            try {\n                conn.commit ();\n            } catch (SQLException e) {\n                e.printStackTrace ();\n            }\n        } else {\n            try {\n                conn.rollback ();\n            } catch (SQLException e) {\n                e.printStackTrace ();\n            }\n        }\n    }\n    return mycount;\n}\n", "code2": "public void insert () throws Exception {\n    Connection con = DbUtil.connectToDb ();\n    PreparedStatement pStmt = null;\n    try {\n        pStmt = con.prepareStatement (\"INSERT INTO \" + Constants.TABLENAME + \" (name,phone,address)\" + \" values(?,?,?)\");\n        con.setAutoCommit (false);\n        pStmt.setString (1, name);\n        pStmt.setString (2, phone);\n        pStmt.setString (3, address);\n        int j = pStmt.executeUpdate ();\n        con.commit ();\n    } catch (Exception ex) {\n        try {\n            con.rollback ();\n        } catch (SQLException sqlex) {\n            sqlex.printStackTrace (System.out);\n        }\n        throw ex;\n    } finally {\n        try {\n            pStmt.close ();\n            con.close ();\n        } catch (Exception e) {\n            e.printStackTrace ();\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 7553634, "method2_id": 18599251, "code1": "public static String calcolaMd5 (String messaggio) {\n    MessageDigest md;\n    try {\n        md = MessageDigest.getInstance (\"MD5\");\n    } catch (NoSuchAlgorithmException e) {\n        throw new RuntimeException (e);\n    }\n    md.reset ();\n    md.update (messaggio.getBytes ());\n    byte [] impronta = md.digest ();\n    return new String (impronta);\n}\n", "code2": "public static String hash (String plainTextPwd) {\n    MessageDigest hashAlgo;\n    try {\n        hashAlgo = java.security.MessageDigest.getInstance (\"MD5\");\n    } catch (NoSuchAlgorithmException e) {\n        throw new QwickException (e);\n    }\n    hashAlgo.update (plainTextPwd.getBytes ());\n    return new String (hashAlgo.digest ());\n}\n"}
{"clone_type": "MT3", "method1_id": 1477578, "method2_id": 3236017, "code1": "public static void copy (FileInputStream source, FileOutputStream dest) throws IOException {\n    FileChannel in = null, out = null;\n    try {\n        in = source.getChannel ();\n        out = dest.getChannel ();\n        long size = in.size ();\n        MappedByteBuffer buf = in.map (FileChannel.MapMode.READ_ONLY, 0, size);\n        out.write (buf);\n    } finally {\n        if (in != null) in.close ();\n\n        if (out != null) out.close ();\n\n    }\n}\n", "code2": "public static void copyFile (String source, String dest) throws IOException {\n    FileChannel in = null, out = null;\n    try {\n        in = new FileInputStream (new File (source)).getChannel ();\n        out = new FileOutputStream (new File (dest)).getChannel ();\n        in.transferTo (0, in.size (), out);\n    } finally {\n        if (in != null) in.close ();\n\n        if (out != null) out.close ();\n\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 2090333, "method2_id": 4208869, "code1": "private static byte [] tryLoadFile (String path) throws IOException {\n    InputStream in = new FileInputStream (path);\n    ByteArrayOutputStream out = new ByteArrayOutputStream ();\n    IOUtils.copy (in, out);\n    in.close ();\n    out.close ();\n    return out.toByteArray ();\n}\n", "code2": "public static void putNextJarEntry (JarOutputStream modelStream, String name, File file) throws IOException {\n    JarEntry entry = new JarEntry (name);\n    entry.setSize (file.length ());\n    modelStream.putNextEntry (entry);\n    InputStream fileStream = new BufferedInputStream (new FileInputStream (file));\n    IOUtils.copy (fileStream, modelStream);\n    fileStream.close ();\n}\n"}
{"clone_type": "MT3", "method1_id": 5031964, "method2_id": 14789933, "code1": "public static String md5 (String text) {\n    String encrypted = \"\";\n    try {\n        MessageDigest md = MessageDigest.getInstance (\"MD5\");\n        md.update (text.getBytes ());\n        encrypted = hex (md.digest ());\n    } catch (NoSuchAlgorithmException nsaEx) {\n    }\n    return encrypted;\n}\n", "code2": "public static String stringToHash (String text) {\n    MessageDigest md = null;\n    try {\n        md = MessageDigest.getInstance (\"SHA-1\");\n        md.update (text.getBytes (\"iso-8859-1\"), 0, text.length ());\n    } catch (NoSuchAlgorithmException e) {\n        throw new IllegalStateException (\"Should not happened: SHA-1 algorithm is missing.\");\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException (\"Should not happened: Could not encode text bytes '\" + text + \"' to iso-8859-1.\");\n    }\n    return new String (Base64.encodeBase64 (md.digest ()));\n}\n"}
{"clone_type": "MT3", "method1_id": 2530139, "method2_id": 14350198, "code1": "public static String md5 (String input) {\n    String res = \"\";\n    try {\n        MessageDigest algorithm = MessageDigest.getInstance (\"MD5\");\n        algorithm.reset ();\n        algorithm.update (input.getBytes ());\n        byte [] md5 = algorithm.digest ();\n        String tmp = \"\";\n        for (int i = 0;\n        i < md5.length; i ++) {\n            tmp = (Integer.toHexString (0xFF & md5 [i]));\n            if (tmp.length () == 1) {\n                res += \"0\" + tmp;\n            } else {\n                res += tmp;\n            }\n        }\n    } catch (NoSuchAlgorithmException ex) {\n        if (globali.jcVariabili.DEBUG) globali.jcFunzioni.erroreSQL (ex.toString ());\n\n    }\n    return res;\n}\n", "code2": "public static String encripty (String toEncripty) {\n    if (toEncripty != null) {\n        try {\n            synchronized (toEncripty) {\n                java.security.MessageDigest md = java.security.MessageDigest.getInstance (\"MD5\");\n                md.update (toEncripty.getBytes ());\n                byte [] hash = md.digest ();\n                StringBuffer hexString = new StringBuffer ();\n                for (int i = 0;\n                i < hash.length; i ++) {\n                    if ((0xff & hash [i]) < 0x10) hexString.append (\"0\" + Integer.toHexString ((0xFF & hash [i])));\n                    else hexString.append (Integer.toHexString (0xFF & hash [i]));\n\n                }\n                toEncripty = hexString.toString ();\n            }\n        } catch (Exception e) {\n            e.getMessage ();\n        }\n    }\n    return toEncripty;\n}\n"}
{"clone_type": "MT3", "method1_id": 9354771, "method2_id": 13627621, "code1": "public void encryptPassword () {\n    MessageDigest digest = null;\n    try {\n        digest = MessageDigest.getInstance (\"SHA\");\n    } catch (NoSuchAlgorithmException e) {\n        System.out.print (e);\n    }\n    try {\n        digest.update (passwordIn.getBytes (\"UTF-8\"));\n    } catch (UnsupportedEncodingException e) {\n        System.out.println (\"cannot find char set for getBytes\");\n    }\n    byte digestBytes [] = digest.digest ();\n    passwordHash = (new BASE64Encoder ()).encode (digestBytes);\n}\n", "code2": "public static synchronized String hash (String plaintext) {\n    MessageDigest md;\n    try {\n        md = MessageDigest.getInstance (\"SHA\");\n    } catch (NoSuchAlgorithmException e) {\n        return null;\n    }\n    try {\n        md.update (plaintext.getBytes (\"UTF-8\"));\n    } catch (UnsupportedEncodingException e) {\n        return null;\n    }\n    byte raw [] = md.digest ();\n    return (new BASE64Encoder ()).encode (raw);\n}\n"}
{"clone_type": "MT3", "method1_id": 166411, "method2_id": 305944, "code1": "protected void browseFile (JTextField dest) {\n    if (fileChooser == null) {\n        fileChooser = new JFileChooser ();\n        fileChooser.setFileSelectionMode (JFileChooser.FILES_AND_DIRECTORIES);\n    }\n    if (fileChooser.showOpenDialog (frame) == JFileChooser.APPROVE_OPTION) {\n        File f = fileChooser.getSelectedFile ();\n        if (f != null) dest.setText (f.getPath ());\n\n    }\n}\n", "code2": "public void actionPerformed (ActionEvent e) {\n    if (filechooser == null) {\n        filechooser = new JFileChooser ();\n        filechooser.setFileSelectionMode (JFileChooser.FILES_ONLY);\n    }\n    if (filechooser.showOpenDialog (ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {\n        open (filechooser.getSelectedFile ());\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 49244, "method2_id": 327933, "code1": "public jnamed (String conffile) throws IOException {\n    FileInputStream fs;\n    List ports = new ArrayList ();\n    List addresses = new ArrayList ();\n    try {\n        fs = new FileInputStream (conffile);\n    } catch (Exception e) {\n        System.out.println (\"Cannot open \" + conffile);\n        return;\n    }\n    caches = new HashMap ();\n    znames = new HashMap ();\n    TSIGs = new HashMap ();\n    BufferedReader br = new BufferedReader (new InputStreamReader (fs));\n    String line = null;\n    while ((line = br.readLine ()) != null) {\n        StringTokenizer st = new StringTokenizer (line);\n        if (! st.hasMoreTokens ()) continue;\n\n        String keyword = st.nextToken ();\n        if (! st.hasMoreTokens ()) {\n            System.out.println (\"Invalid line: \" + line);\n            continue;\n        }\n        if (keyword.charAt (0) == '#') continue;\n\n        if (keyword.equals (\"primary\")) addPrimaryZone (st.nextToken (), st.nextToken ());\n        else if (keyword.equals (\"secondary\")) addSecondaryZone (st.nextToken (), st.nextToken ());\n        else if (keyword.equals (\"cache\")) {\n            Cache cache = new Cache (st.nextToken ());\n            caches.put (new Short (DClass.IN), cache);\n        } else if (keyword.equals (\"key\")) addTSIG (st.nextToken (), st.nextToken ());\n        else if (keyword.equals (\"port\")) ports.add (Short.valueOf (st.nextToken ()));\n        else if (keyword.equals (\"address\")) {\n            String addr = st.nextToken ();\n            addresses.add (InetAddress.getByName (addr));\n        } else {\n            System.out.println (\"ignoring invalid keyword: \" + keyword);\n        }\n\n    }\n    if (ports.size () == 0) ports.add (new Short ((short) 53));\n\n    if (addresses.size () == 0) addresses.add (null);\n\n    Iterator iaddr = addresses.iterator ();\n    while (iaddr.hasNext ()) {\n        InetAddress addr = (InetAddress) iaddr.next ();\n        Iterator iport = ports.iterator ();\n        while (iport.hasNext ()) {\n            short port = ((Short) iport.next ()).shortValue ();\n            String addrString;\n            addUDP (addr, port);\n            addTCP (addr, port);\n            if (addr == null) addrString = \"0.0.0.0\";\n            else addrString = addr.getHostAddress ();\n\n            System.out.println (\"jnamed: listening on \" + addrString + \"#\" + port);\n        }\n    }\n    System.out.println (\"jnamed: running\");\n}\n", "code2": "public jnamed (String conffile) throws IOException {\n    FileInputStream fs;\n    boolean started = false;\n    try {\n        fs = new FileInputStream (conffile);\n    } catch (Exception e) {\n        System.out.println (\"Cannot open \" + conffile);\n        return;\n    }\n    cache = null;\n    znames = new Hashtable ();\n    TSIGs = new Hashtable ();\n    BufferedReader br = new BufferedReader (new InputStreamReader (fs));\n    String line = null;\n    while ((line = br.readLine ()) != null) {\n        StringTokenizer st = new StringTokenizer (line);\n        if (! st.hasMoreTokens ()) continue;\n\n        String keyword = st.nextToken ();\n        if (! st.hasMoreTokens ()) {\n            System.out.println (\"Invalid line: \" + line);\n            continue;\n        }\n        if (keyword.charAt (0) == '#') continue;\n\n        if (keyword.equals (\"primary\")) addPrimaryZone (st.nextToken ());\n\n        if (keyword.equals (\"secondary\")) addSecondaryZone (st.nextToken (), st.nextToken ());\n        else if (keyword.equals (\"cache\")) cache = new Cache (st.nextToken ());\n        else if (keyword.equals (\"key\")) addTSIG (st.nextToken (), st.nextToken ());\n        else if (keyword.equals (\"port\")) {\n            short port = Short.parseShort (st.nextToken ());\n            addUDP (port);\n            addTCP (port);\n            started = true;\n        }\n\n    }\n    if (cache == null) {\n        System.out.println (\"no cache specified\");\n        System.exit (- 1);\n    }\n    if (! started) {\n        addUDP ((short) 53);\n        addTCP ((short) 53);\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 14647876, "method2_id": 18293811, "code1": "public static void copyFile (IPath fromFileName, IPath toFileName) throws IOException {\n    File fromFile = fromFileName.toFile ();\n    File toFile = toFileName.toFile ();\n    if (! fromFile.exists ()) throw new IOException (\"FileCopy: \" + \"no such source file: \" + fromFileName);\n\n    if (! fromFile.isFile ()) throw new IOException (\"FileCopy: \" + \"can't copy directory: \" + fromFileName);\n\n    if (! fromFile.canRead ()) throw new IOException (\"FileCopy: \" + \"source file is unreadable: \" + fromFileName);\n\n    if (toFile.isDirectory ()) toFile = new File (toFile, fromFile.getName ());\n\n    if (toFile.exists ()) {\n        if (! toFile.canWrite ()) throw new IOException (\"FileCopy: \" + \"destination file is unwriteable: \" + toFileName);\n\n    } else {\n        String parent = toFile.getParent ();\n        if (parent == null) parent = System.getProperty (\"user.dir\");\n\n        File dir = new File (parent);\n        if (! dir.exists ()) throw new IOException (\"FileCopy: \" + \"destination directory doesn't exist: \" + parent);\n\n        if (dir.isFile ()) throw new IOException (\"FileCopy: \" + \"destination is not a directory: \" + parent);\n\n        if (! dir.canWrite ()) throw new IOException (\"FileCopy: \" + \"destination directory is unwriteable: \" + parent);\n\n    }\n    InputStream from = null;\n    OutputStream to = null;\n    try {\n        from = new BufferedInputStream (new FileInputStream (fromFile));\n        to = new BufferedOutputStream (new FileOutputStream (toFile));\n        byte [] buffer = new byte [4096];\n        int bytesRead;\n        while ((bytesRead = from.read (buffer)) != - 1) to.write (buffer, 0, bytesRead);\n\n    } finally {\n        if (from != null) try {\n            from.close ();\n        } catch (IOException e) {\n        }\n\n        if (to != null) try {\n            to.close ();\n        } catch (IOException e) {\n        }\n\n    }\n}\n", "code2": "private static void copy (String from_name, String to_name) throws IOException {\n    File from_file = new File (from_name);\n    File to_file = new File (to_name);\n    if (! from_file.exists ()) abort (\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" + from_file);\n\n    if (! from_file.isFile ()) abort (\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" + from_file);\n\n    if (! from_file.canRead ()) abort (\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" + from_file);\n\n    if (from_file.isDirectory ()) to_file = new File (to_file, from_file.getName ());\n\n    if (to_file.exists ()) {\n        if (! to_file.canWrite ()) abort (\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" + to_file);\n\n        System.out.println (\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd?\" + to_file.getName () + \"?(Y/N):\");\n        System.out.flush ();\n        BufferedReader in = new BufferedReader (new InputStreamReader (System.in));\n        String response = in.readLine ();\n        if (! response.equals (\"Y\") && ! response.equals (\"y\")) abort (\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n\n    } else {\n        String parent = to_file.getParent ();\n        if (parent == null) parent = System.getProperty (\"user.dir\");\n\n        File dir = new File (parent);\n        if (! dir.exists ()) abort (\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" + parent);\n\n        if (! dir.isFile ()) abort (\"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" + parent);\n\n        if (! dir.canWrite ()) abort (\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" + parent);\n\n    }\n    FileInputStream from = null;\n    FileOutputStream to = null;\n    try {\n        from = new FileInputStream (from_file);\n        to = new FileOutputStream (to_file);\n        byte [] buffer = new byte [4096];\n        int bytes_read;\n        while ((bytes_read = from.read (buffer)) != - 1) to.write (buffer, 0, bytes_read);\n\n    } finally {\n        if (from != null) try {\n            from.close ();\n        } catch (IOException e) {\n        }\n\n        if (to != null) try {\n            to.close ();\n        } catch (IOException e) {\n        }\n\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 1216562, "method2_id": 1493666, "code1": "public static void main (String [] args) {\n    System.out.println (\"Chapter 9: example Ligatures1\");\n    System.out.println (\"-> Creates a PDF file with a ligaturize method.\");\n    System.out.println (\"-> jars needed: iText.jar\");\n    System.out.println (\"-> resources needed: arial.ttf\");\n    System.out.println (\"-> file generated: ligatures1.pdf\");\n    Document document = new Document ();\n    try {\n        PdfWriter.getInstance (document, new FileOutputStream (\"results/in_action/chapter09/ligatures1.pdf\"));\n        document.open ();\n        BaseFont bf;\n        Font font;\n        bf = BaseFont.createFont (\"c:/windows/fonts/arial.ttf\", BaseFont.CP1252, BaseFont.EMBEDDED);\n        font = new Font (bf, 12);\n        document.add (new Paragraph (\"Movie title: Love at First Hiccough (Denmark)\", font));\n        document.add (new Paragraph (\"directed by Tomas Villum Jensen\", font));\n        document.add (new Paragraph (\"K\u00e6rlighed ved f\u00f8rste hik\", font));\n        document.add (new Paragraph (ligaturize (\"Kaerlighed ved f/orste hik\"), font));\n    } catch (DocumentException de) {\n        System.err.println (de.getMessage ());\n    } catch (IOException ioe) {\n        System.err.println (ioe.getMessage ());\n    }\n    document.close ();\n}\n", "code2": "public static void main (String [] args) {\n    System.out.println (\"True Types (embedded)\");\n    Document document = new Document ();\n    try {\n        PdfWriter.getInstance (document, new FileOutputStream (\"truetype.pdf\"));\n        document.open ();\n        BaseFont bfComic = BaseFont.createFont (\"c:\\\\windows\\\\fonts\\\\comic.ttf\", BaseFont.IDENTITY_H, BaseFont.EMBEDDED);\n        Font font = new Font (bfComic, 12);\n        String text1 = \"This is the quite popular True Type font 'Comic'.\";\n        String text2 = \"Some greek characters: \u0393\u0394\u03b6\";\n        String text3 = \"Some cyrillic characters: \u0418\u044f\";\n        document.add (new Paragraph (text1, font));\n        document.add (new Paragraph (text2, font));\n        document.add (new Paragraph (text3, font));\n    } catch (DocumentException de) {\n        System.err.println (de.getMessage ());\n    } catch (IOException ioe) {\n        System.err.println (ioe.getMessage ());\n    }\n    document.close ();\n}\n"}
{"clone_type": "MT3", "method1_id": 18306140, "method2_id": 22677985, "code1": "public RealSquareMatrix copyUpperToLower () {\n    for (int i = 0;\n    i < cols - 1; i ++) {\n        for (int j = i + 1;\n        j < cols; j ++) {\n            flmat [j] [i] = flmat [i] [j];\n        }\n    }\n    return this;\n}\n", "code2": "public Matrix44 transpose () {\n    Matrix44 result = new Matrix44 ();\n    for (int i = 0;\n    i < 4; i ++) {\n        for (int j = 0;\n        j < 4; j ++) {\n            result._m [i] [j] = _m [j] [i];\n        }\n    }\n    return result;\n}\n"}
{"clone_type": "MT3", "method1_id": 2699043, "method2_id": 15973624, "code1": "public Matrix transpose () {\n    Matrix result = new Matrix (height, width);\n    for (int i = 0;\n    i < height; i ++) {\n        for (int j = 0;\n        j < width; j ++) {\n            result.elements [i] [j] = elements [j] [i];\n        }\n    }\n    return result;\n}\n", "code2": "static final float [] [] transposeMatrix (float [] [] a) {\n    int ra = a.length;\n    int ca = a [0].length;\n    float [] [] m = new float [ca] [ra];\n    for (int i = 0;\n    i < ra; i ++) {\n        for (int j = 0;\n        j < ca; j ++) m [j] [i] = a [i] [j];\n\n    }\n    return m;\n}\n"}
{"clone_type": "MT3", "method1_id": 17196902, "method2_id": 22984624, "code1": "public void webpageAction () {\n    if (Desktop.isDesktopSupported ()) {\n        try {\n            Desktop.getDesktop ().browse (controller.getUrlLinks ().getWebpageUri ());\n        } catch (IOException e) {\n            JOptionPane.showMessageDialog (getFrame (), \"Can't find the default web browser\\nto open the web page \" + controller.getUrlLinks ().getWebpageUrlStr () + \".\", \"Cannot open web page\", JOptionPane.INFORMATION_MESSAGE);\n        }\n    } else {\n        JOptionPane.showMessageDialog (getFrame (), \"Operation not supported on this platform.\\nPlease go to \" + controller.getUrlLinks ().getWebpageUrlStr (), \"Cannot open web page\", JOptionPane.INFORMATION_MESSAGE);\n    }\n}\n", "code2": "public void ejecutarSeleccionado () {\n    String ruta = GestorCompartidos.getInstancia ().getGestorDisco ().getDirectorioCompletos () + \"/\" + _lblNombre.getText ();\n    if (Desktop.isDesktopSupported ()) {\n        try {\n            Desktop desktop = Desktop.getDesktop ();\n            if (desktop.isSupported (Desktop.Action.BROWSE)) {\n                desktop.browse (new URI (ruta));\n            }\n        } catch (Exception ex) {\n            ex.printStackTrace ();\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 763710, "method2_id": 22486940, "code1": "public void bubbleSort (int [] arr) {\n    boolean swapped = true;\n    int j = 0;\n    int tmp;\n    while (swapped) {\n        swapped = false;\n        j ++;\n        for (int i = 0;\n        i < arr.length - j; i ++) {\n            if (arr [i] > arr [i + 1]) {\n                tmp = arr [i];\n                arr [i] = arr [i + 1];\n                arr [i + 1] = tmp;\n                swapped = true;\n            }\n        }\n    }\n}\n", "code2": "public void sortingByBubble (int [] array) {\n    for (int i = 0;\n    i < array.length; i ++) {\n        for (int j = 0;\n        j < array.length - 1 - i; j ++) {\n            if (array [j] > array [j + 1]) {\n                int temp = array [j];\n                array [j] = array [j + 1];\n                array [j + 1] = temp;\n            }\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 1142777, "method2_id": 5877197, "code1": "public LinkedList < NameValuePair > getQuestion () {\n    InputStream is = null;\n    String result = \"\";\n    LinkedList < NameValuePair > question = new LinkedList < NameValuePair > ();\n    try {\n        HttpClient httpclient = new DefaultHttpClient ();\n        HttpPost httppost = new HttpPost (domain);\n        httppost.setEntity (new UrlEncodedFormEntity (library));\n        HttpResponse response = httpclient.execute (httppost);\n        HttpEntity entity = response.getEntity ();\n        is = entity.getContent ();\n    } catch (Exception e) {\n        Log.e (\"log_tag\", \"Error in http connection \" + e.toString ());\n    }\n    try {\n        BufferedReader reader = new BufferedReader (new InputStreamReader (is, \"iso-8859-1\"), 8);\n        StringBuilder sb = new StringBuilder ();\n        String line = null;\n        while ((line = reader.readLine ()) != null) {\n            sb.append (line);\n        }\n        is.close ();\n        result = sb.toString ();\n        if (result.equals (\"null,\")) {\n            return null;\n        }\n    } catch (Exception e) {\n        Log.e (\"log_tag\", \"Error converting result \" + e.toString ());\n    }\n    try {\n        JSONObject json = new JSONObject (result);\n        JSONArray data = json.getJSONArray (\"data\");\n        JSONObject quest = data.getJSONObject (0);\n        question.add (new BasicNameValuePair (\"q\", quest.getString (\"q\")));\n        question.add (new BasicNameValuePair (\"a\", quest.getString (\"a\")));\n        question.add (new BasicNameValuePair (\"b\", quest.getString (\"b\")));\n        question.add (new BasicNameValuePair (\"c\", quest.getString (\"c\")));\n        question.add (new BasicNameValuePair (\"d\", quest.getString (\"d\")));\n        question.add (new BasicNameValuePair (\"correct\", quest.getString (\"correct\")));\n        return question;\n    } catch (JSONException e) {\n        Log.e (\"log_tag\", \"Error parsing data \" + e.toString ());\n    }\n    return null;\n}\n", "code2": "public List < Mosque > getAllMosquaisFromDataBase () {\n    List < Mosque > mosquais = new ArrayList < Mosque > ();\n    InputStream is = null;\n    String result = \"\";\n    ArrayList < NameValuePair > nameValuePairs = new ArrayList < NameValuePair > ();\n    if (MyMapActivity.DEVELOPER_MODE) {\n        nameValuePairs.add (new BasicNameValuePair (Param.LATITUDE, MyMapActivity.mLatitude + \"\"));\n        nameValuePairs.add (new BasicNameValuePair (Param.LONGITUDE, MyMapActivity.mLongitude + \"\"));\n    } else {\n        nameValuePairs.add (new BasicNameValuePair (Param.LATITUDE, MyMapActivity.myLocation.getLatitude () + \"\"));\n        nameValuePairs.add (new BasicNameValuePair (Param.LONGITUDE, MyMapActivity.myLocation.getLongitude () + \"\"));\n    }\n    nameValuePairs.add (new BasicNameValuePair (Param.RAYON, DataBaseQuery.rayon * Param.KM_MARGE + \"\"));\n    try {\n        HttpClient httpclient = new DefaultHttpClient ();\n        HttpPost httppost = new HttpPost (Param.URI_SELECT_ALL_DATA_BASE);\n        httppost.setEntity (new UrlEncodedFormEntity (nameValuePairs));\n        HttpResponse response = httpclient.execute (httppost);\n        HttpEntity entity = response.getEntity ();\n        is = entity.getContent ();\n    } catch (Exception e) {\n        Log.e (\"log_tag\", \"Error in http connection \" + e.toString ());\n    }\n    try {\n        BufferedReader reader = new BufferedReader (new InputStreamReader (is, \"iso-8859-1\"), 8);\n        StringBuilder sb = new StringBuilder ();\n        String line = null;\n        while ((line = reader.readLine ()) != null) {\n            sb.append (line + \"\\n\");\n        }\n        is.close ();\n        result = sb.toString ();\n    } catch (Exception e) {\n        Log.e (\"log_tag\", \"Error converting result \" + e.toString ());\n    }\n    try {\n        JSONArray jArray = new JSONArray (result);\n        for (int i = 0;\n        i < jArray.length (); i ++) {\n            JSONObject json_data = jArray.getJSONObject (i);\n            Mosque mosquai = new Mosque (json_data.getInt (Param.ID), json_data.getString (Param.NOM), json_data.getDouble (Param.LATITUDE), json_data.getDouble (Param.LONGITUDE), json_data.getString (Param.INFO), json_data.getInt (Param.HAVE_PICTURE) == 1 ? true : false, json_data.getString (Param.PICTURE));\n            mosquais.add (mosquai);\n        }\n    } catch (JSONException e) {\n        Log.e (\"log_tag\", \"Error parsing data \" + e.toString ());\n    }\n    return mosquais;\n}\n"}
{"clone_type": "MT3", "method1_id": 2486619, "method2_id": 10169911, "code1": "public static void zipDirectory (File file, ZipOutputStream out) throws Exception {\n    String [] dirList = file.list ();\n    byte [] readBuffer = new byte [1024];\n    int bytesIn = 0;\n    for (int i = 0;\n    i < dirList.length; i ++) {\n        File f = new File (file, dirList [i]);\n        if (f.isDirectory ()) {\n            zipDirectory (f, out);\n            continue;\n        }\n        FileInputStream fis = new FileInputStream (f);\n        ZipEntry zipEntry = new ZipEntry (f.getPath ());\n        out.putNextEntry (zipEntry);\n        while ((bytesIn = fis.read (readBuffer)) != - 1) {\n            out.write (readBuffer, 0, bytesIn);\n        }\n        fis.close ();\n    }\n}\n", "code2": "private void addDir (File dirObj, ZipOutputStream out) throws IOException {\n    File [] files = dirObj.listFiles ();\n    byte [] tmpBuf = new byte [1024];\n    for (int i = 0;\n    i < files.length; i ++) {\n        if (files [i].isDirectory ()) {\n            addDir (files [i], out);\n            continue;\n        }\n        String dir = dirObj.toString ();\n        dir = dir.substring (dir.indexOf (File.separator) + 1);\n        FileInputStream in = new FileInputStream (dirObj + File.separator + files [i].getName ());\n        out.putNextEntry (new ZipEntry (dir + File.separator + files [i].getName ()));\n        int len;\n        while ((len = in.read (tmpBuf)) > 0) {\n            out.write (tmpBuf, 0, len);\n        }\n        out.closeEntry ();\n        in.close ();\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 8258909, "method2_id": 17415423, "code1": "public static void copyFile (File sourceFile, File destFile) {\n    FileChannel source = null;\n    FileChannel destination = null;\n    try {\n        if (! destFile.exists ()) {\n            destFile.createNewFile ();\n        }\n        source = new FileInputStream (sourceFile).getChannel ();\n        destination = new FileOutputStream (destFile).getChannel ();\n        destination.transferFrom (source, 0, source.size ());\n    } catch (Exception e) {\n        e.printStackTrace ();\n    } finally {\n        try {\n            if (source != null) {\n                source.close ();\n            }\n            if (destination != null) {\n                destination.close ();\n            }\n        } catch (Exception e) {\n            e.printStackTrace ();\n        }\n    }\n}\n", "code2": "public void overwriteFileTest () throws Exception {\n    File filefrom = new File (\"/tmp/from.txt\");\n    File fileto = new File (\"/tmp/to.txt\");\n    InputStream from = null;\n    OutputStream to = null;\n    try {\n        from = new FileInputStream (filefrom);\n        to = new FileOutputStream (fileto);\n        byte [] buffer = new byte [4096];\n        int bytes_read;\n        while ((bytes_read = from.read (buffer)) != - 1) {\n            to.write (buffer, 0, bytes_read);\n        }\n    } finally {\n        if (from != null) {\n            from.close ();\n        }\n        if (to != null) {\n            to.close ();\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 1896089, "method2_id": 23574216, "code1": "public static void copyFileByNIO (File in, File out) throws IOException {\n    FileChannel sourceChannel = new FileInputStream (in).getChannel ();\n    FileChannel destinationChannel = new FileOutputStream (out).getChannel ();\n    sourceChannel.transferTo (0, sourceChannel.size (), destinationChannel);\n    sourceChannel.close ();\n    destinationChannel.close ();\n}\n", "code2": "public static void copyFile (File fromFile, File toFile) throws OWFileCopyException {\n    try {\n        FileChannel src = new FileInputStream (fromFile).getChannel ();\n        FileChannel dest = new FileOutputStream (toFile).getChannel ();\n        dest.transferFrom (src, 0, src.size ());\n        src.close ();\n        dest.close ();\n    } catch (IOException e) {\n        throw (new OWFileCopyException (\"An error occurred while copying a file\", e));\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 9592646, "method2_id": 20023016, "code1": "public static void copy (String path1, String path2) throws IOException {\n    FileReader in = new FileReader (path1);\n    FileWriter out = new FileWriter (path2);\n    int c;\n    while ((c = in.read ()) != - 1) out.write (c);\n\n    in.close ();\n    out.close ();\n}\n", "code2": "private void copy (File from, File to) throws IOException {\n    InputStream in = new FileInputStream (from);\n    OutputStream out = new FileOutputStream (to);\n    byte [] line = new byte [16384];\n    int bytes = - 1;\n    while ((bytes = in.read (line)) != - 1) out.write (line, 0, bytes);\n\n    in.close ();\n    out.close ();\n}\n"}
{"clone_type": "MT3", "method1_id": 19662493, "method2_id": 21032350, "code1": "private static String md5Encode (String pass) {\n    String string;\n    try {\n        MessageDigest md = MessageDigest.getInstance (\"MD5\");\n        md.update (pass.getBytes ());\n        byte [] result = md.digest ();\n        string = bytes2hexStr (result);\n    } catch (NoSuchAlgorithmException e) {\n        throw new RuntimeException (\"La libreria java.security no implemente MD5\");\n    }\n    return string;\n}\n", "code2": "public byte [] md5 (String clearText) {\n    MessageDigest md;\n    byte [] digest;\n    try {\n        md = MessageDigest.getInstance (\"MD5\");\n        md.update (clearText.getBytes ());\n        digest = md.digest ();\n    } catch (NoSuchAlgorithmException e) {\n        throw new UnsupportedOperationException (e.toString ());\n    }\n    return digest;\n}\n"}
{"clone_type": "MT3", "method1_id": 6190355, "method2_id": 11108280, "code1": "public static String hashPassword (String password) {\n    try {\n        MessageDigest md = MessageDigest.getInstance (\"SHA-512\");\n        md.update (password.getBytes (\"UTF-8\"));\n        byte [] bytes = md.digest ();\n        String result = encodeBase64 (bytes);\n        return result.trim ();\n    } catch (NoSuchAlgorithmException nsae) {\n        throw new IllegalStateException (nsae.getMessage ());\n    } catch (UnsupportedEncodingException uee) {\n        throw new IllegalStateException (uee.getMessage ());\n    }\n}\n", "code2": "public static String generateCode (String seed) {\n    try {\n        Security.addProvider (new FNVProvider ());\n        MessageDigest digest = MessageDigest.getInstance (\"FNV-1a\");\n        digest.update ((seed + UUID.randomUUID ().toString ()).getBytes ());\n        byte [] hash1 = digest.digest ();\n        String sHash1 = \"m\" + (new String (LibraryBase64.encode (hash1))).replaceAll (\"=\", \"\");\n        return sHash1;\n    } catch (NoSuchAlgorithmException e) {\n        System.err.println (\"Internal error:\" + e.getMessage ());\n        return null;\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 5435234, "method2_id": 18616606, "code1": "public static String getURLContent (String urlStr) throws MalformedURLException, IOException {\n    URL url = new URL (urlStr);\n    log.info (\"url: \" + url);\n    URLConnection conn = url.openConnection ();\n    BufferedReader in = new BufferedReader (new InputStreamReader (conn.getInputStream ()));\n    StringBuffer buf = new StringBuffer ();\n    String inputLine;\n    while ((inputLine = in.readLine ()) != null) {\n        buf.append (inputLine);\n    }\n    in.close ();\n    return buf.toString ();\n}\n", "code2": "public static String read (URL url) throws IOException {\n    BufferedReader reader = new BufferedReader (new InputStreamReader (url.openStream ()));\n    StringWriter res = new StringWriter ();\n    PrintWriter writer = new PrintWriter (new BufferedWriter (res));\n    String line;\n    while ((line = reader.readLine ()) != null) {\n        writer.println (line);\n    }\n    reader.close ();\n    writer.close ();\n    return res.toString ();\n}\n"}
{"clone_type": "MT3", "method1_id": 13587810, "method2_id": 14560249, "code1": "@Override\npublic void widgetSelected (SelectionEvent e) {\n    if (Desktop.isDesktopSupported ()) {\n        try {\n            Desktop.getDesktop ().browse (new URI (e.text));\n        } catch (IOException e1) {\n            GroofyLogger.getInstance ().logException (e1);\n        } catch (URISyntaxException e1) {\n            GroofyLogger.getInstance ().logException (e1);\n        }\n    }\n}\n", "code2": "@Override\npublic void actionPerformed (ActionEvent e) {\n    if (Desktop.isDesktopSupported ()) {\n        Desktop desktop = Desktop.getDesktop ();\n        try {\n            desktop.browse (uri);\n        } catch (Exception ex) {\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 444047, "method2_id": 3062180, "code1": "public static boolean delete (File resource) throws IOException {\n    if (resource.isDirectory ()) {\n        File [] childFiles = resource.listFiles ();\n        for (File child : childFiles) {\n            delete (child);\n        }\n    }\n    return resource.delete ();\n}\n", "code2": "public static void recursiveDelete (File transmissionFolder) {\n    if (transmissionFolder.isDirectory ()) {\n        for (File file : transmissionFolder.listFiles ()) {\n            recursiveDelete (file);\n        }\n    }\n    transmissionFolder.delete ();\n}\n"}
{"clone_type": "MT3", "method1_id": 763710, "method2_id": 15609433, "code1": "public void bubbleSort (int [] arr) {\n    boolean swapped = true;\n    int j = 0;\n    int tmp;\n    while (swapped) {\n        swapped = false;\n        j ++;\n        for (int i = 0;\n        i < arr.length - j; i ++) {\n            if (arr [i] > arr [i + 1]) {\n                tmp = arr [i];\n                arr [i] = arr [i + 1];\n                arr [i + 1] = tmp;\n                swapped = true;\n            }\n        }\n    }\n}\n", "code2": "public static int [] bubbleSort2 (int [] source) {\n    if (null != source && source.length > 0) {\n        boolean flag = false;\n        while (! flag) {\n            for (int i = 0;\n            i < source.length - 1; i ++) {\n                if (source [i] > source [i + 1]) {\n                    int temp = source [i];\n                    source [i] = source [i + 1];\n                    source [i + 1] = temp;\n                    break;\n                } else if (i == source.length - 2) {\n                    flag = true;\n                }\n\n            }\n        }\n    }\n    return source;\n}\n"}
{"clone_type": "MT3", "method1_id": 14617665, "method2_id": 19214556, "code1": "public float [] [] transposeMatrix (float [] [] a) {\n    int n = a.length;\n    int m = a [0].length;\n    float [] [] b = new float [m] [n];\n    for (int i = 0;\n    i < n; i ++) {\n        for (int j = 0;\n        j < m; j ++) {\n            b [j] [i] = a [i] [j];\n        }\n    }\n    return (b);\n}\n", "code2": "public void transpose () {\n    for (int i = 0;\n    i < rows; i ++) {\n        for (int j = 0;\n        j < i; j ++) {\n            int t = flmat [i] [j];\n            flmat [i] [j] = flmat [j] [i];\n            flmat [j] [i] = t;\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 63853, "method2_id": 79780, "code1": "protected void browseFile (JTextField dest) {\n    if (fileChooser == null) {\n        fileChooser = new JFileChooser ();\n        fileChooser.setFileSelectionMode (JFileChooser.FILES_AND_DIRECTORIES);\n    }\n    if (fileChooser.showOpenDialog (frame) == JFileChooser.APPROVE_OPTION) {\n        File f = fileChooser.getSelectedFile ();\n        if (f != null) dest.setText (f.getPath ());\n\n    }\n}\n", "code2": "public void actionPerformed (ActionEvent e) {\n    if (filechooser == null) {\n        filechooser = new JFileChooser ();\n        filechooser.setFileSelectionMode (JFileChooser.FILES_ONLY);\n    }\n    if (filechooser.showOpenDialog (ImageDisplay.this) == JFileChooser.APPROVE_OPTION) {\n        open (filechooser.getSelectedFile ());\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 2070148, "method2_id": 2539363, "code1": "private void deleteDir (File dir) {\n    if (dir.isDirectory ()) {\n        File fileList [] = dir.listFiles ();\n        for (int index = 0;\n        index < fileList.length; index ++) {\n            File file = fileList [index];\n            deleteDir (file);\n        }\n    }\n    dir.delete ();\n}\n", "code2": "private void deleteDir (String strFile) {\n    File fDir = new File (strFile);\n    File [] strChildren = null;\n    if (fDir.isDirectory ()) {\n        strChildren = fDir.listFiles ();\n        for (int i = 0;\n        i < strChildren.length; i ++) {\n            strChildren [i].delete ();\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 4193495, "method2_id": 9880330, "code1": "public String stringOfUrl (String addr) throws IOException {\n    ByteArrayOutputStream output = new ByteArrayOutputStream ();\n    URL url = new URL (addr);\n    IOUtils.copy (url.openStream (), output);\n    return output.toString ();\n}\n", "code2": "protected static String stringOfUrl (String addr) throws IOException {\n    ByteArrayOutputStream output = new ByteArrayOutputStream ();\n    URL url = new URL (addr);\n    URLConnection c = url.openConnection ();\n    c.setConnectTimeout (2000);\n    IOUtils.copy (c.getInputStream (), output);\n    return output.toString ();\n}\n"}
{"clone_type": "MT3", "method1_id": 10228159, "method2_id": 17122360, "code1": "public ZnMatrix transposed () {\n    ZnMatrix m = new ZnMatrix (columns, rows, modulus);\n    for (int r = 0;\n    r < rows; r ++) {\n        for (int c = 0;\n        c < columns; c ++) {\n            m.coefficients [c] [r] = coefficients [r] [c];\n        }\n    }\n    return m;\n}\n", "code2": "private static long [] [] transposeMatrix (long [] [] A) {\n    long [] [] result = cloneMatrix (A);\n    for (int i = 0;\n    i < A.length; i ++) {\n        for (int j = 0;\n        j < A [i].length; j ++) {\n            result [i] [j] = A [j] [i];\n        }\n    }\n    return result;\n}\n"}
{"clone_type": "MT3", "method1_id": 15165294, "method2_id": 19392399, "code1": "public void insert () throws Exception {\n    Connection con = DbUtil.connectToDb ();\n    PreparedStatement pStmt = null;\n    try {\n        pStmt = con.prepareStatement (\"INSERT INTO \" + Constants.TABLENAME + \" (name,phone,address)\" + \" values(?,?,?)\");\n        con.setAutoCommit (false);\n        pStmt.setString (1, name);\n        pStmt.setString (2, phone);\n        pStmt.setString (3, address);\n        int j = pStmt.executeUpdate ();\n        con.commit ();\n    } catch (Exception ex) {\n        try {\n            con.rollback ();\n        } catch (SQLException sqlex) {\n            sqlex.printStackTrace (System.out);\n        }\n        throw ex;\n    } finally {\n        try {\n            pStmt.close ();\n            con.close ();\n        } catch (Exception e) {\n            e.printStackTrace ();\n        }\n    }\n}\n", "code2": "public boolean setRecipeToTimetable (int recipeId, Timestamp time, int meal) {\n    System.out.println (\"setRecipeToTimetable\");\n    PreparedStatement statement = null;\n    StringBuffer query = new StringBuffer (\"insert into timetable (recipe_id, time, meal) values (?,?,?)\");\n    try {\n        conn = getConnection ();\n        statement = conn.prepareStatement (query.toString ());\n        statement.setInt (1, recipeId);\n        statement.setTimestamp (2, time);\n        statement.setInt (3, meal);\n        statement.executeUpdate ();\n        conn.commit ();\n    } catch (Exception e) {\n        try {\n            conn.rollback ();\n        } catch (Exception ex) {\n        }\n        MainFrame.appendStatusText (\"Error when trying to execute sql: \" + e.getMessage ());\n    } finally {\n        try {\n            if (statement != null) statement.close ();\n\n            statement = null;\n        } catch (Exception ex) {\n            MainFrame.appendStatusText (\"Can't close database connection.\");\n        }\n    }\n    return true;\n}\n"}
{"clone_type": "MT3", "method1_id": 14136709, "method2_id": 14631177, "code1": "private void openURI (String uriString) {\n    try {\n        URI uri = new URI (uriString);\n        if (java.awt.Desktop.isDesktopSupported ()) {\n            Desktop desktop = Desktop.getDesktop ();\n            if (desktop.isSupported (Desktop.Action.BROWSE)) {\n                desktop.browse (uri);\n            }\n        }\n    } catch (Exception ex) {\n    }\n}\n", "code2": "private void open (URI uri) {\n    if (Desktop.isDesktopSupported ()) {\n        Desktop desktop = Desktop.getDesktop ();\n        try {\n            desktop.browse (uri);\n        } catch (IOException exc) {\n            feedback.registerBug (\"IOException occurred opening a link in the browser.\", exc);\n        }\n    } else {\n        feedback.registerBug (\"Desktop is not supported, cannot open browser to show link!\");\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 8318806, "method2_id": 12511033, "code1": "private void addZipEntry (String _filename, InputStream _in, ZipOutputStream _out) throws IOException {\n    byte [] _buf = new byte [1024];\n    _out.putNextEntry (new ZipEntry (_filename));\n    int _len;\n    while ((_len = _in.read (_buf)) > 0) _out.write (_buf, 0, _len);\n\n    _out.closeEntry ();\n    _in.close ();\n}\n", "code2": "private void writeZipEntry (ZipOutputStream zos, ZipEntry zipEntry, InputStream is) throws IOException {\n    zos.putNextEntry (zipEntry);\n    byte [] buf = new byte [1024];\n    int in;\n    while ((in = is.read (buf, 0, buf.length)) > 0) zos.write (buf, 0, in);\n\n    zos.closeEntry ();\n}\n"}
{"clone_type": "MT3", "method1_id": 10212189, "method2_id": 10839253, "code1": "public String getXML (String servletURL, String request) {\n    StringBuffer stringBuffer = new StringBuffer ();\n    try {\n        String encodedRequest = URLEncoder.encode (request, \"UTF-8\");\n        URL url = new URL (servletURL + request);\n        BufferedReader in = new BufferedReader (new InputStreamReader (url.openStream ()));\n        String inputLine;\n        while ((inputLine = in.readLine ()) != null) {\n            stringBuffer.append (inputLine);\n        }\n        in.close ();\n    } catch (MalformedURLException ex) {\n        return null;\n    } catch (UnsupportedEncodingException ex) {\n        return null;\n    } catch (IOException ex) {\n        return null;\n    }\n    return stringBuffer.toString ();\n}\n", "code2": "public static String getWebContent (String remoteUrl, String encoding) {\n    StringBuffer sb = new StringBuffer ();\n    try {\n        java.net.URL url = new java.net.URL (remoteUrl);\n        BufferedReader in = new BufferedReader (new InputStreamReader (url.openStream (), encoding));\n        String line;\n        while ((line = in.readLine ()) != null) {\n            sb.append (line);\n        }\n        in.close ();\n    } catch (Exception e) {\n        logger.error (\"\u83b7\u53d6\u8fdc\u7a0b\u7f51\u5740\u5185\u5bb9\u5931\u8d25 - \" + remoteUrl, e);\n    }\n    return sb.toString ();\n}\n"}
{"clone_type": "MT3", "method1_id": 7289717, "method2_id": 23077786, "code1": "public Matrix transpose () {\n    Matrix X = new Matrix (n, m);\n    double [] [] C = X.getArray ();\n    for (int i = 0;\n    i < m; i ++) {\n        for (int j = 0;\n        j < n; j ++) {\n            C [j] [i] = A [i] [j];\n        }\n    }\n    return X;\n}\n", "code2": "public void toSimilarity () {\n    double [] [] sim = new double [numSeqs] [numSeqs];\n    for (int i = 0;\n    i < numSeqs; i ++) {\n        for (int j = i;\n        j < numSeqs; j ++) {\n            sim [i] [j] = 1 - this.getDistance (i, j);\n            sim [j] [i] = sim [i] [j];\n        }\n    }\n    setDistances (sim);\n}\n"}
{"clone_type": "MT3", "method1_id": 9526428, "method2_id": 16030263, "code1": "public static String hashPassword (String password) {\n    String passwordHash = \"\";\n    try {\n        MessageDigest sha1 = MessageDigest.getInstance (\"SHA-1\");\n        sha1.reset ();\n        sha1.update (password.getBytes ());\n        Base64 encoder = new Base64 ();\n        passwordHash = new String (encoder.encode (sha1.digest ()));\n    } catch (NoSuchAlgorithmException e) {\n        LoggerFactory.getLogger (UmsAuthenticationProcessingFilter.class.getClass ()).error (\"Failed to generate password hash: \" + e.getMessage ());\n    }\n    return passwordHash;\n}\n", "code2": "public static String md5 (String text) {\n    try {\n        MessageDigest md = MessageDigest.getInstance (\"MD5\");\n        md.update (text.getBytes ());\n        return ForumUtil.bufferToHex (md.digest ());\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace ();\n        return null;\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 79581, "method2_id": 3308098, "code1": "private static boolean deleteFile (File resource) throws IOException {\n    if (resource.isDirectory ()) {\n        File [] childFiles = resource.listFiles ();\n        for (File child : childFiles) {\n            deleteFile (child);\n        }\n    }\n    return resource.delete ();\n}\n", "code2": "protected boolean recursiveFileDelete (File file) {\n    if (file.isDirectory ()) {\n        for (File fChild : file.listFiles ()) {\n            recursiveFileDelete (fChild);\n        }\n    }\n    return file.delete ();\n}\n"}
{"clone_type": "MT3", "method1_id": 4519500, "method2_id": 7891900, "code1": "@Override\nprotected void doGet (HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    String pathInfo = req.getPathInfo ();\n    String pluginPathInfo = pathInfo.substring (prefix.length ());\n    String gwtPathInfo = pluginPathInfo.substring (pluginKey.length () + 1);\n    String clPath = CLASSPATH_PREFIX + gwtPathInfo;\n    InputStream input = cl.getResourceAsStream (clPath);\n    if (input != null) {\n        try {\n            OutputStream output = resp.getOutputStream ();\n            IOUtils.copy (input, output);\n        } finally {\n            input.close ();\n        }\n    } else {\n        resp.sendError (HttpServletResponse.SC_NOT_FOUND);\n    }\n}\n", "code2": "public void writeConfiguration (Writer out) throws IOException {\n    if (myUrl == null) {\n        out.append (\"# Unable to print configuration resource\\n\");\n    } else {\n        InputStream in = myUrl.openStream ();\n        if (in != null) {\n            try {\n                IOUtils.copy (in, out);\n            } finally {\n                IOUtils.closeQuietly (in);\n            }\n        } else {\n            out.append (\"# Unable to print configuration resource\\n\");\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 1216562, "method2_id": 4334847, "code1": "public static void main (String [] args) {\n    System.out.println (\"Chapter 9: example Ligatures1\");\n    System.out.println (\"-> Creates a PDF file with a ligaturize method.\");\n    System.out.println (\"-> jars needed: iText.jar\");\n    System.out.println (\"-> resources needed: arial.ttf\");\n    System.out.println (\"-> file generated: ligatures1.pdf\");\n    Document document = new Document ();\n    try {\n        PdfWriter.getInstance (document, new FileOutputStream (\"results/in_action/chapter09/ligatures1.pdf\"));\n        document.open ();\n        BaseFont bf;\n        Font font;\n        bf = BaseFont.createFont (\"c:/windows/fonts/arial.ttf\", BaseFont.CP1252, BaseFont.EMBEDDED);\n        font = new Font (bf, 12);\n        document.add (new Paragraph (\"Movie title: Love at First Hiccough (Denmark)\", font));\n        document.add (new Paragraph (\"directed by Tomas Villum Jensen\", font));\n        document.add (new Paragraph (\"K\u00e6rlighed ved f\u00f8rste hik\", font));\n        document.add (new Paragraph (ligaturize (\"Kaerlighed ved f/orste hik\"), font));\n    } catch (DocumentException de) {\n        System.err.println (de.getMessage ());\n    } catch (IOException ioe) {\n        System.err.println (ioe.getMessage ());\n    }\n    document.close ();\n}\n", "code2": "public static void main (String [] args) {\n    System.out.println (\"Chapter 8: example FontMetrics\");\n    System.out.println (\"-> Creates a PDF file with text in font Helvetica.\");\n    System.out.println (\"   Different metrics are measured.\");\n    System.out.println (\"-> jars needed: iText.jar\");\n    System.out.println (\"-> file generated: font_metrics.pdf\");\n    Document document = new Document ();\n    try {\n        PdfWriter.getInstance (document, new FileOutputStream (\"results/in_action/chapter08/font_metrics.pdf\"));\n        document.open ();\n        Font font = new Font (Font.HELVETICA, 12);\n        BaseFont bf = font.getCalculatedBaseFont (false);\n        String numbers = \"0123456789\";\n        String letters = \"abcdefghijklmnopqrstuvwxyz\";\n        document.add (new Paragraph (numbers, font));\n        document.add (new Paragraph (\"width: \" + bf.getWidth (numbers) + \" (\" + bf.getWidthPoint (numbers, 12) + \"pt)\", font));\n        document.add (new Paragraph (\"ascent: \" + bf.getAscent (numbers) + \"; descent: \" + bf.getDescent (numbers) + \"; height: \" + (bf.getAscentPoint (numbers, 12) - bf.getDescentPoint (numbers, 12) + \"pt\"), font));\n        document.add (new Paragraph (letters, font));\n        document.add (new Paragraph (\"width: \" + bf.getWidth (letters) + \" (\" + bf.getWidthPoint (letters, 12) + \"pt)\", font));\n        document.add (new Paragraph (\"ascent: \" + bf.getAscent (letters) + \"; descent: \" + bf.getDescent (letters) + \"; height: \" + (bf.getAscentPoint (letters, 12) - bf.getDescentPoint (letters, 12)) + \"pt\", font));\n    } catch (DocumentException de) {\n        System.err.println (de.getMessage ());\n    } catch (IOException ioe) {\n        System.err.println (ioe.getMessage ());\n    }\n    document.close ();\n}\n"}
{"clone_type": "MT3", "method1_id": 9346447, "method2_id": 15131771, "code1": "public static double [] [] transposeMatrix (double [] [] vector) {\n    double [] [] tm = new double [vector [0].length] [vector.length];\n    for (int i = 0;\n    i < tm.length; i ++) {\n        for (int j = 0;\n        j < tm [i].length; j ++) {\n            tm [i] [j] = vector [j] [i];\n        }\n    }\n    return tm;\n}\n", "code2": "public Matrix transpose () {\n    Matrix X = new Matrix (n, m);\n    double [] [] C = X.getArray ();\n    for (int i = 0;\n    i < m; i ++) {\n        for (int j = 0;\n        j < n; j ++) {\n            C [j] [i] = A [i] [j];\n        }\n    }\n    return X;\n}\n"}
{"clone_type": "MT3", "method1_id": 6863593, "method2_id": 13792092, "code1": "private String hashmd5 (String suppliedPassword) throws NoSuchAlgorithmException {\n    MessageDigest md = MessageDigest.getInstance (\"MD5\");\n    md.update (suppliedPassword.getBytes ());\n    String encriptedPassword = null;\n    try {\n        encriptedPassword = new String (Base64.encode (md.digest ()), \"ASCII\");\n    } catch (UnsupportedEncodingException e) {\n    }\n    return encriptedPassword;\n}\n", "code2": "public NodeId generateTopicId (String topicName) {\n    MessageDigest md = null;\n    try {\n        md = MessageDigest.getInstance (\"SHA\");\n    } catch (NoSuchAlgorithmException e) {\n        System.err.println (\"No SHA support!\");\n    }\n    md.update (topicName.getBytes ());\n    byte [] digest = md.digest ();\n    NodeId newId = new NodeId (digest);\n    return newId;\n}\n"}
{"clone_type": "MT3", "method1_id": 1552000, "method2_id": 3197700, "code1": "private boolean deleteDirectory (File path) {\n    if (path.exists ()) {\n        File [] files = path.listFiles ();\n        for (int i = 0;\n        i < files.length; i ++) {\n            if (files [i].isDirectory ()) {\n                deleteDirectory (files [i]);\n            } else {\n                files [i].delete ();\n            }\n        }\n    }\n    return (path.delete ());\n}\n", "code2": "public static void deleteAll (File file) {\n    if (file != null) {\n        if (file.isDirectory ()) {\n            File [] files = file.listFiles ();\n            if (files != null) {\n                for (int i = 0;\n                i < files.length; i ++) {\n                    if (files [i].isDirectory ()) {\n                        deleteAll (files [i]);\n                    }\n                    files [i].delete ();\n                }\n            }\n        }\n        file.delete ();\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 2883828, "method2_id": 17477951, "code1": "public static void copyFile (File from, File to) {\n    try {\n        FileInputStream in = new FileInputStream (from);\n        FileOutputStream out = new FileOutputStream (to);\n        byte [] buffer = new byte [1024 * 16];\n        int read = 0;\n        while ((read = in.read (buffer)) >= 0) {\n            out.write (buffer, 0, read);\n        }\n        in.close ();\n    } catch (IOException e) {\n        e.printStackTrace ();\n    }\n}\n", "code2": "public static void copy (String inputFile, String outputFile) throws Exception {\n    try {\n        FileReader in = new FileReader (inputFile);\n        FileWriter out = new FileWriter (outputFile);\n        int c;\n        while ((c = in.read ()) != - 1) out.write (c);\n\n        in.close ();\n        out.close ();\n    } catch (Exception e) {\n        throw new Exception (\"Could not copy \" + inputFile + \" into \" + outputFile + \" because:\\n\" + e.getMessage ());\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 20117263, "method2_id": 23294175, "code1": "private void write (Path path, InputStream in) throws IOException {\n    FSDataOutputStream out = fileSystem.create (path, true);\n    try {\n        IOUtils.copy (in, out);\n    } finally {\n        IOUtils.closeQuietly (out);\n    }\n}\n", "code2": "public void setContent (InputStream is) throws IOException {\n    OutputStream os = null;\n    try {\n        os = new FileOutputStream (getDataFile ());\n        IOUtils.copyLarge (is, os);\n    } finally {\n        IOUtils.closeQuietly (os);\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 16324741, "method2_id": 23130941, "code1": "public static void copyFiles (File source, File dest) throws IOException {\n    FileChannel in = null, out = null;\n    try {\n        in = new FileInputStream (source).getChannel ();\n        out = new FileOutputStream (dest).getChannel ();\n        long size = in.size ();\n        MappedByteBuffer buf = in.map (FileChannel.MapMode.READ_ONLY, 0, size);\n        out.write (buf);\n    } finally {\n        if (in != null) in.close ();\n\n        if (out != null) out.close ();\n\n    }\n}\n", "code2": "public static void copyFile (File src, File dst) throws IOException {\n    FileChannel inChannel = new FileInputStream (src).getChannel ();\n    FileChannel outChannel = new FileOutputStream (dst).getChannel ();\n    try {\n        inChannel.transferTo (0, inChannel.size (), outChannel);\n    } finally {\n        if (inChannel != null) inChannel.close ();\n\n        if (outChannel != null) outChannel.close ();\n\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 10878062, "method2_id": 19033605, "code1": "public static void copy (File source, File dest) throws Exception {\n    FileInputStream in = new FileInputStream (source);\n    FileOutputStream out = new FileOutputStream (dest);\n    int c;\n    while ((c = in.read ()) != - 1) out.write (c);\n\n    in.close ();\n    out.close ();\n}\n", "code2": "public static void copyFile (File src, File dest) throws IOException {\n    FileInputStream fis = new FileInputStream (src);\n    FileOutputStream fos = new FileOutputStream (dest);\n    FileChannel channelSrc = fis.getChannel ();\n    FileChannel channelDest = fos.getChannel ();\n    channelSrc.transferTo (0, channelSrc.size (), channelDest);\n    fis.close ();\n    fos.close ();\n}\n"}
{"clone_type": "MT3", "method1_id": 7286006, "method2_id": 20955455, "code1": "public void reset (String componentName, int currentPilot) {\n    try {\n        PreparedStatement psta = jdbc.prepareStatement (\"DELETE FROM component_prop \" + \"WHERE pilot_id = ? \" + \"AND component_name = ?\");\n        psta.setInt (1, currentPilot);\n        psta.setString (2, componentName);\n        psta.executeUpdate ();\n        jdbc.commit ();\n    } catch (SQLException e) {\n        jdbc.rollback ();\n        log.debug (e);\n    }\n}\n", "code2": "@Override\npublic void excluir (QuestaoMultiplaEscolha q) throws Exception {\n    PreparedStatement stmt = null;\n    String sql = \"DELETE FROM questao WHERE id_questao=?\";\n    try {\n        stmt = conexao.prepareStatement (sql);\n        stmt.setInt (1, q.getIdQuestao ());\n        stmt.executeUpdate ();\n        conexao.commit ();\n    } catch (SQLException e) {\n        conexao.rollback ();\n        throw e;\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 4612220, "method2_id": 14341904, "code1": "private void copy (File source, File destination) throws PackageException {\n    try {\n        FileInputStream in = new FileInputStream (source);\n        FileOutputStream out = new FileOutputStream (destination);\n        byte [] buff = new byte [1024];\n        int len;\n        while ((len = in.read (buff)) > 0) out.write (buff, 0, len);\n\n        in.close ();\n        out.close ();\n    } catch (IOException e) {\n        throw new PackageException (\"Unable to copy \" + source.getPath () + \" to \" + destination.getPath () + \" :: \" + e.toString ());\n    }\n}\n", "code2": "private static void copyFile (String from, String to) throws IOException {\n    FileReader in = new FileReader (from);\n    FileWriter out = new FileWriter (to);\n    int c;\n    while ((c = in.read ()) != - 1) out.write (c);\n\n    in.close ();\n    out.close ();\n}\n"}
{"clone_type": "MT3", "method1_id": 5086587, "method2_id": 22704165, "code1": "public static void copyFromTo (String src, String des) {\n    staticprintln (\"Copying:\\\"\" + src + \"\\\"\\nto:\\\"\" + des + \"\\\"\");\n    try {\n        FileChannel srcChannel = new FileInputStream (src).getChannel ();\n        FileChannel dstChannel = new FileOutputStream (des).getChannel ();\n        dstChannel.transferFrom (srcChannel, 0, srcChannel.size ());\n        srcChannel.close ();\n        dstChannel.close ();\n    } catch (IOException e) {\n    }\n}\n", "code2": "public static void copyFile (File in, File out) throws IOException {\n    FileChannel sourceChannel = new FileInputStream (in).getChannel ();\n    FileChannel destinationChannel = new FileOutputStream (out).getChannel ();\n    try {\n        sourceChannel.transferTo (0, sourceChannel.size (), destinationChannel);\n    } finally {\n        sourceChannel.close ();\n        destinationChannel.close ();\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 11893997, "method2_id": 17325960, "code1": "private String digestPassword (String password) {\n    StringBuffer hexString = new StringBuffer ();\n    try {\n        MessageDigest algorithm = MessageDigest.getInstance (\"MD5\");\n        algorithm.reset ();\n        algorithm.update (password.getBytes ());\n        byte [] messageDigest = algorithm.digest ();\n        for (byte b : messageDigest) {\n            hexString.append (Integer.toHexString (0xFF & b));\n        }\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace ();\n    }\n    return hexString.toString ();\n}\n", "code2": "private String getMD5 (String password) {\n    try {\n        MessageDigest md = MessageDigest.getInstance (\"MD5\");\n        md.update (password.getBytes ());\n        byte [] data = md.digest ();\n        return convertToHex (data);\n    } catch (Exception ex) {\n        ex.printStackTrace ();\n    }\n    return null;\n}\n"}
{"clone_type": "MT3", "method1_id": 6597132, "method2_id": 16540473, "code1": "public static void copyFile (final File sourceFile, final File destFile) throws IOException {\n    if (! destFile.exists ()) {\n        destFile.createNewFile ();\n    }\n    FileInputStream inStream = null;\n    FileOutputStream outStream = null;\n    FileChannel source = null;\n    FileChannel destination = null;\n    try {\n        source = (inStream = new FileInputStream (sourceFile)).getChannel ();\n        destination = (outStream = new FileOutputStream (destFile)).getChannel ();\n        destination.transferFrom (source, 0, source.size ());\n    } finally {\n        closeIO (source);\n        closeIO (inStream);\n        closeIO (destination);\n        closeIO (outStream);\n    }\n}\n", "code2": "public static void copyFile (File sourceFile, File destFile) throws IOException {\n    if (! destFile.exists ()) {\n        destFile.createNewFile ();\n    }\n    FileChannel source = null;\n    FileChannel destination = null;\n    try {\n        source = new FileInputStream (sourceFile).getChannel ();\n        destination = new FileOutputStream (destFile).getChannel ();\n        destination.transferFrom (source, 0, source.size ());\n    } finally {\n        if (source != null) {\n            source.close ();\n        }\n        if (destination != null) {\n            destination.close ();\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 3613198, "method2_id": 17585720, "code1": "public static void copyFile (File in, File out) throws IOException {\n    FileChannel inChannel = new FileInputStream (in).getChannel ();\n    FileChannel outChannel = new FileOutputStream (out).getChannel ();\n    try {\n        inChannel.transferTo (0, inChannel.size (), outChannel);\n    } catch (IOException e) {\n        throw e;\n    } finally {\n        if (inChannel != null) inChannel.close ();\n\n        if (outChannel != null) outChannel.close ();\n\n    }\n}\n", "code2": "public static void copyFile (File in, File out) throws IOException {\n    FileChannel inChannel = new FileInputStream (in).getChannel ();\n    FileChannel outChannel = new FileOutputStream (out).getChannel ();\n    try {\n        int maxCount = (64 * 1024 * 1024) - (32 * 1024);\n        long size = inChannel.size ();\n        long position = 0;\n        while (position < size) {\n            position += inChannel.transferTo (position, maxCount, outChannel);\n        }\n        out.setLastModified (in.lastModified ());\n    } catch (IOException e) {\n        throw e;\n    } finally {\n        if (inChannel != null) inChannel.close ();\n\n        if (outChannel != null) outChannel.close ();\n\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 986109, "method2_id": 15911781, "code1": "public static int [] [] transpose (int [] [] M) {\n    int [] [] tM = new int [M [0].length] [M.length];\n    for (int i = 0;\n    i < tM.length; i ++) {\n        for (int j = 0;\n        j < tM [0].length; j ++) {\n            tM [i] [j] = M [j] [i];\n        }\n    }\n    return tM;\n}\n", "code2": "public FloatMatrix transpose () {\n    FloatMatrix X = new FloatMatrix (n, m);\n    float [] [] C = X.getArray ();\n    for (int i = 0;\n    i < m; i ++) {\n        for (int j = 0;\n        j < n; j ++) {\n            C [j] [i] = A [i] [j];\n        }\n    }\n    return X;\n}\n"}
{"clone_type": "MT3", "method1_id": 3844626, "method2_id": 7289717, "code1": "private double [] [] transpose (double [] [] in) {\n    double [] [] out = new double [in [0].length] [in.length];\n    for (int r = 0;\n    r < in.length; r ++) {\n        for (int c = 0;\n        c < in [0].length; c ++) {\n            out [c] [r] = in [r] [c];\n        }\n    }\n    return out;\n}\n", "code2": "public Matrix transpose () {\n    Matrix X = new Matrix (n, m);\n    double [] [] C = X.getArray ();\n    for (int i = 0;\n    i < m; i ++) {\n        for (int j = 0;\n        j < n; j ++) {\n            C [j] [i] = A [i] [j];\n        }\n    }\n    return X;\n}\n"}
{"clone_type": "MT3", "method1_id": 5079997, "method2_id": 8182887, "code1": "public static double [] [] transpose (final double [] [] m) {\n    final double [] [] mt = new double [m [0].length] [m.length];\n    for (int i = 0;\n    i < mt.length; i ++) {\n        for (int j = 0;\n        j < mt [i].length; j ++) {\n            mt [i] [j] = m [j] [i];\n        }\n    }\n    return mt;\n}\n", "code2": "public IntSquareMatrix copyUpperToLower () {\n    for (int i = 0;\n    i < cols - 1; i ++) {\n        for (int j = i + 1;\n        j < cols; j ++) {\n            flmat [j] [i] = flmat [i] [j];\n        }\n    }\n    return this;\n}\n"}
{"clone_type": "MT3", "method1_id": 16499420, "method2_id": 18563163, "code1": "private void saveFile (InputStream in, String fullPath) {\n    try {\n        File sysfile = new File (fullPath);\n        if (! sysfile.exists ()) {\n            sysfile.createNewFile ();\n        }\n        java.io.OutputStream out = new FileOutputStream (sysfile);\n        org.apache.commons.io.IOUtils.copy (in, out);\n        out.close ();\n    } catch (Exception e) {\n        e.printStackTrace ();\n    }\n}\n", "code2": "private void dumpFile (File repository, File copy) {\n    try {\n        if (copy.exists () && ! copy.delete ()) {\n            throw new RuntimeException (\"can't delete copy: \" + copy);\n        }\n        printFile (\"Real Archive File\", repository);\n        new ZipArchive (repository.getPath ());\n        IOUtils.copyFiles (repository, copy);\n        printFile (\"Copy Archive File\", copy);\n        new ZipArchive (copy.getPath ());\n    } catch (IOException e) {\n        e.printStackTrace ();\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 5236784, "method2_id": 9119483, "code1": "public static double [] [] calcTranspose (double [] [] mat) {\n    double [] [] transpose = new double [mat [0].length] [mat.length];\n    for (int a = 0;\n    a < transpose.length; a ++) {\n        for (int b = 0;\n        b < transpose [0].length; b ++) {\n            transpose [a] [b] = mat [b] [a];\n        }\n    }\n    return transpose;\n}\n", "code2": "public InvariantsMatrix transpose () throws Exception {\n    int [] [] tmpData = new int [width ()] [height ()];\n    for (int i = 0;\n    i < width (); i ++) {\n        for (int j = 0;\n        j < height (); j ++) {\n            tmpData [i] [j] = data [j] [i];\n        }\n    }\n    return new InvariantsMatrix (tmpData);\n}\n"}
{"clone_type": "MT3", "method1_id": 19454014, "method2_id": 20920429, "code1": "public void addEntry (String name, byte [] byteArray) throws IOException {\n    ZipEntry entry = new ZipEntry (name);\n    _zos.putNextEntry (entry);\n    BufferedInputStream bis = new BufferedInputStream (new ByteArrayInputStream (byteArray), _BUFFER);\n    int count;\n    while ((count = bis.read (_data, 0, _BUFFER)) != - 1) {\n        _zos.write (_data, 0, count);\n    }\n    bis.close ();\n}\n", "code2": "private void addToZipFile (ZipOutputStream zipOut, File file) throws IOException {\n    byte [] data = new byte [BUFFER_SIZE];\n    FileInputStream fileStream = new FileInputStream (file);\n    BufferedInputStream bufferedFileStream = new BufferedInputStream (fileStream, BUFFER_SIZE);\n    ZipEntry entry = new ZipEntry (file.getName ());\n    zipOut.putNextEntry (entry);\n    int count = 0;\n    while ((count = bufferedFileStream.read (data, 0, BUFFER_SIZE)) != - 1) {\n        zipOut.write (data, 0, count);\n    }\n    zipOut.flush ();\n    bufferedFileStream.close ();\n}\n"}
{"clone_type": "MT3", "method1_id": 7483038, "method2_id": 17196902, "code1": "@Override\npublic void launchUpdate () {\n    if (getUpdateUrl () != null && Desktop.isDesktopSupported ()) {\n        try {\n            Desktop.getDesktop ().browse (getUpdateUrl ().toURI ());\n        } catch (IOException e) {\n            GroofyLogger.getInstance ().logException (e);\n        } catch (URISyntaxException e) {\n            GroofyLogger.getInstance ().logException (e);\n        }\n    }\n}\n", "code2": "public void webpageAction () {\n    if (Desktop.isDesktopSupported ()) {\n        try {\n            Desktop.getDesktop ().browse (controller.getUrlLinks ().getWebpageUri ());\n        } catch (IOException e) {\n            JOptionPane.showMessageDialog (getFrame (), \"Can't find the default web browser\\nto open the web page \" + controller.getUrlLinks ().getWebpageUrlStr () + \".\", \"Cannot open web page\", JOptionPane.INFORMATION_MESSAGE);\n        }\n    } else {\n        JOptionPane.showMessageDialog (getFrame (), \"Operation not supported on this platform.\\nPlease go to \" + controller.getUrlLinks ().getWebpageUrlStr (), \"Cannot open web page\", JOptionPane.INFORMATION_MESSAGE);\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 10654982, "method2_id": 23191460, "code1": "public static String getEncryptedPassword (String password) throws PasswordException {\n    MessageDigest md = null;\n    try {\n        md = MessageDigest.getInstance (\"SHA\");\n        md.update (password.getBytes (\"UTF-8\"));\n    } catch (Exception e) {\n        throw new PasswordException (e);\n    }\n    return convertToString (md.digest ());\n}\n", "code2": "private static String hashPassword (String password) {\n    try {\n        String hashword = null;\n        MessageDigest md5 = MessageDigest.getInstance (\"MD5\");\n        md5.update (password.getBytes ());\n        BigInteger hash = new BigInteger (1, md5.digest ());\n        hashword = hash.toString (16);\n        return hashword;\n    } catch (NoSuchAlgorithmException ex) {\n        throw new RuntimeException (ex);\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 14432775, "method2_id": 22306604, "code1": "static void copyFile (File in, File outDir, String outFileName) throws IOException {\n    FileChannel inChannel = new FileInputStream (in).getChannel ();\n    outDir.mkdirs ();\n    File outFile = new File (outDir, outFileName);\n    FileChannel outChannel = new FileOutputStream (outFile).getChannel ();\n    try {\n        inChannel.transferTo (0, inChannel.size (), outChannel);\n    } catch (IOException e) {\n        throw e;\n    } finally {\n        if (inChannel != null) {\n            inChannel.close ();\n        }\n        if (outChannel != null) {\n            outChannel.close ();\n        }\n    }\n}\n", "code2": "public static void upLoadFile (File sourceFile, File targetFile) throws IOException {\n    FileChannel inChannel = null;\n    FileChannel outChannel = null;\n    try {\n        inChannel = new FileInputStream (sourceFile).getChannel ();\n        outChannel = new FileOutputStream (targetFile).getChannel ();\n        inChannel.transferTo (0, inChannel.size (), outChannel);\n    } finally {\n        try {\n            if (inChannel != null) {\n                inChannel.close ();\n            }\n            if (outChannel != null) {\n                outChannel.close ();\n            }\n        } catch (IOException e) {\n            e.printStackTrace ();\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 17638222, "method2_id": 17927694, "code1": "public static void copyFile (final File sourceFile, final File destFile) throws IOException {\n    if (! destFile.exists ()) destFile.createNewFile ();\n\n    FileChannel source = null;\n    FileChannel destination = null;\n    try {\n        source = new FileInputStream (sourceFile).getChannel ();\n        destination = new FileOutputStream (destFile).getChannel ();\n        destination.transferFrom (source, 0, source.size ());\n    } finally {\n        if (source != null) source.close ();\n\n        if (destination != null) destination.close ();\n\n    }\n}\n", "code2": "public static void copyFile (FileInputStream source, FileOutputStream target) throws Exception {\n    FileChannel inChannel = source.getChannel ();\n    FileChannel outChannel = target.getChannel ();\n    try {\n        inChannel.transferTo (0, inChannel.size (), outChannel);\n    } catch (IOException e) {\n        throw e;\n    } finally {\n        if (inChannel != null) inChannel.close ();\n\n        if (outChannel != null) outChannel.close ();\n\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 10910708, "method2_id": 16900365, "code1": "public void addEntry (String name, byte [] byteArray) throws IOException {\n    ZipEntry entry = new ZipEntry (name);\n    _zos.putNextEntry (entry);\n    BufferedInputStream bis = new BufferedInputStream (new ByteArrayInputStream (byteArray), _BUFFER);\n    int count;\n    while ((count = bis.read (_data, 0, _BUFFER)) != - 1) {\n        _zos.write (_data, 0, count);\n    }\n    bis.close ();\n}\n", "code2": "private void addZipEntry (ZipOutputStream zipout, String filename, String content) throws IOException {\n    zipout.putNextEntry (new ZipEntry (filename));\n    StringReader strin = new StringReader (content);\n    int read;\n    while ((read = strin.read ()) != - 1) {\n        zipout.write (read);\n    }\n    zipout.closeEntry ();\n    zipout.flush ();\n}\n"}
{"clone_type": "MT3", "method1_id": 9415194, "method2_id": 19515832, "code1": "public static String MD5 (String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n    MessageDigest md;\n    md = MessageDigest.getInstance (\"MD5\");\n    byte [] md5hash = new byte [32];\n    md.update (text.getBytes (\"iso-8859-1\"), 0, text.length ());\n    md5hash = md.digest ();\n    return convertToHex (md5hash);\n}\n", "code2": "private static String calcReturnKey (String key) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n    MessageDigest md;\n    md = MessageDigest.getInstance (\"SHA-1\");\n    String text = new String ();\n    byte [] sha1hash = new byte [20];\n    text = key + GUUI;\n    md.update (text.getBytes (), 0, text.length ());\n    sha1hash = md.digest ();\n    return (Helper.getBASE64 (sha1hash));\n}\n"}
{"clone_type": "MT3", "method1_id": 1162904, "method2_id": 15861394, "code1": "public byte [] computeMD5 (String plainText) throws VHException {\n    MessageDigest md = null;\n    try {\n        md = MessageDigest.getInstance (\"MD5\");\n    } catch (NoSuchAlgorithmException ex) {\n        throw new VHException (\"The MD5 hash algorithm is not available.\", ex);\n    }\n    try {\n        md.update (plainText.getBytes (\"UTF-8\"));\n    } catch (UnsupportedEncodingException ex) {\n        throw new VHException (\"The UTF-8 encoding is not supported.\", ex);\n    }\n    return md.digest ();\n}\n", "code2": "public static String md5 (String string) {\n    MessageDigest md = null;\n    try {\n        md = MessageDigest.getInstance (\"MD5\");\n    } catch (NoSuchAlgorithmException exception) {\n        LOGGER.warn (exception.getMessage ());\n    }\n    byte [] md5hash = new byte [32];\n    try {\n        md.update (string.getBytes (\"iso-8859-1\"), 0, string.length ());\n    } catch (UnsupportedEncodingException exception) {\n        LOGGER.warn (exception.getMessage ());\n    }\n    md5hash = md.digest ();\n    return convertToHex (md5hash);\n}\n"}
{"clone_type": "MT3", "method1_id": 7707971, "method2_id": 11719425, "code1": "public static double [] [] transpose (double [] [] matrix) {\n    double [] [] result = new double [matrix.length] [matrix [0].length];\n    for (int i = 0;\n    i < matrix.length; i ++) {\n        for (int j = 0;\n        j < matrix [i].length; j ++) {\n            result [i] [j] = matrix [j] [i];\n        }\n    }\n    return result;\n}\n", "code2": "public RealSquareMatrix copyLowerToUpper () {\n    for (int i = 0;\n    i < cols - 1; i ++) {\n        for (int j = i + 1;\n        j < cols; j ++) {\n            flmat [i] [j] = flmat [j] [i];\n        }\n    }\n    return this;\n}\n"}
{"clone_type": "MT3", "method1_id": 9550213, "method2_id": 22677985, "code1": "public Matrix getTransposed () {\n    if (Transposed != null) return Transposed;\n\n    Matrix result = new Matrix (Cols, Rows);\n    for (int i = 0;\n    i < Rows; ++ i) {\n        for (int j = 0;\n        j < Cols; ++ j) {\n            result.Values [j] [i] = Values [i] [j];\n        }\n    }\n    Transposed = result;\n    result.Transposed = this;\n    return result;\n}\n", "code2": "public Matrix44 transpose () {\n    Matrix44 result = new Matrix44 ();\n    for (int i = 0;\n    i < 4; i ++) {\n        for (int j = 0;\n        j < 4; j ++) {\n            result._m [i] [j] = _m [j] [i];\n        }\n    }\n    return result;\n}\n"}
{"clone_type": "MT3", "method1_id": 16242345, "method2_id": 18334399, "code1": "public void zip () {\n    byte [] buf = new byte [1024];\n    try {\n        String outFilename = getOutName ();\n        ZipOutputStream out = new ZipOutputStream (new FileOutputStream (outFilename));\n        for (int i = min;\n        i <= max; i ++) {\n            String fname = name + \"_\" + i + \".html\";\n            FileInputStream in = new FileInputStream (path + fname);\n            out.putNextEntry (new ZipEntry (fname));\n            int len;\n            while ((len = in.read (buf)) > 0) {\n                out.write (buf, 0, len);\n            }\n            out.closeEntry ();\n            in.close ();\n        }\n        out.close ();\n    } catch (IOException ex) {\n        System.out.println (\"Exception: \" + ex);\n    }\n}\n", "code2": "protected void zipVisualizationFiles (final String outputfile) {\n    final byte [] buf = new byte [100000];\n    try {\n        final String outFilename = outputfile;\n        final ZipOutputStream out = new ZipOutputStream (new FileOutputStream (outFilename));\n        for (int i = 0;\n        i < filenames.size (); i ++) {\n            final FileInputStream in = new FileInputStream (filenames.get (i));\n            out.putNextEntry (new ZipEntry (filenames.get (i)));\n            int len;\n            while ((len = in.read (buf)) > 0) {\n                out.write (buf, 0, len);\n            }\n            out.closeEntry ();\n            in.close ();\n        }\n        out.close ();\n    } catch (final IOException e) {\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 7713594, "method2_id": 14736188, "code1": "private static void copyFile (File source, File dest, boolean visibleFilesOnly) throws IOException {\n    if (visibleFilesOnly && isHiddenOrDotFile (source)) {\n        return;\n    }\n    if (dest.exists ()) {\n        System.err.println (\"Destination File Already Exists: \" + dest);\n    }\n    FileChannel in = null, out = null;\n    try {\n        in = new FileInputStream (source).getChannel ();\n        out = new FileOutputStream (dest).getChannel ();\n        in.transferTo (0, in.size (), out);\n    } finally {\n        if (in != null) {\n            in.close ();\n        }\n        if (out != null) {\n            out.close ();\n        }\n    }\n}\n", "code2": "public static void copyFile (File source, File destination) throws IOException {\n    FileChannel in = null;\n    FileChannel out = null;\n    try {\n        in = new FileInputStream (source).getChannel ();\n        out = new FileOutputStream (destination).getChannel ();\n        long size = in.size ();\n        MappedByteBuffer buffer = in.map (FileChannel.MapMode.READ_ONLY, 0, size);\n        out.write (buffer);\n    } finally {\n        if (in != null) {\n            in.close ();\n        }\n        if (out != null) {\n            out.close ();\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 4116791, "method2_id": 16466743, "code1": "private String calculateMD5 (String input) throws NoSuchAlgorithmException {\n    MessageDigest digest = MessageDigest.getInstance (\"MD5\");\n    digest.reset ();\n    digest.update (input.getBytes ());\n    byte [] md5 = digest.digest ();\n    String tmp = \"\";\n    String res = \"\";\n    for (int i = 0;\n    i < md5.length; i ++) {\n        tmp = (Integer.toHexString (0xFF & md5 [i]));\n        if (tmp.length () == 1) {\n            res += \"0\" + tmp;\n        } else {\n            res += tmp;\n        }\n    }\n    return res;\n}\n", "code2": "public String getmd5 (String password) {\n    String pwHash = \"\";\n    MessageDigest md = null;\n    try {\n        md = MessageDigest.getInstance (\"MD5\");\n        md.reset ();\n        md.update (password.getBytes ());\n        byte [] b = md.digest ();\n        for (int i = 0;\n        i < b.length; i ++) {\n            pwHash += Integer.toString ((b [i] & 0xFF) + 0x100, 16).substring (1);\n        }\n    } catch (NoSuchAlgorithmException ex) {\n        Logger.fatal (\"MD5 Hash Algorithm not found\", ex);\n    }\n    Logger.info (\"PWHash erzeugt und wird \u00fcbergeben\");\n    return pwHash;\n}\n"}
{"clone_type": "MT3", "method1_id": 7039259, "method2_id": 12679523, "code1": "@Override\npublic void actionPerformed (ActionEvent e) {\n    if (Desktop.isDesktopSupported ()) {\n        Desktop d = Desktop.getDesktop ();\n        try {\n            if (d.isSupported (Desktop.Action.BROWSE)) {\n                d.browse (new URI (url));\n            }\n        } catch (Exception ex) {\n            System.err.println (\"DialogHinweis.BeobUrl: \" + ex.getMessage ());\n        }\n    }\n}\n", "code2": "@Override\npublic void mouseClicked (MouseEvent e) {\n    if (Desktop.isDesktopSupported ()) {\n        try {\n            Desktop.getDesktop ().browse (new URI (this.url));\n        } catch (Exception e1) {\n            JOptionPane.showMessageDialog (this, \"Can not open website because \" + e1.getMessage (), \"iGoSyncDocs\", JOptionPane.ERROR_MESSAGE);\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 11514180, "method2_id": 11854456, "code1": "public void copyFile (File sourceFile, String toDir, boolean create, boolean overwrite) throws FileNotFoundException, IOException {\n    FileInputStream source = null;\n    FileOutputStream destination = null;\n    byte [] buffer;\n    int bytes_read;\n    File toFile = new File (toDir);\n    if (create && ! toFile.exists ()) toFile.mkdirs ();\n\n    if (toFile.exists ()) {\n        File destFile = new File (toDir + \"/\" + sourceFile.getName ());\n        try {\n            if (! destFile.exists () || overwrite) {\n                source = new FileInputStream (sourceFile);\n                destination = new FileOutputStream (destFile);\n                buffer = new byte [1024];\n                while (true) {\n                    bytes_read = source.read (buffer);\n                    if (bytes_read == - 1) break;\n\n                    destination.write (buffer, 0, bytes_read);\n                }\n            }\n        } catch (Exception exx) {\n            exx.printStackTrace ();\n        } finally {\n            if (source != null) try {\n                source.close ();\n            } catch (IOException e) {\n            }\n\n            if (destination != null) try {\n                destination.close ();\n            } catch (IOException e) {\n            }\n\n        }\n    }\n}\n", "code2": "public static int copy (File src, int amount, File dst) {\n    final int BUFFER_SIZE = 1024;\n    int amountToRead = amount;\n    boolean ok = true;\n    InputStream in = null;\n    OutputStream out = null;\n    try {\n        in = new BufferedInputStream (new FileInputStream (src));\n        out = new BufferedOutputStream (new FileOutputStream (dst));\n        byte [] buf = new byte [BUFFER_SIZE];\n        while (amountToRead > 0) {\n            int read = in.read (buf, 0, Math.min (BUFFER_SIZE, amountToRead));\n            if (read == - 1) break;\n\n            amountToRead -= read;\n            out.write (buf, 0, read);\n        }\n    } catch (IOException e) {\n    } finally {\n        if (in != null) try {\n            in.close ();\n        } catch (IOException e) {\n        }\n\n        if (out != null) {\n            try {\n                out.flush ();\n            } catch (IOException e) {\n            }\n            try {\n                out.close ();\n            } catch (IOException e) {\n            }\n        }\n    }\n    return amount - amountToRead;\n}\n"}
{"clone_type": "MT3", "method1_id": 12335352, "method2_id": 19389536, "code1": "public static int [] [] transpose (int [] [] mat) {\n    int [] [] a = new int [mat [0].length] [mat.length];\n    for (int i = 0;\n    i < mat [0].length; i ++) {\n        for (int j = 0;\n        j < mat.length; j ++) {\n            a [i] [j] = mat [j] [i];\n        }\n    }\n    return a;\n}\n", "code2": "public Matrix transpose () {\n    double [] [] out = new double [cols] [rows];\n    for (int i = 0;\n    i < cols; i ++) {\n        for (int j = 0;\n        j < rows; j ++) {\n            out [i] [j] = value [j] [i];\n        }\n    }\n    return new Matrix (out, cols, rows);\n}\n"}
{"clone_type": "MT3", "method1_id": 10637429, "method2_id": 12117054, "code1": "private void symmetrizeMatrix () {\n    for (int i = 0;\n    i < systemConstants.length; i ++) {\n        for (int j = 0;\n        j < i; j ++) systemMatrix [j] [i] = systemMatrix [i] [j];\n\n    }\n}\n", "code2": "public static final float [] [] transposeMatrix (float [] [] a) {\n    int ra = a.length;\n    int ca = a [0].length;\n    float [] [] m = new float [ca] [ra];\n    for (int i = 0;\n    i < ra; i ++) {\n        for (int j = 0;\n        j < ca; j ++) m [j] [i] = a [i] [j];\n\n    }\n    return m;\n}\n"}
{"clone_type": "MT3", "method1_id": 5140790, "method2_id": 10041941, "code1": "public void compress (String dir2zip, ZipOutputStream zip) throws IOException {\n    String [] dirList = AgentFilesystem.listDir (dir2zip);\n    byte [] readBuffer = new byte [2156];\n    int bytesIn = 0;\n    for (String filename : dirList) {\n        File file = new File (dir2zip, filename);\n        if (file.isDirectory ()) {\n            String filepath = file.getPath ();\n            compress (filepath, zip);\n            continue;\n        }\n        if (LibraryFile.getExtension (file.getName ()).equals (\"zip\")) continue;\n\n        FileInputStream input = new FileInputStream (file);\n        String entryPath = file.getCanonicalPath ().substring (outputPath.length () + 1, file.getCanonicalPath ().length ());\n        ZipEntry entry = new ZipEntry (entryPath);\n        zip.putNextEntry (entry);\n        while ((bytesIn = input.read (readBuffer)) != - 1) {\n            zip.write (readBuffer, 0, bytesIn);\n        }\n        input.close ();\n    }\n}\n", "code2": "public void zipDir (String dir2zip, ZipOutputStream zos, String rootPath) {\n    try {\n        File zipDir = new File (dir2zip);\n        String [] dirList = zipDir.list ();\n        byte [] readBuffer = new byte [2156];\n        int bytesIn = 0;\n        zos.putNextEntry (new ZipEntry (rootPath + \"/\"));\n        for (int i = 0;\n        i < dirList.length; i ++) {\n            File f = new File (zipDir, dirList [i]);\n            if (f.isDirectory ()) {\n                String filePath = f.getPath ();\n                String temp = rootPath + \"\\\\\" + f.getName ();\n                zipDir (filePath, zos, temp);\n                continue;\n            }\n            FileInputStream fis = new FileInputStream (f);\n            ZipEntry anEntry = new ZipEntry (rootPath + \"\\\\\" + f.getName ());\n            zos.putNextEntry (anEntry);\n            while ((bytesIn = fis.read (readBuffer)) != - 1) {\n                zos.write (readBuffer, 0, bytesIn);\n            }\n            fis.close ();\n        }\n    } catch (Exception e) {\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 11952735, "method2_id": 18269745, "code1": "public static boolean copyFile (String sourceName, String destName) {\n    FileChannel sourceChannel = null;\n    FileChannel destChannel = null;\n    boolean wasOk = false;\n    try {\n        sourceChannel = new FileInputStream (sourceName).getChannel ();\n        destChannel = new FileOutputStream (destName).getChannel ();\n        destChannel.transferFrom (sourceChannel, 0, sourceChannel.size ());\n        wasOk = true;\n    } catch (Throwable exception) {\n        logger.log (Level.SEVERE, \"Exception in copyFile\", exception);\n    } finally {\n        try {\n            if (sourceChannel != null) sourceChannel.close ();\n\n        } catch (Throwable tt) {\n        }\n        try {\n            if (destChannel != null) destChannel.close ();\n\n        } catch (Throwable tt) {\n        }\n    }\n    return wasOk;\n}\n", "code2": "public static boolean decodeFileToFile (String infile, String outfile) {\n    boolean success = false;\n    java.io.InputStream in = null;\n    java.io.OutputStream out = null;\n    try {\n        in = new Base64.InputStream (new java.io.BufferedInputStream (new java.io.FileInputStream (infile)), Base64.DECODE);\n        out = new java.io.BufferedOutputStream (new java.io.FileOutputStream (outfile));\n        byte [] buffer = new byte [65536];\n        int read = - 1;\n        while ((read = in.read (buffer)) >= 0) {\n            out.write (buffer, 0, read);\n        }\n        success = true;\n    } catch (java.io.IOException exc) {\n        exc.printStackTrace ();\n    } finally {\n        try {\n            in.close ();\n        } catch (Exception exc) {\n        }\n        try {\n            out.close ();\n        } catch (Exception exc) {\n        }\n    }\n    return success;\n}\n"}
{"clone_type": "MT3", "method1_id": 12440171, "method2_id": 21321505, "code1": "public void writeFile (String resource, InputStream is) throws IOException {\n    File f = prepareFsReferenceAsFile (resource);\n    FileOutputStream fos = new FileOutputStream (f);\n    BufferedOutputStream bos = new BufferedOutputStream (fos);\n    try {\n        IOUtils.copy (is, bos);\n    } finally {\n        IOUtils.closeQuietly (is);\n        IOUtils.closeQuietly (bos);\n    }\n}\n", "code2": "public void run () {\n    try {\n        IOUtils.copy (is, os);\n        os.flush ();\n    } catch (IOException ioe) {\n        logger.error (\"Unable to copy\", ioe);\n    } finally {\n        IOUtils.closeQuietly (is);\n        IOUtils.closeQuietly (os);\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 4475917, "method2_id": 22055554, "code1": "private static void copyExistingZipFiles (final ZipFile fromZip, final ZipOutputStream toZip, final String fileToOverwrite, final byte [] copyBuffer) throws IOException {\n    final Enumeration entries = fromZip.entries ();\n    while (entries.hasMoreElements ()) {\n        final ZipEntry entry = (ZipEntry) entries.nextElement ();\n        if (! entry.getName ().equals (fileToOverwrite)) {\n            BufferedInputStream entryStream = null;\n            try {\n                entryStream = new BufferedInputStream (fromZip.getInputStream (entry));\n                toZip.putNextEntry (entry);\n                int bytesRead;\n                while ((bytesRead = entryStream.read (copyBuffer)) != - 1) {\n                    toZip.write (copyBuffer, 0, bytesRead);\n                }\n            } finally {\n                if (entryStream != null) {\n                    try {\n                        entryStream.close ();\n                    } catch (final IOException e) {\n                    }\n                }\n            }\n        }\n    }\n}\n", "code2": "protected void addFileToJar (JarOutputStream jStream, File inputFile, String logicalFilename) throws BuildException {\n    FileInputStream iStream = null;\n    try {\n        if (! addedfiles.contains (logicalFilename)) {\n            iStream = new FileInputStream (inputFile);\n            ZipEntry zipEntry = new ZipEntry (logicalFilename.replace ('\\\\', '/'));\n            jStream.putNextEntry (zipEntry);\n            byte [] byteBuffer = new byte [2 * DEFAULT_BUFFER_SIZE];\n            int count = 0;\n            do {\n                jStream.write (byteBuffer, 0, count);\n                count = iStream.read (byteBuffer, 0, byteBuffer.length);\n            } while (count != - 1);\n            addedfiles.add (logicalFilename);\n        }\n    } catch (IOException ioe) {\n        log (\"WARNING: IOException while adding entry \" + logicalFilename + \" to jarfile from \" + inputFile.getPath () + \" \" + ioe.getClass ().getName () + \"-\" + ioe.getMessage (), Project.MSG_WARN);\n    } finally {\n        if (iStream != null) {\n            try {\n                iStream.close ();\n            } catch (IOException closeException) {\n            }\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 6414571, "method2_id": 10296435, "code1": "private void downloadlblMouseClicked (java.awt.event.MouseEvent evt) {\n    if (Desktop.isDesktopSupported ()) {\n        Desktop desktop = Desktop.getDesktop ();\n        if (desktop.isSupported (Desktop.Action.BROWSE)) {\n            try {\n                desktop.browse (new URI (Way2SMSCore.downloadlink));\n            } catch (Exception e) {\n                System.out.println (e);\n            }\n        }\n    }\n}\n", "code2": "public void actionPerformed (ActionEvent e) {\n    if (Desktop.isDesktopSupported ()) {\n        try {\n            Desktop.getDesktop ().browse (new URI (\"http://popcornforum.de/forumdisplay.php?fid=67\"));\n        } catch (Exception exc) {\n            JOptionPane.showMessageDialog (null, \"Could not acces http://popcornforum.de/forumdisplay.php?fid=67\", \"Error\", JOptionPane.ERROR_MESSAGE);\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 16338011, "method2_id": 21978987, "code1": "protected byte [] getHashedID (String ID) {\n    try {\n        MessageDigest md5 = MessageDigest.getInstance (\"MD5\");\n        md5.reset ();\n        md5.update (ID.getBytes ());\n        byte [] digest = md5.digest ();\n        byte [] bytes = new byte [WLDB_ID_SIZE];\n        for (int i = 0;\n        i < bytes.length; i ++) {\n            bytes [i] = digest [i];\n        }\n        return bytes;\n    } catch (NoSuchAlgorithmException exception) {\n        System.err.println (\"Java VM is not compatible\");\n        exit ();\n        return null;\n    }\n}\n", "code2": "private static String md5 (String text) {\n    try {\n        MessageDigest digest = MessageDigest.getInstance (\"MD5\");\n        digest.update (text.getBytes (\"UTF-8\"));\n        byte [] messageDigest = digest.digest ();\n        StringBuilder hexString = new StringBuilder ();\n        for (int i = 0;\n        i < messageDigest.length; i ++) {\n            hexString.append (Integer.toHexString (0xFF & messageDigest [i]));\n        }\n        return hexString.toString ();\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace ();\n    } catch (UnsupportedEncodingException e) {\n        e.printStackTrace ();\n    }\n    return null;\n}\n"}
{"clone_type": "MT3", "method1_id": 2088568, "method2_id": 10826994, "code1": "public static void copyFile (File source, File dest) throws Exception {\n    log.warn (\"File names are \" + source.toString () + \"   and \" + dest.toString ());\n    if (! dest.getParentFile ().exists ()) dest.getParentFile ().mkdir ();\n\n    FileChannel sourceChannel = new FileInputStream (source).getChannel ();\n    FileChannel destinationChannel = new FileOutputStream (dest).getChannel ();\n    sourceChannel.transferTo (0, sourceChannel.size (), destinationChannel);\n    sourceChannel.close ();\n    destinationChannel.close ();\n}\n", "code2": "public static void copyFile (File in, File out) throws EnhancedException {\n    try {\n        FileChannel sourceChannel = new FileInputStream (in).getChannel ();\n        FileChannel destinationChannel = new FileOutputStream (out).getChannel ();\n        sourceChannel.transferTo (0, sourceChannel.size (), destinationChannel);\n        sourceChannel.close ();\n        destinationChannel.close ();\n    } catch (Exception e) {\n        throw new EnhancedException (\"Could not copy file \" + in.getAbsolutePath () + \" to \" + out.getAbsolutePath () + \".\", e);\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 3578392, "method2_id": 8117216, "code1": "public static void copyFile (File in, File out) throws FileNotFoundException, IOException {\n    FileChannel sourceChannel = null;\n    FileChannel destinationChannel = null;\n    try {\n        sourceChannel = new FileInputStream (in).getChannel ();\n        destinationChannel = new FileOutputStream (out).getChannel ();\n        sourceChannel.transferTo (0, sourceChannel.size (), destinationChannel);\n    } finally {\n        try {\n            sourceChannel.close ();\n        } catch (Exception ex) {\n        }\n        try {\n            destinationChannel.close ();\n        } catch (Exception ex) {\n        }\n    }\n}\n", "code2": "private void copyLocalFile (File sourceFile, File destFile) throws IOException {\n    if (! destFile.exists ()) {\n        destFile.createNewFile ();\n    }\n    FileChannel source = null;\n    FileChannel destination = null;\n    try {\n        source = new FileInputStream (sourceFile).getChannel ();\n        destination = new FileOutputStream (destFile).getChannel ();\n        destination.transferFrom (source, 0, source.size ());\n    } finally {\n        if (source != null) {\n            source.close ();\n        }\n        if (destination != null) {\n            destination.close ();\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 1469508, "method2_id": 2437217, "code1": "private void addFileToZip (ZipOutputStream out, String fn, String content) {\n    if (fn != null) {\n        byte [] buf = new byte [1024];\n        try {\n            ByteArrayInputStream bais = new ByteArrayInputStream (content.getBytes ());\n            out.putNextEntry (new ZipEntry (fn));\n            int len;\n            while ((len = bais.read (buf)) > 0) {\n                out.write (buf, 0, len);\n            }\n            out.closeEntry ();\n            bais.close ();\n        } catch (IOException e) {\n            e.printStackTrace ();\n        }\n    }\n}\n", "code2": "private static final void createZip (File f, ZipOutputStream out) throws IOException {\n    if (f.isFile ()) {\n        FileInputStream in = new FileInputStream (f);\n        out.putNextEntry (new ZipEntry (f.getAbsolutePath ().substring (1)));\n        byte [] buf = new byte [2048];\n        int len;\n        while ((len = in.read (buf)) > 0) {\n            out.write (buf, 0, len);\n        }\n        out.closeEntry ();\n        in.close ();\n    } else if (f.isDirectory ()) {\n        File fs [] = f.listFiles ();\n        for (int i = 0;\n        i < fs.length; i ++) {\n            createZip (fs [i], out);\n        }\n    }\n\n}\n"}
{"clone_type": "MT3", "method1_id": 4924820, "method2_id": 13865174, "code1": "public void open (File f) {\n    if (Desktop.isDesktopSupported ()) {\n        Desktop d = Desktop.getDesktop ();\n        if (d.isSupported (Desktop.Action.OPEN)) {\n            try {\n                d.open (f.getCanonicalFile ());\n            } catch (IOException e) {\n                e.printStackTrace ();\n            }\n        } else {\n            JOptionPane.showMessageDialog (null, \"Cette action n'est pas support\u00e9 par votre syst\u00e8me d'exploitation.\");\n        }\n    } else {\n        JOptionPane.showMessageDialog (null, \"Votre syst\u00e8me d'exploitation n'est pas support\u00e9.\");\n    }\n}\n", "code2": "public void mouseClicked (MouseEvent event) {\n    if (event.getClickCount () == 2) {\n        File file = getSelectedFile ();\n        if (file.isDirectory ()) {\n            setSelectionAsBaseDir ();\n        } else if (Desktop.isDesktopSupported ()) {\n            try {\n                Desktop.getDesktop ().open (file);\n            } catch (IOException ex) {\n                System.out.println (ex);\n            }\n        }\n\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 3419825, "method2_id": 3578392, "code1": "public static void copyFile (File sourceFile, File destFile) throws IOException {\n    if (! destFile.exists ()) {\n        destFile.createNewFile ();\n    }\n    FileChannel source = null;\n    FileChannel destination = null;\n    try {\n        source = new FileInputStream (sourceFile).getChannel ();\n        destination = new FileOutputStream (destFile).getChannel ();\n        destination.transferFrom (source, 0, source.size ());\n    } finally {\n        if (source != null) {\n            source.close ();\n        }\n        if (destination != null) {\n            destination.close ();\n        }\n    }\n}\n", "code2": "public static void copyFile (File in, File out) throws FileNotFoundException, IOException {\n    FileChannel sourceChannel = null;\n    FileChannel destinationChannel = null;\n    try {\n        sourceChannel = new FileInputStream (in).getChannel ();\n        destinationChannel = new FileOutputStream (out).getChannel ();\n        sourceChannel.transferTo (0, sourceChannel.size (), destinationChannel);\n    } finally {\n        try {\n            sourceChannel.close ();\n        } catch (Exception ex) {\n        }\n        try {\n            destinationChannel.close ();\n        } catch (Exception ex) {\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 1023289, "method2_id": 20418573, "code1": "public static String MD5 (String s) {\n    try {\n        MessageDigest m = MessageDigest.getInstance (\"MD5\");\n        m.update (s.getBytes (), 0, s.length ());\n        return new BigInteger (1, m.digest ()).toString (16);\n    } catch (NoSuchAlgorithmException ex) {\n        return \"\";\n    }\n}\n", "code2": "public static String hashMD5 (String password) {\n    String hashword = null;\n    try {\n        MessageDigest md5 = MessageDigest.getInstance (\"MD5\");\n        md5.update (password.getBytes ());\n        BigInteger hash = new BigInteger (1, md5.digest ());\n        hashword = hash.toString (16);\n    } catch (NoSuchAlgorithmException nsae) {\n    }\n    return hashword;\n}\n"}
{"clone_type": "MT3", "method1_id": 10288282, "method2_id": 14960335, "code1": "public String getMarketInfo () {\n    try {\n        URL url = new URL (\"http://api.eve-central.com/api/evemon\");\n        BufferedReader s = new BufferedReader (new InputStreamReader (url.openStream ()));\n        String line = \"\";\n        String xml = \"\";\n        while ((line = s.readLine ()) != null) {\n            xml += line;\n        }\n        return xml;\n    } catch (IOException ex) {\n        ex.printStackTrace ();\n    }\n    return null;\n}\n", "code2": "private String readData (URL url) {\n    try {\n        BufferedReader in = new BufferedReader (new InputStreamReader (url.openStream ()));\n        StringBuffer responseBuffer = new StringBuffer ();\n        String line;\n        while ((line = in.readLine ()) != null) {\n            responseBuffer.append (line);\n        }\n        in.close ();\n        return new String (responseBuffer);\n    } catch (Exception e) {\n        System.out.println (e);\n    }\n    return null;\n}\n"}
{"clone_type": "MT3", "method1_id": 2310752, "method2_id": 23071780, "code1": "public static void copy (final String source, final String dest) {\n    final File s = new File (source);\n    final File w = new File (dest);\n    try {\n        final FileInputStream in = new FileInputStream (s);\n        final FileOutputStream out = new FileOutputStream (w);\n        int c;\n        while ((c = in.read ()) != - 1) out.write (c);\n\n        in.close ();\n        out.close ();\n    } catch (IOException ioe) {\n        System.out.println (\"Error reading/writing files!\");\n    }\n}\n", "code2": "public boolean copyFile (File source, File dest) {\n    try {\n        FileReader in = new FileReader (source);\n        FileWriter out = new FileWriter (dest);\n        int c;\n        while ((c = in.read ()) != - 1) out.write (c);\n\n        in.close ();\n        out.close ();\n        return true;\n    } catch (Exception e) {\n        return false;\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 16506879, "method2_id": 22144692, "code1": "private static long crc32 (byte [] stream) {\n    CRC32 crc32 = new CRC32 ();\n    crc32.reset ();\n    crc32.update (stream);\n    long res = crc32.getValue ();\n    return res;\n}\n", "code2": "private int crc32Hash (byte [] key) {\n    CRC32 checksum = new CRC32 ();\n    checksum.update (key);\n    long crc = checksum.getValue ();\n    return (int) crc;\n}\n"}
{"clone_type": "MT3", "method1_id": 10478671, "method2_id": 13902981, "code1": "private void copyFile (File sourcefile, File targetfile) {\n    BufferedInputStream in = null;\n    BufferedOutputStream out = null;\n    try {\n        in = new BufferedInputStream (new FileInputStream (sourcefile));\n        out = new BufferedOutputStream (new FileOutputStream (targetfile));\n        byte [] buffer = new byte [4096];\n        int bytesread = 0;\n        while ((bytesread = in.read (buffer)) >= 0) {\n            out.write (buffer, 0, bytesread);\n        }\n    } catch (IOException e) {\n        e.printStackTrace ();\n    } finally {\n        try {\n            if (in != null) {\n                in.close ();\n            }\n            if (out != null) {\n                out.close ();\n            }\n        } catch (IOException e) {\n            e.printStackTrace ();\n        }\n    }\n}\n", "code2": "public static boolean decodeFileToFile (String infile, String outfile) {\n    boolean success = false;\n    java.io.InputStream in = null;\n    java.io.OutputStream out = null;\n    try {\n        in = new Base64.InputStream (new java.io.BufferedInputStream (new java.io.FileInputStream (infile)), Base64.DECODE);\n        out = new java.io.BufferedOutputStream (new java.io.FileOutputStream (outfile));\n        byte [] buffer = new byte [65536];\n        int read = - 1;\n        while ((read = in.read (buffer)) >= 0) {\n            out.write (buffer, 0, read);\n        }\n        success = true;\n    } catch (java.io.IOException exc) {\n        exc.printStackTrace ();\n    } finally {\n        try {\n            in.close ();\n        } catch (Exception exc) {\n        }\n        try {\n            out.close ();\n        } catch (Exception exc) {\n        }\n    }\n    return success;\n}\n"}
{"clone_type": "MT3", "method1_id": 4260650, "method2_id": 20725036, "code1": "public void copyFile (File sourceFile, File destFile) throws IOException {\n    if (! destFile.exists ()) {\n        destFile.createNewFile ();\n    }\n    FileChannel source = null;\n    FileChannel destination = null;\n    Closer c = new Closer ();\n    try {\n        source = c.register (new FileInputStream (sourceFile).getChannel ());\n        destination = c.register (new FileOutputStream (destFile).getChannel ());\n        destination.transferFrom (source, 0, source.size ());\n    } catch (IOException e) {\n        c.doNotThrow ();\n        throw e;\n    } finally {\n        c.closeAll ();\n    }\n}\n", "code2": "private static void copyFile (File sourceFile, File destFile) throws IOException {\n    if (! destFile.exists ()) {\n        destFile.createNewFile ();\n    }\n    FileChannel source = null;\n    FileChannel destination = null;\n    try {\n        source = new FileInputStream (sourceFile).getChannel ();\n        destination = new FileOutputStream (destFile).getChannel ();\n        destination.transferFrom (source, 0, source.size ());\n    } finally {\n        if (source != null) {\n            source.close ();\n        }\n        if (destination != null) {\n            destination.close ();\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 3616770, "method2_id": 12074936, "code1": "public void mouseClicked (MouseEvent me) {\n    if (Desktop.isDesktopSupported ()) {\n        Desktop desktop = Desktop.getDesktop ();\n        try {\n            desktop.browse (new URI (\"http://www.ignissoft.com\"));\n        } catch (Exception e) {\n            log.log (Level.WARNING, \"Failed openning browser to Ignis website: \" + e.getMessage ());\n        }\n    }\n}\n", "code2": "public static void browse (URI uri) {\n    if (Desktop.isDesktopSupported ()) {\n        Desktop desktop = Desktop.getDesktop ();\n        if (desktop.isSupported (Desktop.Action.BROWSE)) {\n            try {\n                desktop.browse (uri);\n            } catch (Exception e) {\n                handleException (e);\n            }\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 617563, "method2_id": 10350952, "code1": "public static void main (String [] args) {\n    String str = \"vbnjm7pexhlmof3kapi_key76bbc056cf516a844af25a763b2b8426auth_tokenff8080812374bd3f0123b60363a5230acomment_text\u4f60frob118edb4cb78b439207c2329b76395f9fmethodyupoo.photos.comments.addphoto_idff80808123922c950123b6066c946a3f\";\n    MessageDigest md = null;\n    String s = new String (\"\u4f60\");\n    try {\n        md = MessageDigest.getInstance (\"MD5\");\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace ();\n        throw new RuntimeException (e.getMessage ());\n    }\n    md.reset ();\n    try {\n        md.update (str.getBytes (\"UTF-8\"));\n        System.out.println (new BigInteger (1, md.digest ()).toString (16));\n        System.out.println (new BigInteger (1, s.getBytes (\"UTF-8\")).toString (16));\n    } catch (UnsupportedEncodingException e) {\n        e.printStackTrace ();\n    }\n}\n", "code2": "public synchronized String encrypt (String plaintext) throws Exception {\n    MessageDigest md = null;\n    try {\n        md = MessageDigest.getInstance (\"SHA\");\n    } catch (NoSuchAlgorithmException e) {\n        throw new Exception (e.getMessage ());\n    }\n    try {\n        md.update (plaintext.getBytes (\"UTF-8\"));\n    } catch (UnsupportedEncodingException e) {\n        throw new Exception (e.getMessage ());\n    }\n    byte raw [] = md.digest ();\n    String hash = (new BASE64Encoder ()).encode (raw);\n    return hash;\n}\n"}
{"clone_type": "MT3", "method1_id": 17586130, "method2_id": 20937548, "code1": "protected N save (String sql, Object [] args) {\n    Connection conn = null;\n    PreparedStatement pstmt = null;\n    ResultSet rs = null;\n    try {\n        conn = JdbcUtils.getConnection ();\n        conn.setAutoCommit (false);\n        pstmt = conn.prepareStatement (sql, Statement.RETURN_GENERATED_KEYS);\n        this.setParameters (pstmt, args);\n        pstmt.executeUpdate ();\n        conn.commit ();\n        conn.setAutoCommit (true);\n        rs = pstmt.getGeneratedKeys ();\n        return (N) rs.getObject (1);\n    } catch (SQLException e) {\n        try {\n            if (conn != null) {\n                conn.rollback ();\n                conn.setAutoCommit (true);\n            }\n        } catch (SQLException ex) {\n            ex.printStackTrace ();\n        }\n        throw new JdbcDaoException (e.getMessage (), e);\n    } finally {\n        JdbcUtils.free (rs, pstmt, conn);\n    }\n}\n", "code2": "public void removeRoom (int thisRoom) {\n    DBConnection con = null;\n    try {\n        con = DBServiceManager.allocateConnection ();\n        con.setAutoCommit (false);\n        String query = \"DELETE FROM cafe_Chat_Category WHERE cafe_Chat_Category_id=? \";\n        PreparedStatement ps = con.prepareStatement (query);\n        ps.setInt (1, thisRoom);\n        ps.executeUpdate ();\n        query = \"DELETE FROM cafe_Chatroom WHERE cafe_chatroom_category=? \";\n        ps = con.prepareStatement (query);\n        ps.setInt (1, thisRoom);\n        ps.executeUpdate ();\n        con.commit ();\n        con.setAutoCommit (true);\n    } catch (SQLException e) {\n        try {\n            con.rollback ();\n        } catch (SQLException sqle) {\n        }\n    } finally {\n        if (con != null) con.release ();\n\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 14560249, "method2_id": 16128429, "code1": "@Override\npublic void actionPerformed (ActionEvent e) {\n    if (Desktop.isDesktopSupported ()) {\n        Desktop desktop = Desktop.getDesktop ();\n        try {\n            desktop.browse (uri);\n        } catch (Exception ex) {\n        }\n    }\n}\n", "code2": "public void onClickDo (final MouseEvent me) {\n    if (Desktop.isDesktopSupported ()) {\n        final Desktop desktop = Desktop.getDesktop ();\n        try {\n            desktop.browse (new URI (\"http://eworld.sourceforge.net\"));\n        } catch (final Exception e) {\n            e.printStackTrace ();\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 2801437, "method2_id": 13414771, "code1": "public static String encryptMD5 (String str) {\n    try {\n        MessageDigest md5 = MessageDigest.getInstance (\"MD5\");\n        md5.update (str.getBytes ());\n        byte [] hash = md5.digest ();\n        md5.reset ();\n        return Format.hashToHex (hash);\n    } catch (java.security.NoSuchAlgorithmException nsae0) {\n        return null;\n    }\n}\n", "code2": "@Digester(forField=\"password\")\npublic static String encriptPassword (String passwd) {\n    try {\n        MessageDigest md = MessageDigest.getInstance (\"MD5\");\n        md.update (passwd.getBytes ());\n        BigInteger hash = new BigInteger (1, md.digest ());\n        return hash.toString (16);\n    } catch (Exception e) {\n        return null;\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 558348, "method2_id": 643813, "code1": "public boolean deleteDirectory (File path) {\n    if (path.exists ()) {\n        File [] files = path.listFiles ();\n        for (int i = 0;\n        i < files.length; i ++) {\n            if (files [i].isDirectory ()) {\n                deleteDirectory (files [i]);\n            } else {\n                files [i].delete ();\n            }\n        }\n    }\n    return (path.delete ());\n}\n", "code2": "public static void delete (File f) {\n    File [] files = f.listFiles ();\n    for (int i = 0;\n    i < files.length; i ++) {\n        if (files [i].isFile ()) {\n            files [i].delete ();\n        } else if (files [i].isDirectory ()) {\n            if (! files [i].delete ()) {\n                delete (files [i]);\n            }\n        }\n\n    }\n    deleteDirectory (f);\n}\n"}
{"clone_type": "MT3", "method1_id": 7169018, "method2_id": 17670291, "code1": "private void show (String fileName, HttpServletResponse response) throws IOException {\n    TelnetInputStream ftpIn = ftpClient_sun.get (fileName);\n    OutputStream out = null;\n    try {\n        out = response.getOutputStream ();\n        IOUtils.copy (ftpIn, out);\n    } finally {\n        if (ftpIn != null) {\n            ftpIn.close ();\n        }\n    }\n}\n", "code2": "public void createNewFile (String filePath, InputStream in) throws IOException {\n    FileOutputStream out = null;\n    try {\n        File file = newFileRef (filePath);\n        FileHelper.createNewFile (file, true);\n        out = new FileOutputStream (file);\n        IOUtils.copy (in, out);\n    } finally {\n        IOUtils.closeQuietly (in);\n        IOUtils.closeQuietly (out);\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 14321944, "method2_id": 14504867, "code1": "public IntSquareMatrix copyLowerToUpper () {\n    for (int i = 0;\n    i < cols - 1; i ++) {\n        for (int j = i + 1;\n        j < cols; j ++) {\n            flmat [i] [j] = flmat [j] [i];\n        }\n    }\n    return this;\n}\n", "code2": "private Object [] [] transform (Object [] [] src) {\n    int col = src.length;\n    int row = src [0].length;\n    Object [] [] dest = new Object [row] [col];\n    for (int i = 0;\n    i < col; i ++) {\n        for (int j = 0;\n        j < row; j ++) {\n            dest [j] [i] = src [i] [j];\n        }\n    }\n    return dest;\n}\n"}
{"clone_type": "MT3", "method1_id": 6146146, "method2_id": 19934218, "code1": "public static String encrypt (String text) throws NoSuchAlgorithmException {\n    MessageDigest md;\n    md = MessageDigest.getInstance (\"MD5\");\n    byte [] md5hash = new byte [32];\n    try {\n        md.update (text.getBytes (\"iso-8859-1\"), 0, text.length ());\n    } catch (UnsupportedEncodingException e) {\n        e.printStackTrace ();\n    }\n    md5hash = md.digest ();\n    return convertToHex (md5hash);\n}\n", "code2": "public static String doCrypt (String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n    MessageDigest md;\n    md = MessageDigest.getInstance (\"SHA-1\");\n    byte [] sha1hash = new byte [40];\n    md.update (text.getBytes (\"UTF-8\"), 0, text.length ());\n    sha1hash = md.digest ();\n    return convertToHex (sha1hash);\n}\n"}
{"clone_type": "MT3", "method1_id": 1312064, "method2_id": 3108284, "code1": "public void addDir (ZipOutputStream out, String dirname) {\n    byte [] buf = new byte [1024];\n    File dir = new File (projHandler.getProjectPath () + File.separator + dirname);\n    if (dir.exists ()) {\n        try {\n            File file = new File (projHandler.getProjectPath () + File.separator + dirname);\n            File [] children = file.listFiles ();\n            for (int i = 0;\n            i < children.length; i ++) {\n                if (children [i].isFile ()) {\n                    FileInputStream fis = new FileInputStream (children [i]);\n                    out.putNextEntry (new ZipEntry (dirname.replace ('\\\\', '/') + '/' + children [i].getName ()));\n                    int len;\n                    while ((len = fis.read (buf)) > 0) {\n                        out.write (buf, 0, len);\n                    }\n                    out.closeEntry ();\n                    fis.close ();\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace ();\n        }\n    }\n}\n", "code2": "private static void zipRecursively (ZipOutputStream out, File dir, String zippath, String [] filenames) {\n    byte [] buf = new byte [1024];\n    try {\n        for (int i = 0;\n        i < filenames.length; i ++) {\n            File f = new File (dir, filenames [i]);\n            if (f.isDirectory ()) {\n                String [] subfiles = f.list ();\n                zipRecursively (out, f, zippath + f.getName () + \"/\", subfiles);\n            } else {\n                FileInputStream in = new FileInputStream (new File (dir, filenames [i]));\n                String entrypath = zippath + filenames [i];\n                out.putNextEntry (new ZipEntry (entrypath));\n                int len;\n                while ((len = in.read (buf)) > 0) {\n                    out.write (buf, 0, len);\n                }\n                out.closeEntry ();\n                in.close ();\n            }\n        }\n    } catch (IOException e) {\n        e.printStackTrace ();\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 10977091, "method2_id": 22284204, "code1": "public String md5 (String password) {\n    MessageDigest m = null;\n    try {\n        m = MessageDigest.getInstance (\"MD5\");\n    } catch (NoSuchAlgorithmException ex) {\n    }\n    m.update (password.getBytes (), 0, password.length ());\n    return new BigInteger (1, m.digest ()).toString (16);\n}\n", "code2": "public String crypt (String suppliedPassword) throws NoSuchAlgorithmException {\n    MessageDigest md = MessageDigest.getInstance (\"MD5\");\n    md.update (suppliedPassword.getBytes ());\n    String encriptedPassword = null;\n    try {\n        encriptedPassword = new String (Base64.encode (md.digest ()), \"ASCII\");\n    } catch (UnsupportedEncodingException e) {\n    }\n    return encriptedPassword;\n}\n"}
{"clone_type": "MT3", "method1_id": 8182890, "method2_id": 19127985, "code1": "public void transpose () {\n    for (int i = 0;\n    i < rows; i ++) {\n        for (int j = 0;\n        j < i; j ++) {\n            int t = flmat [i] [j];\n            flmat [i] [j] = flmat [j] [i];\n            flmat [j] [i] = t;\n        }\n    }\n}\n", "code2": "private void initSsGrid () {\n    for (int i = 0;\n    i < 5; i ++) {\n        for (int j = 0;\n        j < i + 1; j ++) {\n            ss [i] [j] = (int) (Math.random () * 9);\n            ss [j] [i] = ss [i] [j];\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 6409830, "method2_id": 21433001, "code1": "public static int [] [] reversalXandY (final int [] [] array) {\n    int col = array [0].length;\n    int row = array.length;\n    int [] [] result = new int [col] [row];\n    for (int y = 0;\n    y < col; y ++) {\n        for (int x = 0;\n        x < row; x ++) {\n            result [x] [y] = array [y] [x];\n        }\n    }\n    return result;\n}\n", "code2": "public Matrix transpose () {\n    Matrix X = new Matrix (n, m);\n    double [] [] C = X.getArray ();\n    for (int i = 0;\n    i < m; i ++) {\n        for (int j = 0;\n        j < n; j ++) {\n            C [j] [i] = A [i] [j];\n        }\n    }\n    return X;\n}\n"}
{"clone_type": "MT3", "method1_id": 558348, "method2_id": 1109950, "code1": "public boolean deleteDirectory (File path) {\n    if (path.exists ()) {\n        File [] files = path.listFiles ();\n        for (int i = 0;\n        i < files.length; i ++) {\n            if (files [i].isDirectory ()) {\n                deleteDirectory (files [i]);\n            } else {\n                files [i].delete ();\n            }\n        }\n    }\n    return (path.delete ());\n}\n", "code2": "public static void cleanUpTempFiles () {\n    try {\n        File tempDirectory = new File (tempDirectoryPath);\n        File [] files = tempDirectory.listFiles ();\n        if (files != null) {\n            for (int i = 0;\n            i < files.length; i ++) {\n                if (files [i].isDirectory ()) deleteDirectory (files [i]);\n\n                files [i].delete ();\n            }\n        }\n        tempDirectory.delete ();\n    } catch (Exception e) {\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 19935081, "method2_id": 23494305, "code1": "public Object mapRow (ResultSet rs, int i) throws SQLException {\n    try {\n        BLOB blob = (BLOB) rs.getBlob (1);\n        OutputStream outputStream = blob.setBinaryStream (0L);\n        IOUtils.copy (inputStream, outputStream);\n        outputStream.close ();\n        inputStream.close ();\n    } catch (Exception e) {\n        throw new SQLException (e.getMessage ());\n    }\n    return null;\n}\n", "code2": "private static void copy (File src, File dst) {\n    try {\n        FileChannel srcChannel = new FileInputStream (src).getChannel ();\n        FileChannel dstChannel = new FileOutputStream (dst).getChannel ();\n        dstChannel.transferFrom (srcChannel, 0, srcChannel.size ());\n        srcChannel.close ();\n        dstChannel.close ();\n    } catch (IOException e) {\n        e.printStackTrace ();\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 9477286, "method2_id": 12034341, "code1": "private String normalizeUnicode (String string) {\n    Pattern pattern = Pattern.compile (\"(\\\\\\\\u([0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]))|(#(29|30|31);)\");\n    Matcher matcher = pattern.matcher (string);\n    StringBuffer result = new StringBuffer ();\n    int prevEnd = 0;\n    while (matcher.find ()) {\n        result.append (string.substring (prevEnd, matcher.start ()));\n        result.append (getChar (matcher.group ()));\n        prevEnd = matcher.end ();\n    }\n    result.append (string.substring (prevEnd));\n    string = result.toString ();\n    return (string);\n}\n", "code2": "private String parseAttribs (String string) {\n    Pattern pattern = Pattern.compile (\"(?s)(?i)(\\\\w+)=\\\"(.*?)\\\"\");\n    Matcher matcher = pattern.matcher (string);\n    int lastend = 0;\n    String output = \"\";\n    while (matcher.find ()) {\n        output += string.substring (lastend, matcher.start ());\n        output += \"<span class=\\\"texattrib\\\">\";\n        output += matcher.group (1) + \"=\";\n        output += \"</span>\";\n        output += \"<span class=\\\"texvalue\\\">\\\"\" + matcher.group (2) + \"\\\"</span>\";\n        lastend = matcher.end ();\n    }\n    output += string.substring (lastend);\n    return output;\n}\n"}
{"clone_type": "MT3", "method1_id": 7707971, "method2_id": 14313423, "code1": "public static double [] [] transpose (double [] [] matrix) {\n    double [] [] result = new double [matrix.length] [matrix [0].length];\n    for (int i = 0;\n    i < matrix.length; i ++) {\n        for (int j = 0;\n        j < matrix [i].length; j ++) {\n            result [i] [j] = matrix [j] [i];\n        }\n    }\n    return result;\n}\n", "code2": "public void transpose () {\n    for (int i = 0;\n    i < rows; i ++) {\n        for (int j = 0;\n        j < i; j ++) {\n            double t = flmat [i] [j];\n            flmat [i] [j] = flmat [j] [i];\n            flmat [j] [i] = t;\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 16944401, "method2_id": 21150253, "code1": "public static void copyFile (File in, File out) throws IOException {\n    FileChannel sourceChannel = new FileInputStream (in).getChannel ();\n    FileChannel destinationChannel = new FileOutputStream (out).getChannel ();\n    try {\n        sourceChannel.transferTo (0, sourceChannel.size (), destinationChannel);\n    } finally {\n        sourceChannel.close ();\n        destinationChannel.close ();\n    }\n}\n", "code2": "public void run () {\n    try {\n        try {\n            IOUtils.copy (_src, _dest);\n        } finally {\n            _dest.close ();\n        }\n    } catch (Exception e) {\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 484120, "method2_id": 4766433, "code1": "public long fib (long n) {\n    if (n <= 1) return n;\n    else return fib (n - 1) + fib (n - 2);\n\n}\n", "code2": "public int fib (int n) {\n    if (n == 0 || n == 1) return 1;\n    else return fib (n - 1) + fib (n - 2);\n\n}\n"}
{"clone_type": "MT3", "method1_id": 6419344, "method2_id": 9119483, "code1": "public static Matrix transpose (final Matrix input) {\n    final double [] [] transposeMatrix = new double [input.getCols ()] [input.getRows ()];\n    final double [] [] d = input.getData ();\n    for (int r = 0;\n    r < input.getRows (); r ++) {\n        for (int c = 0;\n        c < input.getCols (); c ++) {\n            transposeMatrix [c] [r] = d [r] [c];\n        }\n    }\n    return new Matrix (transposeMatrix);\n}\n", "code2": "public InvariantsMatrix transpose () throws Exception {\n    int [] [] tmpData = new int [width ()] [height ()];\n    for (int i = 0;\n    i < width (); i ++) {\n        for (int j = 0;\n        j < height (); j ++) {\n            tmpData [i] [j] = data [j] [i];\n        }\n    }\n    return new InvariantsMatrix (tmpData);\n}\n"}
{"clone_type": "MT3", "method1_id": 14763206, "method2_id": 23596949, "code1": "public static void copyFromFileToFileUsingNIO (File inputFile, File outputFile) throws FileNotFoundException, IOException {\n    FileChannel inputChannel = new FileInputStream (inputFile).getChannel ();\n    FileChannel outputChannel = new FileOutputStream (outputFile).getChannel ();\n    try {\n        inputChannel.transferTo (0, inputChannel.size (), outputChannel);\n    } catch (IOException e) {\n        throw e;\n    } finally {\n        if (inputChannel != null) inputChannel.close ();\n\n        if (outputChannel != null) outputChannel.close ();\n\n    }\n}\n", "code2": "public static void copyFile (File source, File dest) throws IOException {\n    FileChannel in = null, out = null;\n    try {\n        in = new FileInputStream (source).getChannel ();\n        out = new FileOutputStream (dest).getChannel ();\n        long size = in.size ();\n        MappedByteBuffer buf = in.map (FileChannel.MapMode.READ_ONLY, 0, size);\n        out.write (buf);\n    } finally {\n        if (in != null) in.close ();\n\n        if (out != null) out.close ();\n\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 13771944, "method2_id": 20418573, "code1": "public static String generate (String username, String password) throws PersistenceException {\n    String output = null;\n    try {\n        MessageDigest md = MessageDigest.getInstance (\"SHA-256\");\n        md.reset ();\n        md.update (username.getBytes ());\n        md.update (password.getBytes ());\n        byte [] rawhash = md.digest ();\n        output = byteToBase64 (rawhash);\n    } catch (Exception e) {\n        throw new PersistenceException (\"error, could not generate password\");\n    }\n    return output;\n}\n", "code2": "public static String hashMD5 (String password) {\n    String hashword = null;\n    try {\n        MessageDigest md5 = MessageDigest.getInstance (\"MD5\");\n        md5.update (password.getBytes ());\n        BigInteger hash = new BigInteger (1, md5.digest ());\n        hashword = hash.toString (16);\n    } catch (NoSuchAlgorithmException nsae) {\n    }\n    return hashword;\n}\n"}
{"clone_type": "MT3", "method1_id": 1612068, "method2_id": 13002069, "code1": "public Matrix transpose () {\n    Matrix X = new Matrix (n, m);\n    double [] [] C = X.getArray ();\n    for (int i = 0;\n    i < m; i ++) {\n        for (int j = 0;\n        j < n; j ++) {\n            C [j] [i] = A [i] [j];\n        }\n    }\n    return X;\n}\n", "code2": "private double [] [] transpose (double [] [] in) {\n    double [] [] out = new double [in [0].length] [in.length];\n    for (int r = 0;\n    r < in.length; r ++) {\n        for (int c = 0;\n        c < in [0].length; c ++) {\n            out [c] [r] = in [r] [c];\n        }\n    }\n    return out;\n}\n"}
{"clone_type": "MT3", "method1_id": 10844851, "method2_id": 15730395, "code1": "public static double [] [] transp (double [] [] m1) {\n    int m = m1.length;\n    int n = m1 [0].length;\n    double [] [] ret = new double [n] [m];\n    for (int i = 0;\n    i < m; i ++) {\n        for (int j = 0;\n        j < n; j ++) {\n            ret [j] [i] = m1 [i] [j];\n        }\n    }\n    return ret;\n}\n", "code2": "public static double [] [] calcTranspose (double [] [] mat) {\n    double [] [] transpose = new double [mat [0].length] [mat.length];\n    for (int a = 0;\n    a < transpose.length; a ++) {\n        for (int b = 0;\n        b < transpose [0].length; b ++) {\n            transpose [a] [b] = mat [b] [a];\n        }\n    }\n    return transpose;\n}\n"}
{"clone_type": "MT3", "method1_id": 7082101, "method2_id": 15861394, "code1": "public byte [] computeMD5 (String plainText) throws GException {\n    MessageDigest md = null;\n    try {\n        md = MessageDigest.getInstance (\"MD5\");\n    } catch (NoSuchAlgorithmException ex) {\n        throw new GException (\"The MD5 hash algorithm is not available.\", ex);\n    }\n    try {\n        md.update (plainText.getBytes (\"UTF-8\"));\n    } catch (UnsupportedEncodingException ex) {\n        throw new GException (\"The UTF-8 encoding is not supported.\", ex);\n    }\n    return md.digest ();\n}\n", "code2": "public static String md5 (String string) {\n    MessageDigest md = null;\n    try {\n        md = MessageDigest.getInstance (\"MD5\");\n    } catch (NoSuchAlgorithmException exception) {\n        LOGGER.warn (exception.getMessage ());\n    }\n    byte [] md5hash = new byte [32];\n    try {\n        md.update (string.getBytes (\"iso-8859-1\"), 0, string.length ());\n    } catch (UnsupportedEncodingException exception) {\n        LOGGER.warn (exception.getMessage ());\n    }\n    md5hash = md.digest ();\n    return convertToHex (md5hash);\n}\n"}
{"clone_type": "MT3", "method1_id": 7483038, "method2_id": 20022021, "code1": "@Override\npublic void launchUpdate () {\n    if (getUpdateUrl () != null && Desktop.isDesktopSupported ()) {\n        try {\n            Desktop.getDesktop ().browse (getUpdateUrl ().toURI ());\n        } catch (IOException e) {\n            GroofyLogger.getInstance ().logException (e);\n        } catch (URISyntaxException e) {\n            GroofyLogger.getInstance ().logException (e);\n        }\n    }\n}\n", "code2": "@Override\npublic void mouseClicked (final MouseEvent e) {\n    if (Desktop.isDesktopSupported ()) {\n        final Desktop desktop = Desktop.getDesktop ();\n        try {\n            desktop.browse (new URI (uri));\n        } catch (IOException ex) {\n            Exceptions.printStackTrace (ex);\n        } catch (URISyntaxException ex) {\n            Exceptions.printStackTrace (ex);\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 2801437, "method2_id": 13284020, "code1": "public static String encryptMD5 (String str) {\n    try {\n        MessageDigest md5 = MessageDigest.getInstance (\"MD5\");\n        md5.update (str.getBytes ());\n        byte [] hash = md5.digest ();\n        md5.reset ();\n        return Format.hashToHex (hash);\n    } catch (java.security.NoSuchAlgorithmException nsae0) {\n        return null;\n    }\n}\n", "code2": "public static String getMD5Hash (String in) {\n    StringBuffer result = new StringBuffer (32);\n    try {\n        MessageDigest md5 = MessageDigest.getInstance (\"MD5\");\n        md5.update (in.getBytes ());\n        Formatter f = new Formatter (result);\n        for (byte b : md5.digest ()) {\n            f.format (\"%02x\", b);\n        }\n    } catch (NoSuchAlgorithmException ex) {\n        ex.printStackTrace ();\n    }\n    return result.toString ();\n}\n"}
{"clone_type": "MT3", "method1_id": 4721883, "method2_id": 21885832, "code1": "public void open (File file) {\n    if (Desktop.isDesktopSupported ()) {\n        Desktop desktop = Desktop.getDesktop ();\n        try {\n            desktop.open (file);\n        } catch (IOException e) {\n            logger.getLogger ().log (Level.WARNING, Application.getInstance (GreenTone.class).getContext ().getResourceMap ().getString (\"ErrorMessage.cannotOpenURL\") + \" \" + file.getPath (), e);\n        }\n    }\n}\n", "code2": "private void open (File file) throws IOException {\n    if (Desktop.isDesktopSupported ()) {\n        Desktop desktop = Desktop.getDesktop ();\n        if (desktop.isSupported (Desktop.Action.OPEN)) {\n            desktop.open (file);\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 938406, "method2_id": 3007651, "code1": "public void postMail (String recipients [], String subject, String message, String from) throws MessagingException {\n    boolean debug = false;\n    Properties props = new Properties ();\n    props.put (\"mail.smtp.host\", \"smtp.charter.net\");\n    Session session = Session.getDefaultInstance (props, null);\n    session.setDebug (debug);\n    Message msg = new MimeMessage (session);\n    InternetAddress addressFrom = new InternetAddress (from);\n    msg.setFrom (addressFrom);\n    InternetAddress [] addressTo = new InternetAddress [recipients.length];\n    for (int i = 0;\n    i < recipients.length; i ++) {\n        addressTo [i] = new InternetAddress (recipients [i]);\n    }\n    msg.setRecipients (Message.RecipientType.TO, addressTo);\n    msg.setSubject (subject);\n    msg.setContent (message, \"text/html\");\n    Transport.send (msg);\n}\n", "code2": "public void sendSSLMessage (String recipients [], String subject, String message, String from) throws MessagingException {\n    boolean debug = true;\n    Properties props = new Properties ();\n    props.put (\"mail.smtp.host\", SMTP_HOST_NAME);\n    props.put (\"mail.smtp.auth\", \"true\");\n    props.put (\"mail.debug\", \"true\");\n    props.put (\"mail.smtp.port\", SMTP_PORT);\n    props.put (\"mail.smtp.socketFactory.port\", SMTP_PORT);\n    props.put (\"mail.smtp.socketFactory.class\", SSL_FACTORY);\n    props.put (\"mail.smtp.socketFactory.fallback\", \"false\");\n    props.put (\"mail.smtp.timeout\", \"100000\");\n    Session session = Session.getDefaultInstance (props, new javax.mail.Authenticator () {\n        protected PasswordAuthentication getPasswordAuthentication () {\n            return new PasswordAuthentication (\"davide.lorenzoli@gmail.com\", \"D4v1d3L0r3n50l1\");\n        }}\n\n    );\n    session.setDebug (debug);\n    Message msg = new MimeMessage (session);\n    InternetAddress addressFrom = new InternetAddress (from);\n    msg.setFrom (addressFrom);\n    InternetAddress [] addressTo = new InternetAddress [recipients.length];\n    for (int i = 0;\n    i < recipients.length; i ++) {\n        addressTo [i] = new InternetAddress (recipients [i]);\n    }\n    msg.setRecipients (Message.RecipientType.TO, addressTo);\n    msg.setSubject (subject);\n    msg.setContent (message, \"text/plain\");\n    Transport.send (msg);\n}\n"}
{"clone_type": "MT3", "method1_id": 9485402, "method2_id": 21564809, "code1": "public static void openDonationLink (String uri) throws IOException {\n    if (Desktop.isDesktopSupported ()) {\n        Desktop desktop = Desktop.getDesktop ();\n        URI donationURI;\n        try {\n            donationURI = new URI (uri);\n            desktop.browse (donationURI);\n        } catch (URISyntaxException e) {\n        }\n    }\n}\n", "code2": "private void titelOeffnen () {\n    if (! textarray [Konstanten.FILM_URL_THEMA_NR].getText ().equals (\"\")) {\n        if (Desktop.isDesktopSupported ()) {\n            Desktop d = Desktop.getDesktop ();\n            try {\n                if (d.isSupported (Desktop.Action.BROWSE)) {\n                    d.browse (new URI (textarray [Konstanten.FILM_URL_THEMA_NR].getText ()));\n                }\n            } catch (Exception ex) {\n            }\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 11440870, "method2_id": 21498404, "code1": "public Matrix transpose () {\n    Matrix X = new Matrix (n, m);\n    int [] [] C = X.getArray ();\n    for (int i = 0;\n    i < m; i ++) {\n        for (int j = 0;\n        j < n; j ++) {\n            C [j] [i] = A [i] [j];\n        }\n    }\n    return X;\n}\n", "code2": "public Matrix transpose () {\n    Matrix matrix = new Matrix ();\n    matrix.m = new double [m [0].length] [m.length];\n    for (int i = 0;\n    i < m.length; i ++) {\n        for (int j = 0;\n        j < m [0].length; j ++) {\n            matrix.m [j] [i] = m [i] [j];\n        }\n    }\n    return matrix;\n}\n"}
{"clone_type": "MT3", "method1_id": 5620793, "method2_id": 13994043, "code1": "public static byte [] SHA1byte (String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n    MessageDigest md;\n    md = MessageDigest.getInstance (\"SHA-1\");\n    byte [] sha1hash = new byte [40];\n    md.update (text.getBytes (\"iso-8859-1\"), 0, text.length ());\n    sha1hash = md.digest ();\n    return sha1hash;\n}\n", "code2": "public static String calculateSHA1 (String data, String key) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n    data += key;\n    MessageDigest md;\n    md = MessageDigest.getInstance (\"SHA-1\");\n    byte [] sha1hash = new byte [40];\n    md.update (data.getBytes (\"iso-8859-1\"), 0, data.length ());\n    sha1hash = md.digest ();\n    return convertToHex (sha1hash);\n}\n"}
{"clone_type": "MT3", "method1_id": 2852141, "method2_id": 23147990, "code1": "public static void copyFile (String input, String output) {\n    try {\n        File inputFile = new File (input);\n        File outputFile = new File (output);\n        FileReader in;\n        in = new FileReader (inputFile);\n        FileWriter out = new FileWriter (outputFile);\n        int c;\n        while ((c = in.read ()) != - 1) out.write (c);\n\n        in.close ();\n        out.close ();\n    } catch (Exception e) {\n        e.printStackTrace ();\n    }\n}\n", "code2": "public boolean copy (String file, String target, int tag) {\n    try {\n        File file_in = new File (file);\n        File file_out = new File (target);\n        File parent = file_out.getParentFile ();\n        parent.mkdirs ();\n        FileInputStream in1 = new FileInputStream (file_in);\n        FileOutputStream out1 = new FileOutputStream (file_out);\n        byte [] bytes = new byte [1024];\n        int c;\n        while ((c = in1.read (bytes)) != - 1) out1.write (bytes, 0, c);\n\n        in1.close ();\n        out1.close ();\n        return true;\n    } catch (Exception e) {\n        e.printStackTrace ();\n        System.out.println (\"Error!\");\n        return false;\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 10131427, "method2_id": 11277510, "code1": "public static void copyFile (File in, File out) throws IOException {\n    FileChannel sourceChannel = new FileInputStream (in).getChannel ();\n    FileChannel destinationChannel = new FileOutputStream (out).getChannel ();\n    sourceChannel.transferTo (0, sourceChannel.size (), destinationChannel);\n    sourceChannel.close ();\n    destinationChannel.close ();\n}\n", "code2": "private void channelCopy (File source, File dest) throws IOException {\n    FileChannel srcChannel = new FileInputStream (source).getChannel ();\n    FileChannel dstChannel = new FileOutputStream (dest).getChannel ();\n    try {\n        dstChannel.transferFrom (srcChannel, 0, srcChannel.size ());\n    } finally {\n        srcChannel.close ();\n        dstChannel.close ();\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 10673772, "method2_id": 16540473, "code1": "private File extractResource (String resourceName, File destDir) {\n    File file = new File (destDir, resourceName);\n    InputStream in = getClass ().getResourceAsStream (resourceName);\n    try {\n        FileOutputStream out = FileUtils.openOutputStream (file);\n        try {\n            IOUtils.copy (in, out);\n        } finally {\n            if (out != null) {\n                out.close ();\n            }\n        }\n    } finally {\n        if (in != null) {\n            in.close ();\n        }\n    }\n    return file;\n}\n", "code2": "public static void copyFile (File sourceFile, File destFile) throws IOException {\n    if (! destFile.exists ()) {\n        destFile.createNewFile ();\n    }\n    FileChannel source = null;\n    FileChannel destination = null;\n    try {\n        source = new FileInputStream (sourceFile).getChannel ();\n        destination = new FileOutputStream (destFile).getChannel ();\n        destination.transferFrom (source, 0, source.size ());\n    } finally {\n        if (source != null) {\n            source.close ();\n        }\n        if (destination != null) {\n            destination.close ();\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 16706229, "method2_id": 19045087, "code1": "private void copy (File srouceFile, File destinationFile) throws IOException {\n    FileChannel sourceChannel = new FileInputStream (srouceFile).getChannel ();\n    FileChannel destinationChannel = new FileOutputStream (destinationFile).getChannel ();\n    destinationChannel.transferFrom (sourceChannel, 0, sourceChannel.size ());\n    sourceChannel.close ();\n    destinationChannel.close ();\n}\n", "code2": "public static void copyfile (String src, String dst) throws IOException {\n    dst = new File (dst).getAbsolutePath ();\n    new File (new File (dst).getParent ()).mkdirs ();\n    FileChannel srcChannel = new FileInputStream (src).getChannel ();\n    FileChannel dstChannel = new FileOutputStream (dst).getChannel ();\n    dstChannel.transferFrom (srcChannel, 0, srcChannel.size ());\n    srcChannel.close ();\n    dstChannel.close ();\n}\n"}
{"clone_type": "MT3", "method1_id": 6861489, "method2_id": 18796914, "code1": "public String download (String urlString) {\n    StringBuilder builder = new StringBuilder ();\n    BufferedReader reader = null;\n    try {\n        URL url = new URL (urlString);\n        HttpURLConnection urlConn = (HttpURLConnection) url.openConnection ();\n        reader = new BufferedReader (new InputStreamReader (urlConn.getInputStream ()));\n        String line = null;\n        while ((line = reader.readLine ()) != null) {\n            builder.append (line);\n        }\n    } catch (MalformedURLException e) {\n        Log.e (\"exception\", e.getMessage ());\n    } catch (IOException e) {\n        Log.e (\"exception\", e.getMessage ());\n    } finally {\n        try {\n            reader.close ();\n        } catch (IOException e) {\n            Log.e (\"exception\", e.getMessage ());\n        }\n    }\n    return builder.toString ();\n}\n", "code2": "public String getPloidy (String source) {\n    StringBuilder ploidyHtml = new StringBuilder ();\n    String hyperdiploidyUrl = customParameters.getHyperdiploidyUrl ();\n    String urlString = hyperdiploidyUrl + \"?source=\" + source;\n    URL url = null;\n    try {\n        url = new URL (urlString);\n        BufferedReader in = new BufferedReader (new InputStreamReader (url.openStream ()));\n        String line = \"\";\n        while ((line = in.readLine ()) != null) {\n            ploidyHtml.append (line);\n        }\n    } catch (MalformedURLException e) {\n        e.printStackTrace ();\n    } catch (IOException e) {\n        e.printStackTrace ();\n    }\n    return ploidyHtml.toString ();\n}\n"}
{"clone_type": "MT3", "method1_id": 9346447, "method2_id": 17514790, "code1": "public static double [] [] transposeMatrix (double [] [] vector) {\n    double [] [] tm = new double [vector [0].length] [vector.length];\n    for (int i = 0;\n    i < tm.length; i ++) {\n        for (int j = 0;\n        j < tm [i].length; j ++) {\n            tm [i] [j] = vector [j] [i];\n        }\n    }\n    return tm;\n}\n", "code2": "public final Matrix getTranspose () {\n    double [] [] newData = new double [width_] [height_];\n    for (int row = 0;\n    row < height_; row ++) {\n        for (int col = 0;\n        col < width_; col ++) {\n            newData [col] [row] = data_ [row] [col];\n        }\n    }\n    return new Matrix (newData);\n}\n"}
{"clone_type": "MT3", "method1_id": 8183448, "method2_id": 14772409, "code1": "private void desktopBrowse (String uri) {\n    if (Desktop.isDesktopSupported ()) {\n        try {\n            Desktop.getDesktop ().browse (new URI (uri));\n        } catch (URISyntaxException urise) {\n            logger.log (Level.WARNING, \"Incorrect URI\", urise);\n        } catch (IOException ioe) {\n            logger.log (Level.WARNING, \"General IO Error\", ioe);\n        }\n    }\n}\n", "code2": "public static void open (URI uri) {\n    if (Desktop.isDesktopSupported ()) {\n        Desktop desktop = Desktop.getDesktop ();\n        try {\n            desktop.browse (uri);\n        } catch (IOException e) {\n        }\n    } else {\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 1799462, "method2_id": 3127217, "code1": "public static boolean deleteDirectory (File path) {\n    if (path.exists ()) {\n        File [] files = path.listFiles ();\n        for (int i = 0;\n        i < files.length; i ++) {\n            if (files [i].isDirectory ()) {\n                deleteDirectory (files [i]);\n            } else {\n                files [i].delete ();\n            }\n        }\n    }\n    return (path.delete ());\n}\n", "code2": "public static void deleteContentsOfDirectory (File f) {\n    File l [] = f.listFiles ();\n    for (int i = 0;\n    i < l.length; i ++) {\n        if (l [i].isDirectory ()) {\n            deleteContentsOfDirectory (l [i]);\n            l [i].delete ();\n        } else l [i].delete ();\n\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 13614426, "method2_id": 14321946, "code1": "public Matrix transpose () {\n    Matrix X = new Matrix (n, m);\n    double [] [] C = X.getArray ();\n    for (int i = 0;\n    i < m; i ++) {\n        for (int j = 0;\n        j < n; j ++) {\n            C [j] [i] = A [i] [j];\n        }\n    }\n    return X;\n}\n", "code2": "public void transpose () {\n    for (int i = 0;\n    i < rows; i ++) {\n        for (int j = 0;\n        j < i; j ++) {\n            int t = flmat [i] [j];\n            flmat [i] [j] = flmat [j] [i];\n            flmat [j] [i] = t;\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 3058377, "method2_id": 16529080, "code1": "public boolean makeBackupToZip (String [] filenames, String destinationdir, String zipFileName) {\n    boolean success = false;\n    destinationdir = destinationdir + System.getProperty (\"file.separator\");\n    System.out.println (destinationdir);\n    byte [] buf = new byte [1024];\n    try {\n        String outFilename = zipFileName;\n        ZipOutputStream out = new ZipOutputStream (new FileOutputStream (destinationdir + outFilename));\n        for (int i = 0;\n        i < filenames.length; i ++) {\n            if (filenames [i] != null) {\n                FileInputStream in = new FileInputStream (filenames [i]);\n                out.putNextEntry (new ZipEntry (filenames [i].substring (filenames [i].lastIndexOf (System.getProperty (\"file.separator\")), filenames [i].length ())));\n                int len;\n                while ((len = in.read (buf)) > 0) {\n                    out.write (buf, 0, len);\n                }\n                out.closeEntry ();\n                in.close ();\n            }\n        }\n        out.close ();\n    } catch (IOException e) {\n        e.printStackTrace ();\n    }\n    return success;\n}\n", "code2": "public static boolean zip (File [] filesToZip, File zipFile) {\n    byte [] buf = new byte [2048];\n    try {\n        ZipOutputStream out = new ZipOutputStream (new FileOutputStream (zipFile));\n        for (int i = 0;\n        i < filesToZip.length; i ++) {\n            FileInputStream in = new FileInputStream (filesToZip [i]);\n            out.putNextEntry (new ZipEntry (filesToZip [i].getName ()));\n            int len;\n            while ((len = in.read (buf)) != - 1) {\n                out.write (buf, 0, len);\n            }\n            out.closeEntry ();\n            in.close ();\n        }\n        out.close ();\n    } catch (IOException e) {\n        System.err.println (\"Can't zip()\");\n        e.printStackTrace ();\n        return false;\n    }\n    return true;\n}\n"}
{"clone_type": "MT3", "method1_id": 94804, "method2_id": 117784, "code1": "public Connection getSQLConnection () throws Exception {\n    Class.forName (\"sun.jdbc.odbc.JdbcOdbcDriver\");\n    String url = \"jdbc:odbc:bbs\";\n    Connection con = DriverManager.getConnection (url);\n    System.out.println (\"MySQL ODBC \ufffd\ufffd\ufffd\u0534\ufffd\ufffd\ufffd\u04f3\u0279\ufffd...\");\n    return con;\n}\n", "code2": "public static Connection getOpusDBConnect (HttpServletRequest request) throws SQLException {\n    DriverManager.registerDriver (new oracle.jdbc.OracleDriver ());\n    String connStr = \"jdbc:oracle:thin:jdbf/jdbf@msk02aldev2s:1521:TEST032\";\n    Connection conn = DriverManager.getConnection (connStr);\n    return conn;\n}\n"}
{"clone_type": "MT3", "method1_id": 3031195, "method2_id": 19045549, "code1": "@Override\npublic void playSpotifySong (Track track) {\n    if (Desktop.isDesktopSupported ()) {\n        try {\n            Desktop.getDesktop ().browse (new URI (track.getId ()));\n        } catch (IOException e) {\n            GroofyLogger.getInstance ().logException (e);\n        } catch (URISyntaxException e) {\n            GroofyLogger.getInstance ().logException (e);\n        }\n    }\n}\n", "code2": "private static void open (URI uri) {\n    if (Desktop.isDesktopSupported ()) {\n        Desktop desktop = Desktop.getDesktop ();\n        try {\n            desktop.browse (uri);\n        } catch (IOException e) {\n        }\n    } else {\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 1958820, "method2_id": 11025050, "code1": "@SuppressWarnings(\"unchecked\")\npublic static final < T > T [] copy (final T [] array) {\n    final T [] newArray = (T []) Array.newInstance (array.getClass ().getComponentType (), array.length);\n    System.arraycopy (array, 0, newArray, 0, array.length);\n    return newArray;\n}\n", "code2": "@SuppressWarnings(\"unchecked\")\npublic static < T > T [] prependToArray (T [] array, T el) {\n    T [] newArray = (T []) Array.newInstance (array.getClass ().getComponentType (), array.length + 1);\n    System.arraycopy (array, 0, newArray, 1, array.length);\n    newArray [0] = el;\n    return newArray;\n}\n"}
{"clone_type": "MT3", "method1_id": 1415765, "method2_id": 13940356, "code1": "public static String getMD5 (String _pwd) {\n    try {\n        MessageDigest md = MessageDigest.getInstance (\"MD5\");\n        md.update (_pwd.getBytes ());\n        return toHexadecimal (new String (md.digest ()).getBytes ());\n    } catch (NoSuchAlgorithmException x) {\n        x.printStackTrace ();\n        return \"\";\n    }\n}\n", "code2": "public static String md5 (String s) {\n    try {\n        MessageDigest digest = MessageDigest.getInstance (\"MD5\");\n        digest.update (s.getBytes ());\n        byte [] md5sum = digest.digest ();\n        BigInteger bigInt = new BigInteger (1, md5sum);\n        String output = bigInt.toString (16);\n        return prepad (output, 32, '0');\n    } catch (NoSuchAlgorithmException e) {\n        System.err.println (\"No MD5 algorithm. we are sunk.\");\n        return s;\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 3008655, "method2_id": 20601757, "code1": "public static void copyFile (File srcFile, File desFile) throws IOException {\n    AssertUtility.notNull (srcFile);\n    AssertUtility.notNull (desFile);\n    FileInputStream fis = new FileInputStream (srcFile);\n    FileOutputStream fos = new FileOutputStream (desFile);\n    try {\n        FileChannel srcChannel = fis.getChannel ();\n        FileChannel dstChannel = fos.getChannel ();\n        dstChannel.transferFrom (srcChannel, 0, srcChannel.size ());\n        srcChannel.close ();\n        dstChannel.close ();\n    } finally {\n        fis.close ();\n        fos.close ();\n    }\n}\n", "code2": "public static File copyFileAs (String path, String newName) {\n    File src = new File (path);\n    File dest = new File (newName);\n    try {\n        if (! dest.exists ()) {\n            dest.createNewFile ();\n        }\n        FileChannel source = new FileInputStream (src).getChannel ();\n        FileChannel destination = new FileOutputStream (dest).getChannel ();\n        destination.transferFrom (source, 0, source.size ());\n        source.close ();\n        destination.close ();\n    } catch (FileNotFoundException e) {\n        e.printStackTrace ();\n    } catch (IOException e) {\n        e.printStackTrace ();\n    }\n    return dest;\n}\n"}
{"clone_type": "MT3", "method1_id": 5086587, "method2_id": 17857284, "code1": "public static void copyFromTo (String src, String des) {\n    staticprintln (\"Copying:\\\"\" + src + \"\\\"\\nto:\\\"\" + des + \"\\\"\");\n    try {\n        FileChannel srcChannel = new FileInputStream (src).getChannel ();\n        FileChannel dstChannel = new FileOutputStream (des).getChannel ();\n        dstChannel.transferFrom (srcChannel, 0, srcChannel.size ());\n        srcChannel.close ();\n        dstChannel.close ();\n    } catch (IOException e) {\n    }\n}\n", "code2": "public static void copyFile (File source, File destination) throws IOException {\n    FileChannel srcChannel = new FileInputStream (source).getChannel ();\n    FileChannel dstChannel = new FileOutputStream (destination).getChannel ();\n    dstChannel.transferFrom (srcChannel, 0, srcChannel.size ());\n    srcChannel.close ();\n    dstChannel.close ();\n}\n"}
{"clone_type": "MT3", "method1_id": 2069219, "method2_id": 23053699, "code1": "public static void copieFichier (File fichier1, File fichier2) {\n    FileChannel in = null;\n    FileChannel out = null;\n    try {\n        in = new FileInputStream (fichier1).getChannel ();\n        out = new FileOutputStream (fichier2).getChannel ();\n        in.transferTo (0, in.size (), out);\n    } catch (Exception e) {\n        e.printStackTrace ();\n    } finally {\n        if (in != null) {\n            try {\n                in.close ();\n            } catch (IOException e) {\n            }\n        }\n        if (out != null) {\n            try {\n                out.close ();\n            } catch (IOException e) {\n            }\n        }\n    }\n}\n", "code2": "public void copy (File from, String to) throws SystemException {\n    assert from != null;\n    File dst = new File (folder, to);\n    dst.getParentFile ().mkdirs ();\n    FileChannel in = null;\n    FileChannel out = null;\n    try {\n        if (! dst.exists ()) dst.createNewFile ();\n\n        in = new FileInputStream (from).getChannel ();\n        out = new FileOutputStream (dst).getChannel ();\n        in.transferTo (0, in.size (), out);\n    } catch (IOException e) {\n        throw new SystemException (e);\n    } finally {\n        try {\n            if (in != null) in.close ();\n\n        } catch (Exception e1) {\n        }\n        try {\n            if (out != null) out.close ();\n\n        } catch (Exception e1) {\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 19134229, "method2_id": 20103762, "code1": "private void copyFile (final String sourceFileName, final File path) throws IOException {\n    final File source = new File (sourceFileName);\n    final File destination = new File (path, source.getName ());\n    FileChannel srcChannel = null;\n    FileChannel dstChannel = null;\n    try {\n        srcChannel = new FileInputStream (source).getChannel ();\n        dstChannel = new FileOutputStream (destination).getChannel ();\n        dstChannel.transferFrom (srcChannel, 0, srcChannel.size ());\n    } finally {\n        try {\n            if (dstChannel != null) {\n                dstChannel.close ();\n            }\n        } catch (Exception exception) {\n        }\n        try {\n            if (srcChannel != null) {\n                srcChannel.close ();\n            }\n        } catch (Exception exception) {\n        }\n    }\n}\n", "code2": "public boolean backupLastAuditSchema (File lastAuditSchema) {\n    boolean isBkupFileOK = false;\n    String writeTimestamp = DateFormatUtils.format (new java.util.Date (), configFile.getTimestampPattern ());\n    File target = new File (configFile.getAuditSchemaFileDir () + File.separator + configFile.getAuditSchemaFileName () + \".bkup_\" + writeTimestamp);\n    FileChannel sourceChannel = null;\n    FileChannel targetChannel = null;\n    try {\n        sourceChannel = new FileInputStream (lastAuditSchema).getChannel ();\n        targetChannel = new FileOutputStream (target).getChannel ();\n        targetChannel.transferFrom (sourceChannel, 0, sourceChannel.size ());\n    } catch (IOException e) {\n        logger.log (Level.SEVERE, \"IO exception occurred while copying file\", e);\n    } finally {\n        if ((target != null) && (target.exists ()) && (target.length () > 0)) {\n            isBkupFileOK = true;\n        }\n        try {\n            if (sourceChannel != null) {\n                sourceChannel.close ();\n            }\n            if (targetChannel != null) {\n                targetChannel.close ();\n            }\n        } catch (IOException e) {\n            logger.info (\"closing channels failed\");\n        }\n    }\n    return isBkupFileOK;\n}\n"}
{"clone_type": "MT3", "method1_id": 3389835, "method2_id": 23677214, "code1": "public static void delete (File f) throws IOException {\n    if (f.isDirectory ()) {\n        for (File c : f.listFiles ()) delete (c);\n\n    }\n    if (! f.delete ()) throw new FileNotFoundException (\"Failed to delete file: \" + f);\n\n}\n", "code2": "public static void deleteRecursively1 (File file) {\n    if (file.isDirectory ()) {\n        for (File f : file.listFiles ()) deleteRecursively1 (f);\n\n    }\n    file.delete ();\n}\n"}
{"clone_type": "MT3", "method1_id": 1841532, "method2_id": 2535621, "code1": "public static void recursiveDeleteDirectory (File cacheDir) {\n    if (cacheDir.isDirectory ()) {\n        File [] files = cacheDir.listFiles ();\n        for (int i = 0;\n        i < files.length; i ++) {\n            File file = files [i];\n            recursiveDeleteDirectory (file);\n        }\n    } else {\n        cacheDir.delete ();\n    }\n}\n", "code2": "private void deleteOnExit (File tempFile) {\n    tempFile.deleteOnExit ();\n    if (tempFile.isDirectory ()) {\n        File [] files = tempFile.listFiles ();\n        for (int i = 0;\n        i < files.length; i ++) {\n            deleteOnExit (files [i]);\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 15034107, "method2_id": 19549489, "code1": "private static void copyFile (File in, File out) throws Exception {\n    FileChannel sourceChannel = new FileInputStream (in).getChannel ();\n    FileChannel destinationChannel = new FileOutputStream (out).getChannel ();\n    sourceChannel.transferTo (0, sourceChannel.size (), destinationChannel);\n    sourceChannel.close ();\n    destinationChannel.close ();\n}\n", "code2": "public static void copy (File sourceFile, File destinationFile) throws IOException {\n    FileChannel sourceFileChannel = (new FileInputStream (sourceFile)).getChannel ();\n    FileChannel destinationFileChannel = (new FileOutputStream (destinationFile)).getChannel ();\n    sourceFileChannel.transferTo (0, sourceFile.length (), destinationFileChannel);\n    sourceFileChannel.close ();\n    destinationFileChannel.close ();\n}\n"}
{"clone_type": "MT3", "method1_id": 4721883, "method2_id": 7197833, "code1": "public void open (File file) {\n    if (Desktop.isDesktopSupported ()) {\n        Desktop desktop = Desktop.getDesktop ();\n        try {\n            desktop.open (file);\n        } catch (IOException e) {\n            logger.getLogger ().log (Level.WARNING, Application.getInstance (GreenTone.class).getContext ().getResourceMap ().getString (\"ErrorMessage.cannotOpenURL\") + \" \" + file.getPath (), e);\n        }\n    }\n}\n", "code2": "private void openReport (File file) {\n    assert file != null;\n    if (Desktop.isDesktopSupported ()) {\n        Desktop desktop = Desktop.getDesktop ();\n        try {\n            desktop.open (file);\n        } catch (Exception e) {\n            e.printStackTrace ();\n            timeSlotTracker.errorLog (\"Error during opening document: \" + e);\n            timeSlotTracker.errorLog (e);\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 16419225, "method2_id": 19274388, "code1": "public static String encrypt (String algorithm, String str) {\n    try {\n        MessageDigest md = MessageDigest.getInstance (algorithm);\n        md.update (str.getBytes ());\n        StringBuffer sb = new StringBuffer ();\n        byte [] bytes = md.digest ();\n        for (int i = 0;\n        i < bytes.length; i ++) {\n            int b = bytes [i] & 0xFF;\n            if (b < 0x10) sb.append ('0');\n\n            sb.append (Integer.toHexString (b));\n        }\n        return sb.toString ();\n    } catch (Exception e) {\n        return \"\";\n    }\n}\n", "code2": "public static String generateHash (String string, String algoritmo) {\n    try {\n        MessageDigest md = MessageDigest.getInstance (algoritmo);\n        md.update (string.getBytes ());\n        byte [] result = md.digest ();\n        int firstPart;\n        int lastPart;\n        StringBuilder sBuilder = new StringBuilder ();\n        for (int i = 0;\n        i < result.length; i ++) {\n            firstPart = ((result [i]>> 4) & 0xf) << 4;\n            lastPart = result [i] & 0xf;\n            if (firstPart == 0) sBuilder.append (\"0\");\n\n            sBuilder.append (Integer.toHexString (firstPart | lastPart));\n        }\n        return sBuilder.toString ();\n    } catch (NoSuchAlgorithmException ex) {\n        return null;\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 16063556, "method2_id": 21354223, "code1": "public static String md (String passwd) {\n    MessageDigest md5 = null;\n    String digest = passwd;\n    try {\n        md5 = MessageDigest.getInstance (\"MD5\");\n        md5.update (passwd.getBytes ());\n        byte [] digestData = md5.digest ();\n        digest = byteArrayToHex (digestData);\n    } catch (NoSuchAlgorithmException e) {\n        LOG.warn (\"MD5 not supported. Using plain string as password!\");\n    } catch (Exception e) {\n        LOG.warn (\"Digest creation failed. Using plain string as password!\");\n    }\n    return digest;\n}\n", "code2": "public String kodetu (String testusoila) {\n    MessageDigest md = null;\n    try {\n        md = MessageDigest.getInstance (\"SHA\");\n        md.update (testusoila.getBytes (\"UTF-8\"));\n    } catch (NoSuchAlgorithmException e) {\n        new MezuLeiho (\"Ez da zifraketa algoritmoa aurkitu\", \"Ados\", \"Zifraketa Arazoa\", JOptionPane.ERROR_MESSAGE);\n        e.printStackTrace ();\n    } catch (UnsupportedEncodingException e) {\n        new MezuLeiho (\"Errorea kodetzerakoan\", \"Ados\", \"Kodeketa Errorea\", JOptionPane.ERROR_MESSAGE);\n        e.printStackTrace ();\n    }\n    byte raw [] = md.digest ();\n    String hash = (new BASE64Encoder ()).encode (raw);\n    return hash;\n}\n"}
{"clone_type": "MT3", "method1_id": 13891080, "method2_id": 23058336, "code1": "public static void copyFile (File srcFile, File destFile) throws IOException {\n    logger.debug (\"copyFile(srcFile={}, destFile={}) - start\", srcFile, destFile);\n    FileChannel srcChannel = new FileInputStream (srcFile).getChannel ();\n    FileChannel dstChannel = new FileOutputStream (destFile).getChannel ();\n    try {\n        dstChannel.transferFrom (srcChannel, 0, srcChannel.size ());\n    } finally {\n        srcChannel.close ();\n        dstChannel.close ();\n    }\n}\n", "code2": "public static void copyFile (File in, File out) throws Exception {\n    FileChannel sourceChannel = new FileInputStream (in).getChannel ();\n    FileChannel destinationChannel = new FileOutputStream (out).getChannel ();\n    sourceChannel.transferTo (0, sourceChannel.size (), destinationChannel);\n    sourceChannel.close ();\n    destinationChannel.close ();\n}\n"}
{"clone_type": "MT3", "method1_id": 9066291, "method2_id": 17630905, "code1": "void sortIds (int a []) {\n    ExecutionTimer t = new ExecutionTimer ();\n    t.start ();\n    for (int i = a.length;\n    -- i >= 0;) {\n        for (int j = 0;\n        j < i; j ++) {\n            if (a [j] > a [j + 1]) {\n                int T = a [j];\n                a [j] = a [j + 1];\n                a [j + 1] = T;\n            }\n        }\n    }\n    t.end ();\n    TimerRecordFile timerFile = new TimerRecordFile (\"sort\", \"BufferSorting\", \"sortIds\", t.duration ());\n}\n", "code2": "public static int [] sortAscending (int input []) {\n    int [] order = new int [input.length];\n    for (int i = 0;\n    i < order.length; i ++) order [i] = i;\n\n    for (int i = input.length;\n    -- i >= 0;) {\n        for (int j = 0;\n        j < i; j ++) {\n            if (input [j] > input [j + 1]) {\n                int mem = input [j];\n                input [j] = input [j + 1];\n                input [j + 1] = mem;\n                int id = order [j];\n                order [j] = order [j + 1];\n                order [j + 1] = id;\n            }\n        }\n    }\n    return order;\n}\n"}
{"clone_type": "MT3", "method1_id": 3584277, "method2_id": 3613198, "code1": "public static int copyFile (File src, File dest) throws IOException {\n    FileChannel in = null, out = null;\n    try {\n        in = new FileInputStream (src).getChannel ();\n        out = new FileOutputStream (dest).getChannel ();\n        in.transferTo (0, in.size (), out);\n    } finally {\n        if (in != null) in.close ();\n\n        if (out != null) out.close ();\n\n    }\n    return 1;\n}\n", "code2": "public static void copyFile (File in, File out) throws IOException {\n    FileChannel inChannel = new FileInputStream (in).getChannel ();\n    FileChannel outChannel = new FileOutputStream (out).getChannel ();\n    try {\n        inChannel.transferTo (0, inChannel.size (), outChannel);\n    } catch (IOException e) {\n        throw e;\n    } finally {\n        if (inChannel != null) inChannel.close ();\n\n        if (outChannel != null) outChannel.close ();\n\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 1022820, "method2_id": 11237136, "code1": "public static final String computeHash (String stringToCompile) {\n    String retVal = null;\n    try {\n        MessageDigest md5 = MessageDigest.getInstance (\"MD5\");\n        md5.reset ();\n        md5.update (stringToCompile.getBytes ());\n        byte [] result = md5.digest ();\n        StringBuffer hexString = new StringBuffer ();\n        for (int i = 0;\n        i < result.length; i ++) {\n            hexString.append (Integer.toHexString (0xFF & result [i]));\n        }\n        retVal = hexString.toString ();\n        if (log.isDebugEnabled ()) log.debug (\"MD5 hash for \\\"\" + stringToCompile + \"\\\" is: \" + retVal);\n\n    } catch (Exception exe) {\n        log.error (exe.getMessage (), exe);\n    }\n    return retVal;\n}\n", "code2": "public String hash (String senha) {\n    String result = \"\";\n    try {\n        MessageDigest md = MessageDigest.getInstance (\"MD5\");\n        md.update (senha.getBytes ());\n        byte [] hashMd5 = md.digest ();\n        for (int i = 0;\n        i < hashMd5.length; i ++) result += Integer.toHexString ((((hashMd5 [i]>> 4) & 0xf) << 4) | (hashMd5 [i] & 0xf));\n\n    } catch (NoSuchAlgorithmException ex) {\n        Logger.getInstancia ().log (TipoLog.ERRO, ex);\n    }\n    return result;\n}\n"}
{"clone_type": "MT3", "method1_id": 7480197, "method2_id": 23402244, "code1": "public static int simpleUpdate (String query) throws SQLException {\n    Connection conn = null;\n    Statement st = null;\n    try {\n        conn = dataSource.getConnection ();\n        st = conn.createStatement ();\n        int res = st.executeUpdate (query);\n        conn.commit ();\n        return res;\n    } catch (SQLException e) {\n        try {\n            conn.rollback ();\n        } catch (Exception e1) {\n        }\n        throw e;\n    } finally {\n        try {\n            st.close ();\n        } catch (Exception e) {\n        }\n        try {\n            conn.close ();\n        } catch (Exception e) {\n        }\n    }\n}\n", "code2": "public boolean update (int idTorneo, torneo torneoModificado) {\n    int intResult = 0;\n    String sql = \"UPDATE torneo \" + \"SET nombreTorneo = ?, ciudad = ?, fechaInicio = ?, fechaFinal = ?, \" + \" organizador = ? \" + \" WHERE idTorneo = \" + idTorneo;\n    try {\n        connection = conexionBD.getConnection ();\n        connection.setAutoCommit (false);\n        ps = connection.prepareStatement (sql);\n        populatePreparedStatement2 (torneoModificado);\n        intResult = ps.executeUpdate ();\n        connection.commit ();\n    } catch (SQLException ex) {\n        ex.printStackTrace ();\n        try {\n            connection.rollback ();\n        } catch (SQLException exe) {\n            exe.printStackTrace ();\n        }\n    } finally {\n        conexionBD.close (ps);\n        conexionBD.close (connection);\n    }\n    return (intResult > 0);\n}\n"}
{"clone_type": "MT3", "method1_id": 10265164, "method2_id": 10288282, "code1": "public String getLatestVersion (String website) {\n    String latestVersion = \"\";\n    try {\n        URL url = new URL (website + \"/version\");\n        BufferedReader bufferedReader = new BufferedReader (new InputStreamReader (url.openStream ()));\n        String string;\n        while ((string = bufferedReader.readLine ()) != null) {\n            latestVersion = string;\n        }\n        bufferedReader.close ();\n    } catch (MalformedURLException e) {\n        e.printStackTrace ();\n    } catch (IOException e) {\n    }\n    return latestVersion;\n}\n", "code2": "public String getMarketInfo () {\n    try {\n        URL url = new URL (\"http://api.eve-central.com/api/evemon\");\n        BufferedReader s = new BufferedReader (new InputStreamReader (url.openStream ()));\n        String line = \"\";\n        String xml = \"\";\n        while ((line = s.readLine ()) != null) {\n            xml += line;\n        }\n        return xml;\n    } catch (IOException ex) {\n        ex.printStackTrace ();\n    }\n    return null;\n}\n"}
{"clone_type": "MT3", "method1_id": 3660402, "method2_id": 19210936, "code1": "public void importCertFile (File file) throws IOException {\n    File kd;\n    File cd;\n    synchronized (this) {\n        kd = keysDir;\n        cd = certsDir;\n    }\n    if (! cd.isDirectory ()) {\n        kd.mkdirs ();\n        cd.mkdirs ();\n    }\n    String newName = file.getName ();\n    File dest = new File (cd, newName);\n    FileChannel sourceChannel = null;\n    FileChannel destinationChannel = null;\n    try {\n        sourceChannel = new FileInputStream (file).getChannel ();\n        destinationChannel = new FileOutputStream (dest).getChannel ();\n        sourceChannel.transferTo (0, sourceChannel.size (), destinationChannel);\n    } finally {\n        if (sourceChannel != null) {\n            try {\n                sourceChannel.close ();\n            } catch (IOException e) {\n            }\n        }\n        if (destinationChannel != null) {\n            try {\n                destinationChannel.close ();\n            } catch (IOException e) {\n            }\n        }\n    }\n}\n", "code2": "private static void copierScriptChargement (File webInfDir, String initialDataChoice) {\n    File chargementInitialDir = new File (webInfDir, \"chargementInitial\");\n    File fichierChargement = new File (chargementInitialDir, \"ScriptChargementInitial.sql\");\n    File fichierChargementAll = new File (chargementInitialDir, \"ScriptChargementInitial-All.sql\");\n    File fichierChargementTypesDocument = new File (chargementInitialDir, \"ScriptChargementInitial-TypesDocument.sql\");\n    File fichierChargementVide = new File (chargementInitialDir, \"ScriptChargementInitial-Vide.sql\");\n    if (fichierChargement.exists ()) {\n        fichierChargement.delete ();\n    }\n    File fichierUtilise = null;\n    if (\"all\".equals (initialDataChoice)) {\n        fichierUtilise = fichierChargementAll;\n    } else if (\"typesDocument\".equals (initialDataChoice)) {\n        fichierUtilise = fichierChargementTypesDocument;\n    } else if (\"empty\".equals (initialDataChoice)) {\n        fichierUtilise = fichierChargementVide;\n    }\n\n    if (fichierUtilise != null && fichierUtilise.exists ()) {\n        FileChannel source = null;\n        FileChannel destination = null;\n        try {\n            source = new FileInputStream (fichierUtilise).getChannel ();\n            destination = new FileOutputStream (fichierChargement).getChannel ();\n            destination.transferFrom (source, 0, source.size ());\n        } catch (Exception e) {\n            throw new RuntimeException (e);\n        } finally {\n            if (source != null) {\n                try {\n                    source.close ();\n                } catch (Exception e) {\n                    e.printStackTrace ();\n                }\n            }\n            if (destination != null) {\n                try {\n                    destination.close ();\n                } catch (Exception e) {\n                    e.printStackTrace ();\n                }\n            }\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 4511510, "method2_id": 15982225, "code1": "public static String cryptoSHA (String _strSrc) {\n    try {\n        BASE64Encoder encoder = new BASE64Encoder ();\n        MessageDigest sha = MessageDigest.getInstance (\"SHA\");\n        sha.update (_strSrc.getBytes ());\n        byte [] buffer = sha.digest ();\n        return encoder.encode (buffer);\n    } catch (Exception err) {\n        System.out.println (err);\n    }\n    return \"\";\n}\n", "code2": "private static String getDigest (String srcStr, String alg) {\n    Assert.notNull (srcStr);\n    Assert.notNull (alg);\n    try {\n        MessageDigest alga = MessageDigest.getInstance (alg);\n        alga.update (srcStr.getBytes ());\n        byte [] digesta = alga.digest ();\n        return byte2hex (digesta);\n    } catch (Exception e) {\n        throw new RuntimeException (e);\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 3870229, "method2_id": 14631177, "code1": "public void actionPerformed (ActionEvent evt) {\n    if (Desktop.isDesktopSupported ()) {\n        try {\n            Desktop.getDesktop ().browse (new URI (HOMEPAGE));\n        } catch (Exception e) {\n            e.printStackTrace ();\n        }\n    }\n}\n", "code2": "private void open (URI uri) {\n    if (Desktop.isDesktopSupported ()) {\n        Desktop desktop = Desktop.getDesktop ();\n        try {\n            desktop.browse (uri);\n        } catch (IOException exc) {\n            feedback.registerBug (\"IOException occurred opening a link in the browser.\", exc);\n        }\n    } else {\n        feedback.registerBug (\"Desktop is not supported, cannot open browser to show link!\");\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 4470629, "method2_id": 15357254, "code1": "public static void symmetrizeComponents (double [] [] components) {\n    for (int i = 0;\n    i < components.length; i ++) {\n        for (int j = i + 1;\n        j < components.length; j ++) {\n            components [i] [j] += components [j] [i];\n            components [i] [j] *= 0.5;\n            components [j] [i] = components [i] [j];\n        }\n    }\n}\n", "code2": "public static double [] [] getCorrMatrix (Gene [] gene) {\n    double [] [] c = new double [gene.length] [gene.length];\n    for (int i = 0;\n    i < c.length - 1; i ++) {\n        for (int j = i + 1;\n        j < c.length; j ++) {\n            c [i] [j] = Pearson.calcCorrelation (gene [i].value, gene [j].value);\n            c [j] [i] = c [i] [j];\n        }\n    }\n    return c;\n}\n"}
{"clone_type": "MT3", "method1_id": 16544386, "method2_id": 16556716, "code1": "public static String getEncodedHex (String text) {\n    MessageDigest md = null;\n    String encodedString = null;\n    try {\n        md = MessageDigest.getInstance (\"MD5\");\n        md.update (text.getBytes ());\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace ();\n    }\n    Hex hex = new Hex ();\n    encodedString = new String (hex.encode (md.digest ()));\n    md.reset ();\n    return encodedString;\n}\n", "code2": "public static String getSSHADigest (String password, String salt) {\n    String digest = null;\n    MessageDigest sha = null;\n    try {\n        sha = MessageDigest.getInstance (\"SHA-1\");\n        sha.reset ();\n        sha.update (password.getBytes ());\n        sha.update (salt.getBytes ());\n        byte [] pwhash = sha.digest ();\n        digest = \"{SSHA}\" + new String (Base64.encode (concatenate (pwhash, salt.getBytes ())));\n    } catch (NoSuchAlgorithmException nsae) {\n        CofaxToolsUtil.log (\"Algorithme SHA-1 non supporte a la creation du hashage\" + nsae + id);\n    }\n    return digest;\n}\n"}
{"clone_type": "MT3", "method1_id": 12473411, "method2_id": 16706229, "code1": "private static void copyImage (String srcImg, String destImg) {\n    try {\n        FileChannel srcChannel = new FileInputStream (srcImg).getChannel ();\n        FileChannel dstChannel = new FileOutputStream (destImg).getChannel ();\n        dstChannel.transferFrom (srcChannel, 0, srcChannel.size ());\n        srcChannel.close ();\n        dstChannel.close ();\n    } catch (Exception e) {\n        e.printStackTrace ();\n    }\n}\n", "code2": "private void copy (File srouceFile, File destinationFile) throws IOException {\n    FileChannel sourceChannel = new FileInputStream (srouceFile).getChannel ();\n    FileChannel destinationChannel = new FileOutputStream (destinationFile).getChannel ();\n    destinationChannel.transferFrom (sourceChannel, 0, sourceChannel.size ());\n    sourceChannel.close ();\n    destinationChannel.close ();\n}\n"}
{"clone_type": "MT3", "method1_id": 151792, "method2_id": 23677139, "code1": "public void bubblesort (String filenames []) {\n    for (int i = filenames.length - 1;\n    i > 0; i --) {\n        for (int j = 0;\n        j < i; j ++) {\n            String temp;\n            if (filenames [j].compareTo (filenames [j + 1]) > 0) {\n                temp = filenames [j];\n                filenames [j] = filenames [j + 1];\n                filenames [j + 1] = temp;\n            }\n        }\n    }\n}\n", "code2": "public static void BubbleSortLong1 (long [] num) {\n    boolean flag = true;\n    long temp;\n    while (flag) {\n        flag = false;\n        for (int j = 0;\n        j < num.length - 1; j ++) {\n            if (num [j] > num [j + 1]) {\n                temp = num [j];\n                num [j] = num [j + 1];\n                num [j + 1] = temp;\n                flag = true;\n            }\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 2699043, "method2_id": 18306140, "code1": "public Matrix transpose () {\n    Matrix result = new Matrix (height, width);\n    for (int i = 0;\n    i < height; i ++) {\n        for (int j = 0;\n        j < width; j ++) {\n            result.elements [i] [j] = elements [j] [i];\n        }\n    }\n    return result;\n}\n", "code2": "public RealSquareMatrix copyUpperToLower () {\n    for (int i = 0;\n    i < cols - 1; i ++) {\n        for (int j = i + 1;\n        j < cols; j ++) {\n            flmat [j] [i] = flmat [i] [j];\n        }\n    }\n    return this;\n}\n"}
{"clone_type": "MT3", "method1_id": 12171653, "method2_id": 20762045, "code1": "public static double [] [] invertMatrix (double [] [] matrix) {\n    int firstDimentionOfResultMatrix = matrix [0].length;\n    int secondDimentionOfResultMatrix = matrix.length;\n    double [] [] resultMatrix = new double [firstDimentionOfResultMatrix] [secondDimentionOfResultMatrix];\n    for (int i = 0;\n    i < matrix.length; i ++) {\n        for (int j = 0;\n        j < matrix [0].length; j ++) {\n            resultMatrix [j] [i] = matrix [i] [j];\n        }\n    }\n    return resultMatrix;\n}\n", "code2": "public Matrix transpose () {\n    Matrix X = new Matrix (n, m);\n    double [] [] C = X.getArray ();\n    for (int i = 0;\n    i < m; i ++) {\n        for (int j = 0;\n        j < n; j ++) {\n            C [j] [i] = A [i] [j];\n        }\n    }\n    return X;\n}\n"}
{"clone_type": "MT3", "method1_id": 3058377, "method2_id": 10578084, "code1": "public boolean makeBackupToZip (String [] filenames, String destinationdir, String zipFileName) {\n    boolean success = false;\n    destinationdir = destinationdir + System.getProperty (\"file.separator\");\n    System.out.println (destinationdir);\n    byte [] buf = new byte [1024];\n    try {\n        String outFilename = zipFileName;\n        ZipOutputStream out = new ZipOutputStream (new FileOutputStream (destinationdir + outFilename));\n        for (int i = 0;\n        i < filenames.length; i ++) {\n            if (filenames [i] != null) {\n                FileInputStream in = new FileInputStream (filenames [i]);\n                out.putNextEntry (new ZipEntry (filenames [i].substring (filenames [i].lastIndexOf (System.getProperty (\"file.separator\")), filenames [i].length ())));\n                int len;\n                while ((len = in.read (buf)) > 0) {\n                    out.write (buf, 0, len);\n                }\n                out.closeEntry ();\n                in.close ();\n            }\n        }\n        out.close ();\n    } catch (IOException e) {\n        e.printStackTrace ();\n    }\n    return success;\n}\n", "code2": "private void buildZipFile (String dirName) {\n    String [] filenames = listFiles (dirName);\n    byte [] buf = new byte [1024];\n    try {\n        String outFilename = dirName + \"/outfile.zip\";\n        ZipOutputStream out = new ZipOutputStream (new FileOutputStream (outFilename));\n        for (int i = 0;\n        i < filenames.length; i ++) {\n            File file = new File (dirName + \"/\" + filenames [i]);\n            if (file.exists ()) {\n                FileInputStream in = new FileInputStream (dirName + \"/\" + filenames [i]);\n                out.putNextEntry (new ZipEntry (filenames [i]));\n                int len;\n                while ((len = in.read (buf)) > 0) {\n                    out.write (buf, 0, len);\n                }\n                out.closeEntry ();\n                in.close ();\n            }\n        }\n        out.close ();\n    } catch (IOException e) {\n        e.printStackTrace ();\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 11719425, "method2_id": 21498404, "code1": "public RealSquareMatrix copyLowerToUpper () {\n    for (int i = 0;\n    i < cols - 1; i ++) {\n        for (int j = i + 1;\n        j < cols; j ++) {\n            flmat [i] [j] = flmat [j] [i];\n        }\n    }\n    return this;\n}\n", "code2": "public Matrix transpose () {\n    Matrix matrix = new Matrix ();\n    matrix.m = new double [m [0].length] [m.length];\n    for (int i = 0;\n    i < m.length; i ++) {\n        for (int j = 0;\n        j < m [0].length; j ++) {\n            matrix.m [j] [i] = m [i] [j];\n        }\n    }\n    return matrix;\n}\n"}
{"clone_type": "MT3", "method1_id": 13643064, "method2_id": 14560249, "code1": "public static void goToUpdate () {\n    if (NEW_VERSION_AVAILABLE && Desktop.isDesktopSupported ()) {\n        try {\n            Desktop.getDesktop ().browse (new URI (UPDATE_URL));\n        } catch (Exception exception) {\n            WindowUtils.showError (null, exception.getMessage ());\n        }\n    }\n}\n", "code2": "@Override\npublic void actionPerformed (ActionEvent e) {\n    if (Desktop.isDesktopSupported ()) {\n        Desktop desktop = Desktop.getDesktop ();\n        try {\n            desktop.browse (uri);\n        } catch (Exception ex) {\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 2389792, "method2_id": 20036508, "code1": "public void saveImageAs () {\n    JFileChooser fileChooser = new JFileChooser ();\n    fileChooser.setPreferredSize (new Dimension (400, 300));\n    fileChooser.setCurrentDirectory (new File (iSaveImageAsDir));\n    fileChooser.setSelectedFile (new File (iLastSaveAsName));\n    String path = \"\";\n    int returnVal = fileChooser.showSaveDialog (iAceTree);\n    if (returnVal == JFileChooser.APPROVE_OPTION) {\n        File file = fileChooser.getSelectedFile ();\n        path = file.getPath ();\n        iSaveImageAsDir = file.getParent ();\n        iLastSaveAsName = file.getName () + \"x\";\n    } else {\n        System.out.println (\"Save command cancelled by user.\");\n    }\n    Rectangle screenRect = iFrame.getBounds ();\n    int topAdjust = 23;\n    int y = screenRect.y;\n    screenRect.y += topAdjust;\n    int height = screenRect.height;\n    screenRect.height -= topAdjust;\n    Robot robot = null;\n    try {\n        robot = new Robot ();\n        BufferedImage image = robot.createScreenCapture (screenRect);\n        ImageIO.write (image, IMAGETYPE, new File (path + \".\" + IMAGETYPE));\n    } catch (Exception e) {\n        e.printStackTrace ();\n    }\n    System.out.println (\"file: \" + path + \" written\");\n    iSaveInProcess = false;\n}\n", "code2": "public void saveImage () {\n    String saveDir = iAceTree.iImgWin.getSaveImageDirectory ();\n    if (saveDir == null) {\n        iAceTree.iImgWin.cancelSaveOperations ();\n        iSaveImage = false;\n        return;\n    }\n    Rectangle screenRect = iFrame.getBounds ();\n    int topAdjust = 23;\n    int y = screenRect.y;\n    screenRect.y += topAdjust;\n    int height = screenRect.height;\n    screenRect.height -= topAdjust;\n    String title = saveDir + \"/\";\n    Robot robot = null;\n    try {\n        robot = new Robot ();\n        BufferedImage image = robot.createScreenCapture (screenRect);\n        title += iTitle + \".\" + IMAGETYPE;\n        ImageIO.write (image, IMAGETYPE, new File (title));\n    } catch (Exception e) {\n        e.printStackTrace ();\n    }\n    System.out.println (\"file: \" + title + \" written\");\n    iSaveInProcess = false;\n}\n"}
{"clone_type": "MT3", "method1_id": 14313421, "method2_id": 15911781, "code1": "public RealSquareMatrix copyLowerToUpper () {\n    for (int i = 0;\n    i < cols - 1; i ++) {\n        for (int j = i + 1;\n        j < cols; j ++) {\n            flmat [i] [j] = flmat [j] [i];\n        }\n    }\n    return this;\n}\n", "code2": "public FloatMatrix transpose () {\n    FloatMatrix X = new FloatMatrix (n, m);\n    float [] [] C = X.getArray ();\n    for (int i = 0;\n    i < m; i ++) {\n        for (int j = 0;\n        j < n; j ++) {\n            C [j] [i] = A [i] [j];\n        }\n    }\n    return X;\n}\n"}
{"clone_type": "MT3", "method1_id": 9354771, "method2_id": 18631594, "code1": "public void encryptPassword () {\n    MessageDigest digest = null;\n    try {\n        digest = MessageDigest.getInstance (\"SHA\");\n    } catch (NoSuchAlgorithmException e) {\n        System.out.print (e);\n    }\n    try {\n        digest.update (passwordIn.getBytes (\"UTF-8\"));\n    } catch (UnsupportedEncodingException e) {\n        System.out.println (\"cannot find char set for getBytes\");\n    }\n    byte digestBytes [] = digest.digest ();\n    passwordHash = (new BASE64Encoder ()).encode (digestBytes);\n}\n", "code2": "public static synchronized String getMD5_Base64 (String input) {\n    MessageDigest msgDigest = null;\n    try {\n        msgDigest = MessageDigest.getInstance (\"MD5\");\n    } catch (NoSuchAlgorithmException e) {\n        throw new IllegalStateException (\"System doesn't support MD5 algorithm.\");\n    }\n    try {\n        msgDigest.update (input.getBytes (\"UTF-8\"));\n    } catch (java.io.UnsupportedEncodingException ex) {\n        throw new IllegalStateException (\"System doesn't support your  EncodingException.\");\n    }\n    byte [] rawData = msgDigest.digest ();\n    byte [] encoded = Base64.encode (rawData);\n    String retValue = new String (encoded);\n    return retValue;\n}\n"}
{"clone_type": "MT3", "method1_id": 20372195, "method2_id": 23071780, "code1": "public static void copy (String a, String b) throws IOException {\n    File inputFile = new File (a);\n    File outputFile = new File (b);\n    FileReader in = new FileReader (inputFile);\n    FileWriter out = new FileWriter (outputFile);\n    int c;\n    while ((c = in.read ()) != - 1) out.write (c);\n\n    in.close ();\n    out.close ();\n}\n", "code2": "public boolean copyFile (File source, File dest) {\n    try {\n        FileReader in = new FileReader (source);\n        FileWriter out = new FileWriter (dest);\n        int c;\n        while ((c = in.read ()) != - 1) out.write (c);\n\n        in.close ();\n        out.close ();\n        return true;\n    } catch (Exception e) {\n        return false;\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 606579, "method2_id": 15405473, "code1": "private static int [] [] transpose (int [] [] matrix) {\n    int [] [] transposed = new int [matrix.length] [matrix [0].length];\n    for (int k = 0;\n    k < matrix.length; k ++) {\n        for (int j = 0;\n        j < matrix.length; j ++) {\n            transposed [j] [k] = matrix [k] [j];\n        }\n    }\n    return transposed;\n}\n", "code2": "public float [] [] getSubints () {\n    int [] [] subintsInt = this.getSubints (32, 1, 32);\n    float [] [] subintsfold = new float [subintsInt [0].length] [subintsInt.length];\n    for (int i = 0;\n    i < subintsInt.length; i ++) {\n        for (int j = 0;\n        j < subintsInt [0].length; j ++) {\n            subintsfold [j] [i] = subintsInt [i] [j];\n        }\n    }\n    return subintsfold;\n}\n"}
{"clone_type": "MT3", "method1_id": 744497, "method2_id": 3843712, "code1": "public static void main (String [] args) {\n    System.out.println (\"Chapter 6 example 4: Alignment of images\");\n    Document document = new Document ();\n    try {\n        PdfWriter.getInstance (document, new FileOutputStream (\"Chap0604.pdf\"));\n        document.open ();\n        Image gif = Image.getInstance (\"vonnegut.gif\");\n        gif.setAlignment (Image.RIGHT);\n        Image jpeg = Image.getInstance (\"myKids.jpg\");\n        jpeg.setAlignment (Image.MIDDLE);\n        Image png = Image.getInstance (\"hitchcock.png\");\n        png.setAlignment (Image.LEFT);\n        document.add (gif);\n        document.add (jpeg);\n        document.add (png);\n    } catch (DocumentException de) {\n        System.err.println (de.getMessage ());\n    } catch (IOException ioe) {\n        System.err.println (ioe.getMessage ());\n    }\n    document.close ();\n}\n", "code2": "public static void main (String [] args) {\n    System.out.println (\"Chapter 2: example HelloWorldLandscape\");\n    System.out.println (\"-> Creates a PDF file with the text 'Hello World';\");\n    System.out.println (\"   PageSize.LETTER was used for the page size,\");\n    System.out.println (\"   the orientation was set to landscape.\");\n    System.out.println (\"-> jars needed: iText.jar\");\n    System.out.println (\"-> files generated in /results subdirectory:\");\n    System.out.println (\"   HelloWorldLandscape.pdf\");\n    Document document = new Document (PageSize.LETTER.rotate ());\n    try {\n        PdfWriter.getInstance (document, new FileOutputStream (\"results/in_action/chapter02/HelloWorldLandscape.pdf\"));\n        document.open ();\n        document.add (new Paragraph (\"Hello World\"));\n    } catch (DocumentException de) {\n        System.err.println (de.getMessage ());\n    } catch (IOException ioe) {\n        System.err.println (ioe.getMessage ());\n    }\n    document.close ();\n}\n"}
{"clone_type": "MT3", "method1_id": 1561436, "method2_id": 15802070, "code1": "public static int binarySearch (char [] a, char key) {\n    int low = 0;\n    int high = a.length - 1;\n    while (low <= high) {\n        int mid = (low + high) / 2;\n        char midVal = a [mid];\n        if (midVal < key) low = mid + 1;\n        else if (midVal > key) high = mid - 1;\n        else return mid;\n\n    }\n    return - (low + 1);\n}\n", "code2": "private final int search (char c, boolean exact) {\n    int low = 0;\n    int high = children.size () - 1;\n    while (low <= high) {\n        int middle = (low + high) / 2;\n        char cmiddle = get (middle).getLabelStart ();\n        if (cmiddle < c) low = middle + 1;\n        else if (c < cmiddle) high = middle - 1;\n        else return middle;\n\n    }\n    if (exact) return - 1;\n\n    return high;\n}\n"}
{"clone_type": "MT3", "method1_id": 6631509, "method2_id": 7808600, "code1": "public void actionPerformed (ActionEvent e) {\n    if (Desktop.isDesktopSupported ()) {\n        try {\n            Desktop.getDesktop ().browse (monitor.getBuildURI (e.getActionCommand ()));\n        } catch (IOException err) {\n        }\n    }\n}\n", "code2": "@Override\npublic void mouseClicked (MouseEvent me) {\n    if (Desktop.isDesktopSupported ()) {\n        try {\n            Desktop.getDesktop ().browse (new URI (resourceMap.getString (\"Application.homepage\")));\n        } catch (URISyntaxException urise) {\n            logger.log (Level.WARNING, \"Incorrect URI\", urise);\n        } catch (IOException ioe) {\n            logger.log (Level.WARNING, \"General IO Error\", ioe);\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 10935129, "method2_id": 20717531, "code1": "private String encryptUserPassword (int userId, String password) {\n    password = password.trim ();\n    if (password.length () == 0) {\n        return \"\";\n    } else {\n        MessageDigest md;\n        try {\n            md = MessageDigest.getInstance (\"SHA\");\n        } catch (NoSuchAlgorithmException ex) {\n            throw new BoardRuntimeException (ex);\n        }\n        md.update (String.valueOf (userId).getBytes ());\n        md.update (password.getBytes ());\n        byte b [] = md.digest ();\n        StringBuffer sb = new StringBuffer (1 + b.length * 2);\n        for (int i = 0;\n        i < b.length; i ++) {\n            int ii = b [i];\n            if (ii < 0) {\n                ii = 256 + ii;\n            }\n            sb.append (getHexadecimalValue2 (ii));\n        }\n        return sb.toString ();\n    }\n}\n", "code2": "public static String encrypt (String plainText) {\n    if (TextUtils.isEmpty (plainText)) {\n        plainText = \"\";\n    }\n    StringBuilder text = new StringBuilder ();\n    for (int i = plainText.length () - 1;\n    i >= 0; i --) {\n        text.append (plainText.charAt (i));\n    }\n    plainText = text.toString ();\n    MessageDigest mDigest;\n    try {\n        mDigest = MessageDigest.getInstance (\"SHA-256\");\n    } catch (NoSuchAlgorithmException e) {\n        return plainText;\n    }\n    mDigest.update (plainText.getBytes ());\n    byte d [] = mDigest.digest ();\n    StringBuffer hash = new StringBuffer ();\n    for (int i = 0;\n    i < d.length; i ++) {\n        hash.append (Integer.toHexString (0xFF & d [i]));\n    }\n    return hash.toString ();\n}\n"}
{"clone_type": "MT3", "method1_id": 2467221, "method2_id": 11403723, "code1": "void copyFile (File src, File dst) throws IOException {\n    InputStream in = new FileInputStream (src);\n    OutputStream out = new FileOutputStream (dst);\n    byte [] buf = new byte [1024];\n    int len;\n    while ((len = in.read (buf)) > 0) out.write (buf, 0, len);\n\n    in.close ();\n    out.close ();\n}\n", "code2": "public static void copy (final File src, final File dest) throws IOException {\n    OutputStream stream = new FileOutputStream (dest);\n    FileInputStream fis = new FileInputStream (src);\n    byte [] buffer = new byte [16384];\n    while (fis.available () != 0) {\n        int read = fis.read (buffer);\n        stream.write (buffer, 0, read);\n    }\n    stream.flush ();\n}\n"}
{"clone_type": "MT3", "method1_id": 1607810, "method2_id": 11237850, "code1": "public void unlock (String oid, String key) throws PersisterException {\n    String lock = getLock (oid);\n    if (lock == null) {\n        throw new PersisterException (\"Object does not exist: OID = \" + oid);\n    } else if (! NULL.equals (lock) && (! lock.equals (key))) {\n        throw new PersisterException (\"The object is currently locked with another key: OID = \" + oid + \", LOCK = \" + lock + \", KEY = \" + key);\n    }\n\n    Connection conn = null;\n    PreparedStatement ps = null;\n    try {\n        conn = _ds.getConnection ();\n        conn.setAutoCommit (true);\n        ps = conn.prepareStatement (\"update \" + _table_name + \" set \" + _key_col + \" = NULL, \" + _ts_col + \" = ? where \" + _oid_col + \" = ?\");\n        ps.setLong (1, System.currentTimeMillis ());\n        ps.setString (2, oid);\n        ps.executeUpdate ();\n    } catch (Throwable th) {\n        if (conn != null) {\n            try {\n                conn.rollback ();\n            } catch (Throwable th2) {\n            }\n        }\n        throw new PersisterException (\"Failed to unlock object: OID = \" + oid + \", KEY = \" + key, th);\n    } finally {\n        if (ps != null) {\n            try {\n                ps.close ();\n            } catch (Throwable th) {\n            }\n        }\n        if (conn != null) {\n            try {\n                conn.close ();\n            } catch (Throwable th) {\n            }\n        }\n    }\n}\n", "code2": "public static boolean doExecuteBatchSQL (List < String > sql) {\n    session = currentSession ();\n    Connection conn = session.connection ();\n    PreparedStatement ps = null;\n    try {\n        conn.setAutoCommit (false);\n        Iterator iter = sql.iterator ();\n        while (iter.hasNext ()) {\n            String sqlstr = (String) iter.next ();\n            log (\"[SmsManager] doing sql:\" + sqlstr);\n            ps = conn.prepareStatement (sqlstr);\n            ps.executeUpdate ();\n        }\n        conn.commit ();\n        conn.setAutoCommit (true);\n        return true;\n    } catch (SQLException e) {\n        e.printStackTrace ();\n        try {\n            conn.rollback ();\n        } catch (SQLException e1) {\n            e1.printStackTrace ();\n        }\n        return false;\n    } finally {\n        if (conn != null) try {\n            conn.close ();\n        } catch (SQLException e) {\n            e.printStackTrace ();\n        }\n\n        if (ps != null) {\n            try {\n                ps.close ();\n            } catch (SQLException e) {\n                e.printStackTrace ();\n            }\n        }\n        closeHibernateSession ();\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 9012444, "method2_id": 21492113, "code1": "public static double [] [] getCorrelations (double [] [] v) {\n    double [] [] c = new double [v.length] [v.length];\n    for (int i = 0;\n    i < v.length - 1; i ++) {\n        for (int j = i + 1;\n        j < v.length; j ++) {\n            c [i] [j] = Pearson.calcCorrelation (v [i], v [j]);\n            c [j] [i] = c [i] [j];\n        }\n    }\n    return c;\n}\n", "code2": "public Matrix transpose () {\n    Matrix X = new Matrix (n, m);\n    double [] [] C = X.getArray ();\n    for (int i = 0;\n    i < m; i ++) {\n        for (int j = 0;\n        j < n; j ++) {\n            C [j] [i] = A [i] [j];\n        }\n    }\n    return X;\n}\n"}
{"clone_type": "MT3", "method1_id": 8848809, "method2_id": 13565787, "code1": "public static String crypt (String str) {\n    if (str == null || str.length () == 0) {\n        throw new IllegalArgumentException (\"String to encript cannot be null or zero length\");\n    }\n    StringBuffer hexString = new StringBuffer ();\n    try {\n        MessageDigest md = MessageDigest.getInstance (\"MD5\");\n        md.update (str.getBytes ());\n        byte [] hash = md.digest ();\n        for (int i = 0;\n        i < hash.length; i ++) {\n            if ((0xff & hash [i]) < 0x10) {\n                hexString.append (\"0\" + Integer.toHexString ((0xFF & hash [i])));\n            } else {\n                hexString.append (Integer.toHexString (0xFF & hash [i]));\n            }\n        }\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace ();\n    }\n    return hexString.toString ();\n}\n", "code2": "public static String encryptPassword (String plainPassword) {\n    StringBuffer sb = new StringBuffer ();\n    try {\n        MessageDigest messageDigest = MessageDigest.getInstance (\"MD5\");\n        messageDigest.update (plainPassword.getBytes ());\n        byte [] digestBytes = messageDigest.digest ();\n        String hex = null;\n        for (int i = 0;\n        i < digestBytes.length; i ++) {\n            hex = Integer.toHexString (0xFF & digestBytes [i]);\n            if (hex.length () < 2) sb.append (\"0\");\n\n            sb.append (hex);\n        }\n    } catch (Exception ex) {\n        System.out.println (ex.getMessage ());\n    }\n    return new String (sb);\n}\n"}
{"clone_type": "MT3", "method1_id": 13821141, "method2_id": 15660054, "code1": "public static String readUrlText (String urlString) throws IOException {\n    URL url = new URL (urlString);\n    InputStream stream = url.openStream ();\n    StringBuilder buf = new StringBuilder ();\n    BufferedReader in = null;\n    try {\n        in = new BufferedReader (new InputStreamReader (stream));\n        String str;\n        while ((str = in.readLine ()) != null) {\n            buf.append (str);\n            buf.append (System.getProperty (\"line.separator\"));\n        }\n    } catch (IOException e) {\n        System.out.println (\"Error reading text from URL [\" + url + \"]: \" + e.toString ());\n        throw e;\n    } finally {\n        if (in != null) {\n            try {\n                in.close ();\n            } catch (IOException e) {\n                System.out.println (\"Error closing after reading text from URL [\" + url + \"]: \" + e.toString ());\n            }\n        }\n    }\n    return buf.toString ();\n}\n", "code2": "public static List < PluginInfo > getPluginInfos (String urlRepo) throws MalformedURLException, IOException {\n    XStream xStream = new XStream ();\n    xStream.alias (\"plugin\", PluginInfo.class);\n    xStream.alias (\"plugins\", List.class);\n    List < PluginInfo > infos = null;\n    URL url;\n    BufferedReader in = null;\n    StringBuilder buffer = new StringBuilder ();\n    try {\n        url = new URL (urlRepo);\n        in = new BufferedReader (new InputStreamReader (url.openStream ()));\n        String inputLine;\n        while ((inputLine = in.readLine ()) != null) {\n            buffer.append (inputLine);\n        }\n    } finally {\n        try {\n            if (in != null) {\n                in.close ();\n            }\n        } catch (IOException ex) {\n            Logger.getLogger (RemotePluginsManager.class.getName ()).log (Level.SEVERE, null, ex);\n        }\n    }\n    infos = (List < PluginInfo >) xStream.fromXML (buffer.toString ());\n    return infos;\n}\n"}
{"clone_type": "MT3", "method1_id": 9597888, "method2_id": 14157859, "code1": "private void javaToHtml (File source, File destination) throws IOException {\n    Reader reader = new FileReader (source);\n    Writer writer = new FileWriter (destination);\n    JavaUtils.writeJava (reader, writer);\n    writer.flush ();\n    writer.close ();\n}\n", "code2": "static void copyFile (File file, File file1) throws IOException {\n    byte abyte0 [] = new byte [512];\n    FileInputStream fileinputstream = new FileInputStream (file);\n    FileOutputStream fileoutputstream = new FileOutputStream (file1);\n    int i;\n    while ((i = fileinputstream.read (abyte0)) > 0) fileoutputstream.write (abyte0, 0, i);\n\n    fileinputstream.close ();\n    fileoutputstream.close ();\n}\n"}
{"clone_type": "MT3", "method1_id": 18828007, "method2_id": 22487030, "code1": "public static String SHA1 (String text) {\n    try {\n        MessageDigest md;\n        md = MessageDigest.getInstance (\"SHA-1\");\n        byte [] md5hash = new byte [32];\n        md.update (text.getBytes (\"iso-8859-1\"), 0, text.length ());\n        md5hash = md.digest ();\n        return convertToHex (md5hash);\n    } catch (NoSuchAlgorithmException e) {\n        throw new RuntimeException (e);\n    } catch (UnsupportedEncodingException e) {\n        throw new RuntimeException (e);\n    }\n}\n", "code2": "public static synchronized String encrypt (String plaintextPassword) throws Exception {\n    MessageDigest md = null;\n    try {\n        md = MessageDigest.getInstance (\"SHA\");\n    } catch (NoSuchAlgorithmException e) {\n        throw new Exception (e);\n    }\n    try {\n        md.update (plaintextPassword.getBytes (\"UTF-8\"));\n    } catch (UnsupportedEncodingException e) {\n        throw new Exception (e);\n    }\n    byte raw [] = md.digest ();\n    String hash = (new BASE64Encoder ()).encode (raw);\n    return hash;\n}\n"}
{"clone_type": "MT3", "method1_id": 16556717, "method2_id": 19905565, "code1": "public static String getSHADigest (String password) {\n    String digest = null;\n    MessageDigest sha = null;\n    try {\n        sha = MessageDigest.getInstance (\"SHA-1\");\n        sha.reset ();\n        sha.update (password.getBytes ());\n        byte [] pwhash = sha.digest ();\n        digest = \"{SHA}\" + new String (Base64.encode (pwhash));\n    } catch (NoSuchAlgorithmException nsae) {\n        CofaxToolsUtil.log (\"Algorithme SHA-1 non supporte a la creation du hashage\" + nsae + id);\n    }\n    return digest;\n}\n", "code2": "public static String sha1 (String in) {\n    MessageDigest md = null;\n    try {\n        md = MessageDigest.getInstance (\"SHA-1\");\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace ();\n    }\n    byte [] data = new byte [40];\n    try {\n        md.update (in.getBytes (\"iso-8859-1\"), 0, in.length ());\n    } catch (UnsupportedEncodingException e) {\n        e.printStackTrace ();\n    }\n    data = md.digest ();\n    return HexidecimalUtilities.convertFromByteArrayToHex (data);\n}\n"}
{"clone_type": "MT3", "method1_id": 15131771, "method2_id": 15405473, "code1": "public Matrix transpose () {\n    Matrix X = new Matrix (n, m);\n    double [] [] C = X.getArray ();\n    for (int i = 0;\n    i < m; i ++) {\n        for (int j = 0;\n        j < n; j ++) {\n            C [j] [i] = A [i] [j];\n        }\n    }\n    return X;\n}\n", "code2": "public float [] [] getSubints () {\n    int [] [] subintsInt = this.getSubints (32, 1, 32);\n    float [] [] subintsfold = new float [subintsInt [0].length] [subintsInt.length];\n    for (int i = 0;\n    i < subintsInt.length; i ++) {\n        for (int j = 0;\n        j < subintsInt [0].length; j ++) {\n            subintsfold [j] [i] = subintsInt [i] [j];\n        }\n    }\n    return subintsfold;\n}\n"}
{"clone_type": "MT3", "method1_id": 5237257, "method2_id": 14770723, "code1": "private void download (String fileName) {\n    String filePath = Activator.showSaveDialog (fileName, new String [] {\".xls\"});\n    if (filePath != null) {\n        InputStream in = null;\n        OutputStream out = null;\n        try {\n            in = this.getClass ().getResourceAsStream (\"/\" + fileName);\n            out = new FileOutputStream (filePath);\n            IOUtils.copy (in, out);\n        } catch (IOException ioe) {\n            Activator.showExceptionDialog (ioe);\n        } finally {\n            if (in != null) {\n                try {\n                    in.close ();\n                } catch (IOException e1) {\n                    Activator.showExceptionDialog (e1);\n                }\n            }\n            if (out != null) {\n                try {\n                    out.close ();\n                } catch (IOException e1) {\n                    Activator.showExceptionDialog (e1);\n                }\n            }\n        }\n    }\n}\n", "code2": "public static boolean copyFile (File dest, File source) {\n    FileInputStream fis = null;\n    FileOutputStream fos = null;\n    boolean rv = false;\n    byte [] buf = new byte [1000000];\n    int bytesRead = 0;\n    if (! dest.getParentFile ().exists ()) dest.getParentFile ().mkdirs ();\n\n    try {\n        fis = new FileInputStream (source);\n        fos = new FileOutputStream (dest);\n        while ((bytesRead = fis.read (buf)) > 0) fos.write (buf, 0, bytesRead);\n\n        fis.close ();\n        fis = null;\n        fos.close ();\n        fos = null;\n        rv = true;\n    } catch (Throwable t) {\n        throw new ApplicationException (\"copy error (\" + source.getAbsolutePath () + \" => \" + dest.getAbsolutePath (), t);\n    } finally {\n        if (fis != null) {\n            try {\n                fis.close ();\n            } catch (Exception e) {\n            }\n            fis = null;\n        }\n        if (fos != null) {\n            try {\n                fos.close ();\n            } catch (Exception e) {\n            }\n            fos = null;\n        }\n    }\n    return rv;\n}\n"}
{"clone_type": "MT3", "method1_id": 491386, "method2_id": 4732003, "code1": "public void actionPerformed (ActionEvent ae) {\n    if (Desktop.isDesktopSupported ()) {\n        try {\n            Desktop d = Desktop.getDesktop ();\n            d.browse (new URI (MasteryCards.GPL_URL));\n        } catch (Exception e) {\n            Methods.displaySimpleError (framer, \"Can't access website; check internet connection?\\nPlease visit '\" + MasteryCards.GPL_URL + \"' to view GPL\");\n        }\n    } else {\n        Methods.displaySimpleAlert (framer, \"Please visit '\" + MasteryCards.GPL_URL + \"' to view GPL\");\n    }\n}\n", "code2": "private void urlLabelMouseClicked (java.awt.event.MouseEvent evt) {\n    if (urlLabel.getText ().equals (\"\") == false) {\n        if (Desktop.isDesktopSupported ()) {\n            try {\n                Desktop.getDesktop ().browse (new URI (urlLabel.getText ()));\n            } catch (Throwable ex) {\n                Global.dialogs.showErrorDialog (Bundles.subgetBundle.getString (\"Error\"), Bundles.subgetBundle.getString (\"Could_not_open_a_default_internet_browser.\"));\n            }\n        } else {\n            Global.dialogs.showErrorDialog (Bundles.subgetBundle.getString (\"Error\"), Bundles.subgetBundle.getString (\"Could_not_open_a_default_internet_browser.\"));\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 491386, "method2_id": 4721884, "code1": "public void actionPerformed (ActionEvent ae) {\n    if (Desktop.isDesktopSupported ()) {\n        try {\n            Desktop d = Desktop.getDesktop ();\n            d.browse (new URI (MasteryCards.GPL_URL));\n        } catch (Exception e) {\n            Methods.displaySimpleError (framer, \"Can't access website; check internet connection?\\nPlease visit '\" + MasteryCards.GPL_URL + \"' to view GPL\");\n        }\n    } else {\n        Methods.displaySimpleAlert (framer, \"Please visit '\" + MasteryCards.GPL_URL + \"' to view GPL\");\n    }\n}\n", "code2": "public void browse (URI uri) {\n    if (Desktop.isDesktopSupported ()) {\n        Desktop desktop = Desktop.getDesktop ();\n        try {\n            desktop.browse (uri);\n        } catch (IOException e) {\n            logger.getLogger ().log (Level.WARNING, Application.getInstance (GreenTone.class).getContext ().getResourceMap ().getString (\"ErrorMessage.cannotOpenURL\") + \" \" + uri.getPath (), e);\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 4511510, "method2_id": 9918989, "code1": "public static String cryptoSHA (String _strSrc) {\n    try {\n        BASE64Encoder encoder = new BASE64Encoder ();\n        MessageDigest sha = MessageDigest.getInstance (\"SHA\");\n        sha.update (_strSrc.getBytes ());\n        byte [] buffer = sha.digest ();\n        return encoder.encode (buffer);\n    } catch (Exception err) {\n        System.out.println (err);\n    }\n    return \"\";\n}\n", "code2": "private byte [] hash (String data, HashAlg alg) {\n    try {\n        MessageDigest digest = MessageDigest.getInstance (alg.toString ());\n        digest.update (data.getBytes ());\n        byte [] hash = digest.digest ();\n        return hash;\n    } catch (NoSuchAlgorithmException e) {\n    }\n    return null;\n}\n"}
{"clone_type": "MT3", "method1_id": 15889439, "method2_id": 23677117, "code1": "protected void echo (File file, Writer out) throws IOException {\n    FileReader r = new FileReader (file);\n    IOUtils.copyTo (r, out);\n    r.close ();\n}\n", "code2": "public static void copyFile4 (File srcFile, File destFile) throws IOException {\n    InputStream in = new FileInputStream (srcFile);\n    OutputStream out = new FileOutputStream (destFile);\n    IOUtils.copy (in, out);\n    in.close ();\n    out.close ();\n}\n"}
{"clone_type": "MT3", "method1_id": 8489742, "method2_id": 13447231, "code1": "public static void fileCopy (String fromPath, String toPath) throws IOException {\n    File inputFile = new File (fromPath);\n    File outputFile = new File (toPath);\n    FileReader in = new FileReader (inputFile);\n    FileWriter out = new FileWriter (outputFile);\n    int c;\n    while ((c = in.read ()) != - 1) out.write (c);\n\n    in.close ();\n    out.close ();\n}\n", "code2": "public void copy (String pathFileIn, String pathFileOut) {\n    try {\n        File inputFile = new File (pathFileIn);\n        File outputFile = new File (pathFileOut);\n        FileReader in = new FileReader (inputFile);\n        File outDir = new File (DirOut);\n        if (! outDir.exists ()) outDir.mkdirs ();\n\n        FileWriter out = new FileWriter (outputFile);\n        int c;\n        while ((c = in.read ()) != - 1) out.write (c);\n\n        in.close ();\n        out.close ();\n        this.printColumn (inputFile.getName (), outputFile.getPath ());\n    } catch (Exception e) {\n        e.printStackTrace ();\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 2735276, "method2_id": 4540074, "code1": "public static void main (String [] args) {\n    System.out.println (\"Chapter 15: example AnnotatedImages\");\n    System.out.println (\"-> Creates a PDF with annotated images;\");\n    System.out.println (\"-> jars needed: iText.jar\");\n    System.out.println (\"-> resources needed: foxdog.jpg (chapter 5) and iTextLogo.gif (chapter 10)\");\n    System.out.println (\"-> file generated in /results subdirectory:\");\n    System.out.println (\"   annotated_images.pdf\");\n    Document document = new Document (PageSize.A4, 50, 50, 50, 50);\n    try {\n        PdfWriter.getInstance (document, new FileOutputStream (\"results/in_action/chapter15/annotated_images.pdf\"));\n        document.open ();\n        Image gif = Image.getInstance (\"resources/in_action/chapter10/iTextLogo.gif\");\n        gif.setAnnotation (new Annotation (0, 0, 0, 0, \"http://www.lowagie.com/iText\"));\n        gif.setAbsolutePosition (30f, 750f);\n        document.add (gif);\n        Image jpeg = Image.getInstance (\"resources/in_action/chapter05/foxdog.jpg\");\n        jpeg.setAnnotation (new Annotation (\"picture\", \"quick brown fox jumps over the lazy dog\", 0, 0, 0, 0));\n        jpeg.setAbsolutePosition (120f, 550f);\n        document.add (jpeg);\n    } catch (Exception de) {\n        de.printStackTrace ();\n    }\n    document.close ();\n}\n", "code2": "public static void main (String [] args) {\n    System.out.println (\"Alignment of images\");\n    Document document = new Document ();\n    try {\n        PdfWriter.getInstance (document, new FileOutputStream (\"alignment.pdf\"));\n        document.open ();\n        Image gif = Image.getInstance (\"vonnegut.gif\");\n        gif.setAlignment (Image.RIGHT);\n        Image jpeg = Image.getInstance (\"otsoe.jpg\");\n        jpeg.setAlignment (Image.MIDDLE);\n        Image png = Image.getInstance (\"hitchcock.png\");\n        png.setAlignment (Image.LEFT);\n        document.add (gif);\n        document.add (jpeg);\n        document.add (png);\n    } catch (DocumentException de) {\n        System.err.println (de.getMessage ());\n    } catch (IOException ioe) {\n        System.err.println (ioe.getMessage ());\n    }\n    document.close ();\n}\n"}
{"clone_type": "MT3", "method1_id": 3353836, "method2_id": 6882723, "code1": "public static double [] [] transpose (double [] [] matrix) {\n    double [] [] transposed = new double [matrix [0].length] [matrix.length];\n    int mLength = matrix.length, m0Length = matrix [0].length;\n    for (int i = 0;\n    i < mLength; i ++) {\n        for (int j = 0;\n        j < m0Length; j ++) {\n            transposed [j] [i] = matrix [i] [j];\n        }\n    }\n    return transposed;\n}\n", "code2": "public MathRealMatrix transpose () {\n    int m = this.M;\n    int n = this.N;\n    double [] [] mData = this.Data;\n    double [] [] newData = new double [n] [m];\n    for (int ni = 0;\n    ni < n; ni ++) {\n        for (int mi = 0;\n        mi < m; mi ++) {\n            newData [ni] [mi] = mData [mi] [ni];\n        }\n    }\n    return new MathRealMatrix (newData);\n}\n"}
{"clone_type": "MT3", "method1_id": 1977844, "method2_id": 3417314, "code1": "public void deleteRecursive (File _file) throws IOException {\n    if (_file.exists ()) {\n        if (_file.isDirectory ()) {\n            File [] files = _file.listFiles ();\n            for (int i = 0, l = files.length;\n            i < l; ++ i) deleteRecursive (files [i]);\n\n        }\n        _file.delete ();\n    }\n}\n", "code2": "public static void deleteRecursive (File dir) {\n    if (dir.exists ()) {\n        if (dir.isDirectory ()) {\n            for (File f : dir.listFiles ()) {\n                deleteRecursive (f);\n            }\n        }\n        dir.delete ();\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 8182887, "method2_id": 17883770, "code1": "public IntSquareMatrix copyUpperToLower () {\n    for (int i = 0;\n    i < cols - 1; i ++) {\n        for (int j = i + 1;\n        j < cols; j ++) {\n            flmat [j] [i] = flmat [i] [j];\n        }\n    }\n    return this;\n}\n", "code2": "public Matrix transpose () {\n    Matrix X = new Matrix (n, m);\n    double [] [] C = X.getArray ();\n    for (int i = 0;\n    i < m; i ++) {\n        for (int j = 0;\n        j < n; j ++) {\n            C [j] [i] = A [i] [j];\n        }\n    }\n    return X;\n}\n"}
{"clone_type": "MT3", "method1_id": 14164924, "method2_id": 22271237, "code1": "@Override\npublic void copy (File source, File dest) throws IOException {\n    FileChannel in = null;\n    FileChannel out = null;\n    try {\n        in = (new FileInputStream (source)).getChannel ();\n        out = (new FileOutputStream (dest)).getChannel ();\n        in.transferTo (0, source.length (), out);\n    } catch (FileNotFoundException e) {\n        throw new IOException (\"Wrong source or destination path for backup operation!\");\n    } finally {\n        if (out != null) {\n            out.close ();\n        }\n        if (in != null) {\n            in.close ();\n        }\n    }\n}\n", "code2": "public static void copy (File sourceFile, File destFile) throws IOException {\n    if (! destFile.exists ()) {\n        destFile.createNewFile ();\n    }\n    FileChannel source = null;\n    FileChannel destination = null;\n    try {\n        source = new FileInputStream (sourceFile).getChannel ();\n        destination = new FileOutputStream (destFile).getChannel ();\n        destination.transferFrom (source, 0, source.size ());\n    } finally {\n        if (source != null) {\n            source.close ();\n        }\n        if (destination != null) {\n            destination.close ();\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 13952259, "method2_id": 17325960, "code1": "private static String getMD5 (String phrase) {\n    try {\n        MessageDigest md = MessageDigest.getInstance (\"MD5\");\n        md.update (phrase.getBytes ());\n        return asHexString (md.digest ());\n    } catch (Exception e) {\n    }\n    return \"\";\n}\n", "code2": "private String getMD5 (String password) {\n    try {\n        MessageDigest md = MessageDigest.getInstance (\"MD5\");\n        md.update (password.getBytes ());\n        byte [] data = md.digest ();\n        return convertToHex (data);\n    } catch (Exception ex) {\n        ex.printStackTrace ();\n    }\n    return null;\n}\n"}
{"clone_type": "MT3", "method1_id": 4959517, "method2_id": 19523689, "code1": "public static String openldapDigestMd5 (final String password) {\n    String base64;\n    try {\n        MessageDigest digest = MessageDigest.getInstance (\"MD5\");\n        digest.update (password.getBytes ());\n        base64 = fr.cnes.sitools.util.Base64.encodeBytes (digest.digest ());\n    } catch (NoSuchAlgorithmException e) {\n        throw new RuntimeException (e);\n    }\n    return OPENLDAP_MD5_PREFIX + base64;\n}\n", "code2": "public static String encodePassword (String password) {\n    MessageDigest md;\n    try {\n        md = MessageDigest.getInstance (\"SHA\");\n        md.update (password.getBytes ());\n        String encodedPassword = new String (md.digest (), new Base64Provider ().charsetForName (\"x-base64\"));\n        return encodedPassword;\n    } catch (NoSuchAlgorithmException e) {\n        return null;\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 11394767, "method2_id": 13206754, "code1": "public static byte [] gerarHash (String frase) {\n    try {\n        MessageDigest md = MessageDigest.getInstance (\"SHA-1\");\n        md.update (frase.getBytes ());\n        return md.digest ();\n    } catch (NoSuchAlgorithmException e) {\n        return null;\n    }\n}\n", "code2": "public static String md5Encrypt (String valueToEncrypted) {\n    String encryptedValue = \"\";\n    try {\n        MessageDigest digest = MessageDigest.getInstance (\"MD5\");\n        digest.update (valueToEncrypted.getBytes ());\n        BigInteger hash = new BigInteger (1, digest.digest ());\n        encryptedValue = hash.toString (16);\n    } catch (NoSuchAlgorithmException nsae) {\n        nsae.printStackTrace ();\n    }\n    return encryptedValue;\n}\n"}
{"clone_type": "MT3", "method1_id": 17467511, "method2_id": 17621070, "code1": "public static final void randomShuffle (int [] v, Random r) {\n    int n = v.length;\n    while (-- n > 0) {\n        int k = r.nextInt (n + 1);\n        int temp = v [n];\n        v [n] = v [k];\n        v [k] = temp;\n    }\n}\n", "code2": "public static synchronized void shuffle (double [] anArray) {\n    int n = anArray.length;\n    for (int i = n - 1;\n    i >= 1; i --) {\n        int j = randomSource.nextInt (i + 1);\n        double temp = anArray [j];\n        anArray [j] = anArray [i];\n        anArray [i] = temp;\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 12022107, "method2_id": 18757376, "code1": "public File zip (File sourceFile) {\n    if (sourceFile == null || ! sourceFile.exists ()) {\n        throw new IllegalArgumentException (\"File does not exist: \" + sourceFile);\n    }\n    if (FilenameUtils.getExtension (sourceFile.getAbsolutePath ()).equalsIgnoreCase (\"zip\")) {\n        return sourceFile;\n    }\n    byte [] buf = new byte [MEGA];\n    try {\n        String resultPath = sourceFile.getAbsolutePath () + \".zip\";\n        ZipOutputStream out = new ZipOutputStream (new FileOutputStream (resultPath));\n        FileInputStream in = new FileInputStream (sourceFile);\n        out.putNextEntry (new ZipEntry (sourceFile.getName ()));\n        int len;\n        while ((len = in.read (buf)) > 0) {\n            out.write (buf, 0, len);\n        }\n        out.closeEntry ();\n        in.close ();\n        out.close ();\n        return new File (resultPath);\n    } catch (Exception ioe) {\n        logger.error (\"Error while zipping file: \" + ioe.getMessage ());\n        ioe.printStackTrace ();\n        throw new RuntimeException (\"Error while zipping file: \" + sourceFile, ioe);\n    }\n}\n", "code2": "public static File zipFile (String pathToBeZipped, String pathZippedFile) throws IOException {\n    if (pathZippedFile.indexOf (\".zip\") < 0) {\n        pathZippedFile += \".zip\";\n    }\n    File fileASerZipado = new File (pathToBeZipped);\n    byte [] buf = new byte [BUFFER_SIZE];\n    ZipOutputStream out = new ZipOutputStream (new FileOutputStream (pathZippedFile));\n    FileInputStream in = new FileInputStream (pathToBeZipped);\n    out.putNextEntry (new ZipEntry (fileASerZipado.getName ()));\n    int len;\n    while ((len = in.read (buf)) > 0) {\n        out.write (buf, 0, len);\n    }\n    out.closeEntry ();\n    in.close ();\n    out.close ();\n    return new File (pathZippedFile);\n}\n"}
{"clone_type": "MT3", "method1_id": 2801437, "method2_id": 7505934, "code1": "public static String encryptMD5 (String str) {\n    try {\n        MessageDigest md5 = MessageDigest.getInstance (\"MD5\");\n        md5.update (str.getBytes ());\n        byte [] hash = md5.digest ();\n        md5.reset ();\n        return Format.hashToHex (hash);\n    } catch (java.security.NoSuchAlgorithmException nsae0) {\n        return null;\n    }\n}\n", "code2": "public static byte [] generateAuthId (String userName, String password) {\n    byte [] ret = new byte [16];\n    try {\n        MessageDigest messageDigest = MessageDigest.getInstance (\"MD5\");\n        String str = userName + password;\n        messageDigest.update (str.getBytes ());\n        ret = messageDigest.digest ();\n    } catch (NoSuchAlgorithmException ex) {\n        ex.printStackTrace ();\n    }\n    return ret;\n}\n"}
{"clone_type": "MT3", "method1_id": 13048961, "method2_id": 13111022, "code1": "private final void saveCopy (String source, String destination) {\n    BufferedInputStream from = null;\n    BufferedOutputStream to = null;\n    try {\n        from = new BufferedInputStream (new FileInputStream (source));\n        to = new BufferedOutputStream (new FileOutputStream (destination));\n        byte [] buffer = new byte [65535];\n        int bytes_read;\n        while ((bytes_read = from.read (buffer)) != - 1) to.write (buffer, 0, bytes_read);\n\n    } catch (Exception e) {\n        LogWriter.writeLog (\"Exception \" + e + \" copying file\");\n    }\n    try {\n        to.close ();\n        from.close ();\n    } catch (Exception e) {\n        LogWriter.writeLog (\"Exception \" + e + \" closing files\");\n    }\n    to = null;\n    from = null;\n}\n", "code2": "private static void copy (File source, File target) throws IOException {\n    InputStream is = null;\n    OutputStream os = null;\n    try {\n        is = new BufferedInputStream (new FileInputStream (source));\n        os = new BufferedOutputStream (new FileOutputStream (target));\n        int b;\n        while ((b = is.read ()) > - 1) os.write (b);\n\n    } finally {\n        try {\n            if (is != null) is.close ();\n\n        } catch (IOException ignore) {\n        }\n        try {\n            if (os != null) os.close ();\n\n        } catch (IOException ignore) {\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 11792098, "method2_id": 20006636, "code1": "public void createNewFile (String filePath, InputStream in) throws IOException {\n    FileOutputStream out = null;\n    try {\n        File file = newFileRef (filePath);\n        FileHelper.createNewFile (file, true);\n        out = new FileOutputStream (file);\n        IOUtils.copy (in, out);\n    } finally {\n        IOUtils.closeQuietly (in);\n        IOUtils.closeQuietly (out);\n    }\n}\n", "code2": "public void trimAndWriteNewSff (OutputStream out) throws IOException {\n    TrimParser trimmer = new TrimParser ();\n    SffParser.parseSFF (untrimmedSffFile, trimmer);\n    tempOut.close ();\n    headerBuilder.withNoIndex ().numberOfReads (numberOfTrimmedReads);\n    SffWriter.writeCommonHeader (headerBuilder.build (), out);\n    InputStream in = null;\n    try {\n        in = new FileInputStream (tempReadDataFile);\n        IOUtils.copyLarge (in, out);\n    } finally {\n        IOUtil.closeAndIgnoreErrors (in);\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 9096314, "method2_id": 9096316, "code1": "private void handleNodeLostService (long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\n    Category log = ThreadCategory.getInstance (OutageWriter.class);\n    if (eventID == - 1 || nodeID == - 1 || ipAddr == null || serviceID == - 1) {\n        log.warn (EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + \" ignored - info incomplete - eventid/nodeid/ip/svc: \" + eventID + \"/\" + nodeID + \"/\" + ipAddr + \"/\" + serviceID);\n        return;\n    }\n    Connection dbConn = null;\n    try {\n        dbConn = DatabaseConnectionFactory.getInstance ().getConnection ();\n        if (openOutageExists (dbConn, nodeID, ipAddr, serviceID)) {\n            log.warn (\"\\'\" + EventConstants.NODE_LOST_SERVICE_EVENT_UEI + \"\\' for \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID + \" ignored - table already  has an open record \");\n        } else {\n            PreparedStatement getNextOutageIdStmt = dbConn.prepareStatement (OutageManagerConfigFactory.getInstance ().getGetNextOutageID ());\n            long outageID = - 1;\n            ResultSet seqRS = getNextOutageIdStmt.executeQuery ();\n            if (seqRS.next ()) {\n                outageID = seqRS.getLong (1);\n            }\n            seqRS.close ();\n            try {\n                dbConn.setAutoCommit (false);\n            } catch (SQLException sqle) {\n                log.error (\"Unable to change database AutoCommit to FALSE\", sqle);\n                return;\n            }\n            PreparedStatement newOutageWriter = null;\n            if (log.isDebugEnabled ()) log.debug (\"handleNodeLostService: creating new outage entry...\");\n\n            newOutageWriter = dbConn.prepareStatement (OutageConstants.DB_INS_NEW_OUTAGE);\n            newOutageWriter.setLong (1, outageID);\n            newOutageWriter.setLong (2, eventID);\n            newOutageWriter.setLong (3, nodeID);\n            newOutageWriter.setString (4, ipAddr);\n            newOutageWriter.setLong (5, serviceID);\n            newOutageWriter.setTimestamp (6, convertEventTimeIntoTimestamp (eventTime));\n            newOutageWriter.executeUpdate ();\n            newOutageWriter.close ();\n            try {\n                dbConn.commit ();\n                if (log.isDebugEnabled ()) log.debug (\"nodeLostService : \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID + \" recorded in DB\");\n\n            } catch (SQLException se) {\n                log.warn (\"Rolling back transaction, nodeLostService could not be recorded  for nodeid/ipAddr/service: \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID, se);\n                try {\n                    dbConn.rollback ();\n                } catch (SQLException sqle) {\n                    log.warn (\"SQL exception during rollback, reason\", sqle);\n                }\n            }\n        }\n    } catch (SQLException sqle) {\n        log.warn (\"SQL exception while handling \\'nodeLostService\\'\", sqle);\n    } finally {\n        try {\n            if (dbConn != null) dbConn.close ();\n\n        } catch (SQLException e) {\n            log.warn (\"Exception closing JDBC connection\", e);\n        }\n    }\n}\n", "code2": "private void handleNodeDown (long eventID, long nodeID, String eventTime) {\n    Category log = ThreadCategory.getInstance (OutageWriter.class);\n    if (eventID == - 1 || nodeID == - 1) {\n        log.warn (EventConstants.NODE_DOWN_EVENT_UEI + \" ignored - info incomplete - eventid/nodeid: \" + eventID + \"/\" + nodeID);\n        return;\n    }\n    Connection dbConn = null;\n    try {\n        dbConn = DatabaseConnectionFactory.getInstance ().getConnection ();\n        try {\n            dbConn.setAutoCommit (false);\n        } catch (SQLException sqle) {\n            log.error (\"Unable to change database AutoCommit to FALSE\", sqle);\n            return;\n        }\n        PreparedStatement activeSvcsStmt = dbConn.prepareStatement (OutageConstants.DB_GET_ACTIVE_SERVICES_FOR_NODE);\n        PreparedStatement openStmt = dbConn.prepareStatement (OutageConstants.DB_OPEN_RECORD);\n        PreparedStatement newOutageWriter = dbConn.prepareStatement (OutageConstants.DB_INS_NEW_OUTAGE);\n        PreparedStatement getNextOutageIdStmt = dbConn.prepareStatement (OutageManagerConfigFactory.getInstance ().getGetNextOutageID ());\n        newOutageWriter = dbConn.prepareStatement (OutageConstants.DB_INS_NEW_OUTAGE);\n        if (log.isDebugEnabled ()) log.debug (\"handleNodeDown: creating new outage entries...\");\n\n        activeSvcsStmt.setLong (1, nodeID);\n        ResultSet activeSvcsRS = activeSvcsStmt.executeQuery ();\n        while (activeSvcsRS.next ()) {\n            String ipAddr = activeSvcsRS.getString (1);\n            long serviceID = activeSvcsRS.getLong (2);\n            if (openOutageExists (dbConn, nodeID, ipAddr, serviceID)) {\n                if (log.isDebugEnabled ()) log.debug (\"handleNodeDown: \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID + \" already down\");\n\n            } else {\n                long outageID = - 1;\n                ResultSet seqRS = getNextOutageIdStmt.executeQuery ();\n                if (seqRS.next ()) {\n                    outageID = seqRS.getLong (1);\n                }\n                seqRS.close ();\n                newOutageWriter.setLong (1, outageID);\n                newOutageWriter.setLong (2, eventID);\n                newOutageWriter.setLong (3, nodeID);\n                newOutageWriter.setString (4, ipAddr);\n                newOutageWriter.setLong (5, serviceID);\n                newOutageWriter.setTimestamp (6, convertEventTimeIntoTimestamp (eventTime));\n                newOutageWriter.executeUpdate ();\n                if (log.isDebugEnabled ()) log.debug (\"handleNodeDown: Recording outage for \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID);\n\n            }\n        }\n        activeSvcsRS.close ();\n        try {\n            dbConn.commit ();\n            if (log.isDebugEnabled ()) log.debug (\"Outage recorded for all active services for \" + nodeID);\n\n        } catch (SQLException se) {\n            log.warn (\"Rolling back transaction, nodeDown could not be recorded  for nodeId: \" + nodeID, se);\n            try {\n                dbConn.rollback ();\n            } catch (SQLException sqle) {\n                log.warn (\"SQL exception during rollback, reason\", sqle);\n            }\n        }\n        activeSvcsStmt.close ();\n        openStmt.close ();\n        newOutageWriter.close ();\n    } catch (SQLException sqle) {\n        log.warn (\"SQL exception while handling \\'nodeDown\\'\", sqle);\n    } finally {\n        try {\n            if (dbConn != null) dbConn.close ();\n\n        } catch (SQLException e) {\n            log.warn (\"Exception closing JDBC connection\", e);\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 8805649, "method2_id": 10695599, "code1": "public String streamToString (InputStream stream) throws IOException {\n    ByteArrayOutputStream output = new ByteArrayOutputStream ();\n    IOUtils.copy (stream, output);\n    return output.toString ();\n}\n", "code2": "public static String stringOfUrl (String addr) throws IOException {\n    ByteArrayOutputStream output = new ByteArrayOutputStream ();\n    URL url = new URL (addr);\n    IOUtils.copy (url.openStream (), output);\n    return output.toString ();\n}\n"}
{"clone_type": "MT3", "method1_id": 11440870, "method2_id": 15357254, "code1": "public Matrix transpose () {\n    Matrix X = new Matrix (n, m);\n    int [] [] C = X.getArray ();\n    for (int i = 0;\n    i < m; i ++) {\n        for (int j = 0;\n        j < n; j ++) {\n            C [j] [i] = A [i] [j];\n        }\n    }\n    return X;\n}\n", "code2": "public static double [] [] getCorrMatrix (Gene [] gene) {\n    double [] [] c = new double [gene.length] [gene.length];\n    for (int i = 0;\n    i < c.length - 1; i ++) {\n        for (int j = i + 1;\n        j < c.length; j ++) {\n            c [i] [j] = Pearson.calcCorrelation (gene [i].value, gene [j].value);\n            c [j] [i] = c [i] [j];\n        }\n    }\n    return c;\n}\n"}
{"clone_type": "MT3", "method1_id": 316912, "method2_id": 17637279, "code1": "void copyFile (String src, String dest) throws IOException {\n    int amount;\n    byte [] buffer = new byte [4096];\n    FileInputStream in = new FileInputStream (src);\n    FileOutputStream out = new FileOutputStream (dest);\n    while ((amount = in.read (buffer)) != - 1) out.write (buffer, 0, amount);\n\n    in.close ();\n    out.close ();\n}\n", "code2": "private static void copy (File source, File dest) throws FileNotFoundException, IOException {\n    FileInputStream input = new FileInputStream (source);\n    FileOutputStream output = new FileOutputStream (dest);\n    System.out.println (\"Copying \" + source + \" to \" + dest);\n    IOUtils.copy (input, output);\n    output.close ();\n    input.close ();\n    dest.setLastModified (source.lastModified ());\n}\n"}
{"clone_type": "MT3", "method1_id": 2586916, "method2_id": 2915089, "code1": "private Long getGCD (Long a, Long b) {\n    if (b == 0) return a;\n    else return getGCD (b, a % b);\n\n}\n", "code2": "@Override\npublic long gcd (long x, long y) {\n    if (y == 0) return x;\n    else return gcd (y, x % y);\n\n}\n"}
{"clone_type": "MT3", "method1_id": 5744747, "method2_id": 16529080, "code1": "public void writeArchive (File archive) {\n    String dpPath = getPath ();\n    String [] filenames = new String [] {\"datapackage.xml\", \"routes.xml\", \"stations.xml\", \"streetalias.xml\"};\n    byte [] buf = new byte [1024];\n    try {\n        ZipOutputStream zos = new ZipOutputStream (new FileOutputStream (archive));\n        zos.setLevel (Deflater.DEFAULT_COMPRESSION);\n        for (int i = 0;\n        i < filenames.length; i ++) {\n            FileInputStream in = new FileInputStream (dpPath + filenames [i]);\n            zos.putNextEntry (new ZipEntry (filenames [i]));\n            int len;\n            while ((len = in.read (buf)) > 0) {\n                zos.write (buf, 0, len);\n            }\n            zos.closeEntry ();\n            in.close ();\n            System.out.println (\"wrote \" + filenames [i]);\n        }\n        FPUtil.zipDir (dpPath + \"route\", zos, dpPath.length ());\n        legDB_.dumpToZip (zos);\n        zos.close ();\n    } catch (IOException ex) {\n        ex.printStackTrace ();\n    }\n}\n", "code2": "public static boolean zip (File [] filesToZip, File zipFile) {\n    byte [] buf = new byte [2048];\n    try {\n        ZipOutputStream out = new ZipOutputStream (new FileOutputStream (zipFile));\n        for (int i = 0;\n        i < filesToZip.length; i ++) {\n            FileInputStream in = new FileInputStream (filesToZip [i]);\n            out.putNextEntry (new ZipEntry (filesToZip [i].getName ()));\n            int len;\n            while ((len = in.read (buf)) != - 1) {\n                out.write (buf, 0, len);\n            }\n            out.closeEntry ();\n            in.close ();\n        }\n        out.close ();\n    } catch (IOException e) {\n        System.err.println (\"Can't zip()\");\n        e.printStackTrace ();\n        return false;\n    }\n    return true;\n}\n"}
{"clone_type": "MT3", "method1_id": 2499053, "method2_id": 2530584, "code1": "public String encryptToMD5 (String info) {\n    byte [] digesta = null;\n    try {\n        MessageDigest alga = MessageDigest.getInstance (\"MD5\");\n        alga.update (info.getBytes ());\n        digesta = alga.digest ();\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace ();\n    }\n    String rs = byte2hex (digesta);\n    return rs;\n}\n", "code2": "public static String md5 (String text) {\n    try {\n        MessageDigest md = MessageDigest.getInstance (\"MD5\");\n        md.update (text.getBytes ());\n        return convertToHex (md.digest ());\n    } catch (Exception e) {\n        throw new RuntimeException (e.getMessage (), e);\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 5638421, "method2_id": 16958918, "code1": "private void copy (File in, File out) {\n    log.info (\"Copying yam file from: \" + in.getName () + \" to: \" + out.getName ());\n    try {\n        FileChannel ic = new FileInputStream (in).getChannel ();\n        FileChannel oc = new FileOutputStream (out).getChannel ();\n        ic.transferTo (0, ic.size (), oc);\n        ic.close ();\n        oc.close ();\n    } catch (IOException ioe) {\n        fail (\"Failed testing while copying modified file: \" + ioe.getMessage ());\n    }\n}\n", "code2": "public static boolean copyFile (final String src, final String dest) {\n    if (fileExists (src)) {\n        try {\n            FileChannel srcChannel = new FileInputStream (src).getChannel ();\n            FileChannel dstChannel = new FileOutputStream (dest).getChannel ();\n            dstChannel.transferFrom (srcChannel, 0, srcChannel.size ());\n            srcChannel.close ();\n            dstChannel.close ();\n            return true;\n        } catch (IOException e) {\n            Logger.getAnonymousLogger ().severe (e.getLocalizedMessage ());\n        }\n    }\n    return false;\n}\n"}
{"clone_type": "MT3", "method1_id": 13949581, "method2_id": 14175532, "code1": "public static String cryptografar (String senha) {\n    try {\n        MessageDigest md = MessageDigest.getInstance (\"MD5\");\n        md.update (senha.getBytes ());\n        BigInteger hash = new BigInteger (1, md.digest ());\n        senha = hash.toString (16);\n    } catch (NoSuchAlgorithmException ns) {\n        ns.printStackTrace ();\n    }\n    return senha;\n}\n", "code2": "public String getLongToken (String md5Str) {\n    MessageDigest md5 = null;\n    try {\n        md5 = MessageDigest.getInstance (\"MD5\");\n        md5.update (md5Str.getBytes (JspRunConfig.charset));\n    } catch (Exception e) {\n        e.printStackTrace ();\n    }\n    StringBuffer token = toHex (md5.digest ());\n    return token.toString ();\n}\n"}
{"clone_type": "MT3", "method1_id": 2723889, "method2_id": 15911781, "code1": "public Matrice transposee () {\n    final int ni = ni ();\n    final int nj = nj ();\n    final Matrice r = new Matrice (nj, ni);\n    for (int i = 0;\n    i < ni; i ++) {\n        for (int j = 0;\n        j < nj; j ++) {\n            r.a_ [j] [i] = a_ [i] [j];\n        }\n    }\n    return r;\n}\n", "code2": "public FloatMatrix transpose () {\n    FloatMatrix X = new FloatMatrix (n, m);\n    float [] [] C = X.getArray ();\n    for (int i = 0;\n    i < m; i ++) {\n        for (int j = 0;\n        j < n; j ++) {\n            C [j] [i] = A [i] [j];\n        }\n    }\n    return X;\n}\n"}
{"clone_type": "MT3", "method1_id": 1229100, "method2_id": 4630754, "code1": "public Matrix transpose () {\n    Matrix X = new Matrix (n, m);\n    double [] [] C = X.getArray ();\n    for (int i = 0;\n    i < m; i ++) {\n        for (int j = 0;\n        j < n; j ++) {\n            C [j] [i] = A [i] [j];\n        }\n    }\n    return X;\n}\n", "code2": "public static int [] [] reversalXandY (final int [] [] array) {\n    int col = array [0].length;\n    int row = array.length;\n    int [] [] result = new int [col] [row];\n    for (int y = 0;\n    y < col; y ++) {\n        for (int x = 0;\n        x < row; x ++) {\n            result [x] [y] = array [y] [x];\n        }\n    }\n    return result;\n}\n"}
{"clone_type": "MT3", "method1_id": 6226270, "method2_id": 20619879, "code1": "public static void copyFile (File in, File out) {\n    try {\n        FileChannel sourceChannel = new FileInputStream (in).getChannel ();\n        FileChannel destinationChannel = new FileOutputStream (out).getChannel ();\n        sourceChannel.transferTo (0, sourceChannel.size (), destinationChannel);\n        sourceChannel.close ();\n        destinationChannel.close ();\n    } catch (FileNotFoundException e) {\n        e.printStackTrace ();\n    } catch (IOException e) {\n        e.printStackTrace ();\n    }\n}\n", "code2": "public void copyLogic () {\n    if (getState () == States.Idle) {\n        setState (States.Synchronizing);\n        try {\n            FileChannel sourceChannel = new FileInputStream (new File (_properties.getProperty (\"binPath\") + name + \".class\")).getChannel ();\n            FileChannel destinationChannel = new FileOutputStream (new File (_properties.getProperty (\"agentFileLocation\") + name + \".class\")).getChannel ();\n            sourceChannel.transferTo (0, sourceChannel.size (), destinationChannel);\n            sourceChannel.close ();\n            destinationChannel.close ();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace ();\n        } catch (IOException e) {\n            e.printStackTrace ();\n        }\n        setState (States.Idle);\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 3229363, "method2_id": 23053699, "code1": "public void copyFile2 (String src, String dest) throws IOException {\n    String newLine = System.getProperty (\"line.separator\");\n    FileWriter fw = null;\n    FileReader fr = null;\n    BufferedReader br = null;\n    BufferedWriter bw = null;\n    File source = null;\n    try {\n        fr = new FileReader (src);\n        fw = new FileWriter (dest);\n        br = new BufferedReader (fr);\n        bw = new BufferedWriter (fw);\n        source = new File (src);\n        int fileLength = (int) source.length ();\n        char charBuff [] = new char [fileLength];\n        while (br.read (charBuff, 0, fileLength) != - 1) bw.write (charBuff, 0, fileLength);\n\n    } catch (FileNotFoundException fnfe) {\n        throw new FileCopyException (src + \" \" + QZ.PHRASES.getPhrase (\"35\"));\n    } catch (IOException ioe) {\n        throw new FileCopyException (QZ.PHRASES.getPhrase (\"36\"));\n    } finally {\n        try {\n            if (br != null) br.close ();\n\n            if (bw != null) bw.close ();\n\n        } catch (IOException ioe) {\n        }\n    }\n}\n", "code2": "public void copy (File from, String to) throws SystemException {\n    assert from != null;\n    File dst = new File (folder, to);\n    dst.getParentFile ().mkdirs ();\n    FileChannel in = null;\n    FileChannel out = null;\n    try {\n        if (! dst.exists ()) dst.createNewFile ();\n\n        in = new FileInputStream (from).getChannel ();\n        out = new FileOutputStream (dst).getChannel ();\n        in.transferTo (0, in.size (), out);\n    } catch (IOException e) {\n        throw new SystemException (e);\n    } finally {\n        try {\n            if (in != null) in.close ();\n\n        } catch (Exception e1) {\n        }\n        try {\n            if (out != null) out.close ();\n\n        } catch (Exception e1) {\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 11986970, "method2_id": 21656668, "code1": "public void Copy () throws IOException {\n    if (! FileDestination.exists ()) {\n        FileDestination.createNewFile ();\n    }\n    FileChannel source = null;\n    FileChannel destination = null;\n    try {\n        source = new FileInputStream (FileSource).getChannel ();\n        destination = new FileOutputStream (FileDestination).getChannel ();\n        destination.transferFrom (source, 0, source.size ());\n    } finally {\n        if (source != null) {\n            source.close ();\n        }\n        if (destination != null) {\n            destination.close ();\n        }\n    }\n}\n", "code2": "private void copyResourceToFile (final String resourceFilename, final String destinationFilename) throws IOException {\n    InputStream inStream = null;\n    OutputStream outStream = null;\n    try {\n        inStream = MatsimResource.getAsInputStream (resourceFilename);\n        outStream = new FileOutputStream (destinationFilename);\n        IOUtils.copyStream (inStream, outStream);\n    } finally {\n        if (inStream != null) {\n            try {\n                inStream.close ();\n            } catch (IOException e) {\n                e.printStackTrace ();\n            }\n        }\n        if (outStream != null) {\n            try {\n                outStream.close ();\n            } catch (IOException e) {\n                e.printStackTrace ();\n            }\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 438652, "method2_id": 16338011, "code1": "private String MD5Sum (String input) {\n    String hashtext = null;\n    try {\n        MessageDigest md = MessageDigest.getInstance (\"MD5\");\n        md.reset ();\n        md.update (input.getBytes ());\n        byte [] digest = md.digest ();\n        BigInteger bigInt = new BigInteger (1, digest);\n        hashtext = bigInt.toString (16);\n        while (hashtext.length () < 32) {\n            hashtext = \"0\" + hashtext;\n        }\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace ();\n    }\n    return hashtext;\n}\n", "code2": "protected byte [] getHashedID (String ID) {\n    try {\n        MessageDigest md5 = MessageDigest.getInstance (\"MD5\");\n        md5.reset ();\n        md5.update (ID.getBytes ());\n        byte [] digest = md5.digest ();\n        byte [] bytes = new byte [WLDB_ID_SIZE];\n        for (int i = 0;\n        i < bytes.length; i ++) {\n            bytes [i] = digest [i];\n        }\n        return bytes;\n    } catch (NoSuchAlgorithmException exception) {\n        System.err.println (\"Java VM is not compatible\");\n        exit ();\n        return null;\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 5815213, "method2_id": 8047989, "code1": "public static String md5Hash (String inString) throws TopicSpacesException {\n    try {\n        MessageDigest md5 = MessageDigest.getInstance (\"MD5\");\n        md5.update (inString.getBytes ());\n        byte [] array = md5.digest ();\n        StringBuffer buf = new StringBuffer ();\n        int len = array.length;\n        for (int i = 0;\n        i < len; i ++) {\n            int b = array [i] & 0xFF;\n            buf.append (Integer.toHexString (b));\n        }\n        return buf.toString ();\n    } catch (Exception x) {\n        throw new TopicSpacesException (x);\n    }\n}\n", "code2": "protected byte [] getHashedID (String ID) {\n    try {\n        MessageDigest md5 = MessageDigest.getInstance (\"MD5\");\n        md5.reset ();\n        md5.update (ID.getBytes ());\n        byte [] digest = md5.digest ();\n        byte [] bytes = new byte [WLDB_ID_SIZE];\n        for (int i = 0;\n        i < bytes.length; i ++) {\n            bytes [i] = digest [i];\n        }\n        return bytes;\n    } catch (NoSuchAlgorithmException exception) {\n        System.err.println (\"Java VM is not compatible\");\n        exit ();\n        return null;\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 2009328, "method2_id": 12800568, "code1": "private String storeProxy (String proxyPath, String userName) throws IOException {\n    File inputFile = new File (proxyPath);\n    String outfile = slcsFactory.getStoreDirectory () + File.separator + userName + File.separator + PROXYFILENAME;\n    File outputFile = new File (outfile);\n    FileReader in = new FileReader (inputFile);\n    FileWriter out = new FileWriter (outputFile);\n    int c;\n    while ((c = in.read ()) != - 1) out.write (c);\n\n    in.close ();\n    out.close ();\n    Process p = Runtime.getRuntime ().exec (\"/bin/chmod 600 \" + outfile);\n    try {\n        p.waitFor ();\n    } catch (InterruptedException e) {\n        e.printStackTrace ();\n    }\n    return outfile;\n}\n", "code2": "public void exportFile () {\n    String expfolder = PropertyHandler.getInstance ().getProperty (PropertyHandler.KINDLE_EXPORT_FOLDER_KEY);\n    File out = new File (expfolder + File.separator + previewInfo.getTitle () + \".prc\");\n    File f = new File (absPath);\n    try {\n        FileOutputStream fout = new FileOutputStream (out);\n        FileInputStream fin = new FileInputStream (f);\n        int read = 0;\n        byte [] buffer = new byte [1024 * 1024];\n        while ((read = fin.read (buffer)) > 0) {\n            fout.write (buffer, 0, read);\n        }\n        fin.close ();\n        fout.close ();\n    } catch (FileNotFoundException e) {\n        e.printStackTrace ();\n    } catch (IOException e) {\n        e.printStackTrace ();\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 5048822, "method2_id": 18194344, "code1": "public static String md5 (String string) throws NoSuchAlgorithmException {\n    MessageDigest md5 = MessageDigest.getInstance (\"MD5\");\n    md5.reset ();\n    md5.update (string.getBytes ());\n    byte [] result = md5.digest ();\n    StringBuffer hexString = new StringBuffer ();\n    for (int i = 0;\n    i < result.length; i ++) {\n        hexString.append (Integer.toHexString ((result [i] & 0xFF) | 0x100).toLowerCase ().substring (1, 3));\n    }\n    return hexString.toString ();\n}\n", "code2": "public void setPassword (String plaintext) throws java.security.NoSuchAlgorithmException {\n    StringBuffer encrypted = new StringBuffer ();\n    java.security.MessageDigest digest = java.security.MessageDigest.getInstance (\"MD5\");\n    digest.update (plaintext.getBytes ());\n    byte [] digestArray = digest.digest ();\n    for (int i = 0;\n    i < digestArray.length; i ++) {\n        encrypted.append (byte2hex (digestArray [i]));\n    }\n    setEncryptedPassword (encrypted.toString ());\n}\n"}
{"clone_type": "MT3", "method1_id": 5399593, "method2_id": 9361117, "code1": "public synchronized String encrypt (String plaintext) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n    MessageDigest md = null;\n    md = MessageDigest.getInstance (\"SHA\");\n    md.update (plaintext.getBytes (\"UTF-8\"));\n    byte raw [] = md.digest ();\n    String hash = (new BASE64Encoder ()).encode (raw);\n    return hash;\n}\n", "code2": "protected String encrypt (String text) throws Exception {\n    MessageDigest md = MessageDigest.getInstance (\"SHA\");\n    md.update (text.getBytes (\"UTF-8\"));\n    byte raw [] = md.digest ();\n    String hash = (new BASE64Encoder ()).encode (raw);\n    return hash;\n}\n"}
{"clone_type": "MT3", "method1_id": 1229100, "method2_id": 15236778, "code1": "public Matrix transpose () {\n    Matrix X = new Matrix (n, m);\n    double [] [] C = X.getArray ();\n    for (int i = 0;\n    i < m; i ++) {\n        for (int j = 0;\n        j < n; j ++) {\n            C [j] [i] = A [i] [j];\n        }\n    }\n    return X;\n}\n", "code2": "public static Element [] [] transpose (Element [] [] matrix) {\n    int n = matrix.length;\n    for (int i = 0;\n    i < n; i ++) {\n        for (int j = i + 1;\n        j < n; j ++) {\n            Element temp = matrix [i] [j];\n            matrix [i] [j] = matrix [j] [i];\n            matrix [j] [i] = temp;\n        }\n    }\n    return matrix;\n}\n"}
{"clone_type": "MT3", "method1_id": 7524607, "method2_id": 22608103, "code1": "private void copyFile (String file) {\n    FileChannel inChannel = null;\n    FileChannel outChannel = null;\n    try {\n        Date dt = new Date ();\n        SimpleDateFormat df = new SimpleDateFormat (\"yyyyMMdd HHmmss \");\n        File in = new File (file);\n        String [] name = file.split (\"\\\\\\\\\");\n        File out = new File (\".\\\\xml_archiv\\\\\" + df.format (dt) + name [name.length - 1]);\n        inChannel = new FileInputStream (in).getChannel ();\n        outChannel = new FileOutputStream (out).getChannel ();\n        inChannel.transferTo (0, inChannel.size (), outChannel);\n    } catch (IOException e) {\n        System.err.println (\"Copy error!\");\n        System.err.println (\"Error: \" + e.getMessage ());\n    } finally {\n        if (inChannel != null) {\n            try {\n                inChannel.close ();\n            } catch (IOException ex) {\n                Logger.getLogger (ImportIntoDb.class.getName ()).log (Level.SEVERE, null, ex);\n            }\n        }\n        if (outChannel != null) {\n            try {\n                outChannel.close ();\n            } catch (IOException ex) {\n                Logger.getLogger (ImportIntoDb.class.getName ()).log (Level.SEVERE, null, ex);\n            }\n        }\n    }\n}\n", "code2": "public static boolean copyFile (File sourceFile, File destFile) {\n    FileChannel srcChannel = null;\n    FileChannel dstChannel = null;\n    try {\n        srcChannel = new FileInputStream (sourceFile).getChannel ();\n        dstChannel = new FileOutputStream (destFile).getChannel ();\n        long pos = 0;\n        long count = srcChannel.size ();\n        if (count > MAX_BLOCK_SIZE) {\n            count = MAX_BLOCK_SIZE;\n        }\n        long transferred = Long.MAX_VALUE;\n        while (transferred > 0) {\n            transferred = dstChannel.transferFrom (srcChannel, pos, count);\n            pos = transferred;\n        }\n    } catch (IOException e) {\n        return false;\n    } finally {\n        if (srcChannel != null) {\n            try {\n                srcChannel.close ();\n            } catch (IOException e) {\n            }\n        }\n        if (dstChannel != null) {\n            try {\n                dstChannel.close ();\n            } catch (IOException e) {\n            }\n        }\n    }\n    return true;\n}\n"}
{"clone_type": "MT3", "method1_id": 4361391, "method2_id": 19121580, "code1": "public static String getHash (String key) {\n    try {\n        MessageDigest digest = MessageDigest.getInstance (\"MD5\");\n        digest.update (key.getBytes ());\n        return new BigInteger (digest.digest ()).toString (16);\n    } catch (NoSuchAlgorithmException e) {\n        return key;\n    }\n}\n", "code2": "public static String toMd5 (String s) {\n    String res = \"\";\n    try {\n        MessageDigest digest = java.security.MessageDigest.getInstance (\"MD5\");\n        digest.update (s.getBytes ());\n        byte messageDigest [] = digest.digest ();\n        res = toHexString (messageDigest);\n    } catch (NoSuchAlgorithmException e) {\n    }\n    return res;\n}\n"}
{"clone_type": "MT3", "method1_id": 2440033, "method2_id": 13792092, "code1": "public Blowfish (String password) {\n    MessageDigest digest = null;\n    try {\n        digest = MessageDigest.getInstance (\"SHA1\");\n        digest.update (password.getBytes ());\n    } catch (Exception e) {\n        System.out.println (e);\n    }\n    m_bfish = new BlowfishCBC (digest.digest (), 0);\n    digest.reset ();\n}\n", "code2": "public NodeId generateTopicId (String topicName) {\n    MessageDigest md = null;\n    try {\n        md = MessageDigest.getInstance (\"SHA\");\n    } catch (NoSuchAlgorithmException e) {\n        System.err.println (\"No SHA support!\");\n    }\n    md.update (topicName.getBytes ());\n    byte [] digest = md.digest ();\n    NodeId newId = new NodeId (digest);\n    return newId;\n}\n"}
{"clone_type": "MT3", "method1_id": 2510242, "method2_id": 4193495, "code1": "@Override\npublic void writeTo (OutputStream out) throws IOException {\n    OutputStream compressed = new GZIPOutputStream (out);\n    IOUtils.copy (wrappedEntity.getContent (), compressed);\n    compressed.close ();\n}\n", "code2": "public String stringOfUrl (String addr) throws IOException {\n    ByteArrayOutputStream output = new ByteArrayOutputStream ();\n    URL url = new URL (addr);\n    IOUtils.copy (url.openStream (), output);\n    return output.toString ();\n}\n"}
{"clone_type": "MT3", "method1_id": 3743400, "method2_id": 23191460, "code1": "private static byte [] calcMd5 (String pass) {\n    try {\n        MessageDigest digest = java.security.MessageDigest.getInstance (\"MD5\");\n        digest.update (pass.getBytes (), 0, pass.length ());\n        byte [] hash = digest.digest ();\n        return hash;\n    } catch (NoSuchAlgorithmException e) {\n        System.err.println (\"No MD5 algorithm found\");\n        throw new RuntimeException (e);\n    }\n}\n", "code2": "private static String hashPassword (String password) {\n    try {\n        String hashword = null;\n        MessageDigest md5 = MessageDigest.getInstance (\"MD5\");\n        md5.update (password.getBytes ());\n        BigInteger hash = new BigInteger (1, md5.digest ());\n        hashword = hash.toString (16);\n        return hashword;\n    } catch (NoSuchAlgorithmException ex) {\n        throw new RuntimeException (ex);\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 19549852, "method2_id": 21498404, "code1": "public Matrix transpose () {\n    Matrix X = new Matrix (n, m);\n    double [] [] C = X.getArray ();\n    for (int i = 0;\n    i < m; i ++) {\n        for (int j = 0;\n        j < n; j ++) {\n            C [j] [i] = A [i] [j];\n        }\n    }\n    return X;\n}\n", "code2": "public Matrix transpose () {\n    Matrix matrix = new Matrix ();\n    matrix.m = new double [m [0].length] [m.length];\n    for (int i = 0;\n    i < m.length; i ++) {\n        for (int j = 0;\n        j < m [0].length; j ++) {\n            matrix.m [j] [i] = m [i] [j];\n        }\n    }\n    return matrix;\n}\n"}
{"clone_type": "MT3", "method1_id": 8162671, "method2_id": 15256957, "code1": "public static String getMD5Hash (String hashthis) throws NoSuchAlgorithmException {\n    byte [] key = \"PATIENTISAUTHENTICATION\".getBytes ();\n    MessageDigest md5 = MessageDigest.getInstance (\"MD5\");\n    md5.update (hashthis.getBytes ());\n    return new String (HashUtility.base64Encode (md5.digest (key)));\n}\n", "code2": "public static String toSHA (String message) throws NoSuchAlgorithmException {\n    MessageDigest digest = MessageDigest.getInstance (\"SHA-512\");\n    digest.update (message.getBytes ());\n    return DHKeyExchange.toHexString (digest.digest ());\n}\n"}
{"clone_type": "MT3", "method1_id": 1477578, "method2_id": 16733950, "code1": "public static void copy (FileInputStream source, FileOutputStream dest) throws IOException {\n    FileChannel in = null, out = null;\n    try {\n        in = source.getChannel ();\n        out = dest.getChannel ();\n        long size = in.size ();\n        MappedByteBuffer buf = in.map (FileChannel.MapMode.READ_ONLY, 0, size);\n        out.write (buf);\n    } finally {\n        if (in != null) in.close ();\n\n        if (out != null) out.close ();\n\n    }\n}\n", "code2": "public static void copyFile (File sourceFile, File destFile) throws IOException {\n    if (! destFile.exists ()) destFile.createNewFile ();\n\n    FileChannel source = null;\n    FileChannel destination = null;\n    try {\n        source = new FileInputStream (sourceFile).getChannel ();\n        destination = new FileOutputStream (destFile).getChannel ();\n        destination.transferFrom (source, 0, source.size ());\n    } finally {\n        if (source != null) source.close ();\n\n        if (destination != null) destination.close ();\n\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 17989082, "method2_id": 21672020, "code1": "public static int search (int [] array, int value) {\n    int end = array.length - 1;\n    int start = 0;\n    int middle;\n    while (start < end) {\n        middle = (start + end) / 2;\n        if (value > array [middle]) {\n            start = middle + 1;\n        } else if (value < array [middle]) {\n            end = middle - 1;\n        } else {\n            return middle;\n        }\n\n    }\n    return - 1;\n}\n", "code2": "public int binarySearch (final short key) {\n    int low = 0;\n    int middle;\n    int high = super.size () - 1;\n    short middleValue;\n    while (low <= high) {\n        middle = (low + high) / 2;\n        middleValue = this.shortArray [middle];\n        if (middleValue < key) {\n            low = middle + 1;\n        } else if (middleValue > key) {\n            high = middle - 1;\n        } else {\n            return middle;\n        }\n\n    }\n    return - (low + 1);\n}\n"}
{"clone_type": "MT3", "method1_id": 10318446, "method2_id": 19117993, "code1": "public static void copy (String sourceFile, String targetFile) throws IOException {\n    FileChannel sourceChannel = new FileInputStream (sourceFile).getChannel ();\n    FileChannel targetChannel = new FileOutputStream (targetFile).getChannel ();\n    targetChannel.transferFrom (sourceChannel, 0, sourceChannel.size ());\n    sourceChannel.close ();\n    targetChannel.close ();\n}\n", "code2": "public static final void copyFile (File argSource, File argDestination) throws IOException {\n    FileChannel srcChannel = new FileInputStream (argSource).getChannel ();\n    FileChannel dstChannel = new FileOutputStream (argDestination).getChannel ();\n    try {\n        dstChannel.transferFrom (srcChannel, 0, srcChannel.size ());\n    } finally {\n        srcChannel.close ();\n        dstChannel.close ();\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 12188290, "method2_id": 19362432, "code1": "public static void zipFiles (String filename, String [] files) throws IOException {\n    ZipOutputStream zip = new ZipOutputStream (new BufferedOutputStream (new FileOutputStream (filename)));\n    byte [] buffer = new byte [10000];\n    for (int i = 0;\n    i < files.length; i ++) {\n        File f = new File (files [i]);\n        if (f.exists ()) {\n            BufferedInputStream in = new BufferedInputStream (new FileInputStream (files [i]));\n            zip.putNextEntry (new ZipEntry (files [i]));\n            boolean done = false;\n            while (! done) {\n                int num = in.read (buffer);\n                if (num > 0) {\n                    zip.write (buffer, 0, num);\n                }\n                done = (num < buffer.length);\n            }\n            in.close ();\n        }\n    }\n    zip.flush ();\n    zip.close ();\n}\n", "code2": "public static void zipFiles (String zipFilePath, String [] filenames) {\n    byte [] buf = new byte [1024];\n    try {\n        String outFilename = zipFilePath;\n        ZipOutputStream out = new ZipOutputStream (new FileOutputStream (outFilename));\n        for (int i = 0;\n        i < filenames.length; i ++) {\n            File file = new File (filenames [i]);\n            if (file.exists ()) {\n                FileInputStream in = new FileInputStream (filenames [i]);\n                out.putNextEntry (new ZipEntry (filenames [i]));\n                int len;\n                while ((len = in.read (buf)) > 0) {\n                    out.write (buf, 0, len);\n                }\n                out.closeEntry ();\n                in.close ();\n            }\n        }\n        out.close ();\n    } catch (IOException e) {\n        e.printStackTrace ();\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 14106232, "method2_id": 16142024, "code1": "public void copyFile (File from, File to) {\n    try {\n        InputStream in = new FileInputStream (from);\n        OutputStream out = new FileOutputStream (to);\n        int readCount;\n        byte [] bytes = new byte [1024];\n        while ((readCount = in.read (bytes)) != - 1) {\n            out.write (bytes, 0, readCount);\n        }\n        out.flush ();\n        in.close ();\n        out.close ();\n    } catch (Exception ex) {\n        throw new BuildException (ex.getMessage (), ex);\n    }\n}\n", "code2": "private static final void copyFile (File srcFile, File destDir, byte [] buffer) {\n    try {\n        File destFile = new File (destDir, srcFile.getName ());\n        InputStream in = new FileInputStream (srcFile);\n        OutputStream out = new FileOutputStream (destFile);\n        int bytesRead;\n        while ((bytesRead = in.read (buffer)) != - 1) out.write (buffer, 0, bytesRead);\n\n        in.close ();\n        out.close ();\n    } catch (IOException ioe) {\n        System.err.println (\"Couldn't copy file '\" + srcFile + \"' to directory '\" + destDir + \"'\");\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 11418746, "method2_id": 22022715, "code1": "private String buildShaHashOf (String source) {\n    try {\n        MessageDigest md = MessageDigest.getInstance (\"SHA\");\n        md.update (source.getBytes ());\n        return new BigInteger (1, md.digest ()).toString (16);\n    } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace ();\n        return \"\";\n    }\n}\n", "code2": "protected static final byte [] digest (String s) {\n    byte [] ret = null;\n    try {\n        MessageDigest md = MessageDigest.getInstance (\"MD5\");\n        md.update (s.getBytes ());\n        ret = md.digest ();\n    } catch (NoSuchAlgorithmException e) {\n        System.err.println (\"no message digest algorithm available!\");\n        System.exit (1);\n    }\n    return ret;\n}\n"}
{"clone_type": "MT3", "method1_id": 9482304, "method2_id": 9482318, "code1": "public void sendDirAllFilesToStream (String FilesDirStr, OutputStream httpout, Hashtable newNamesTable) throws Exception {\n    if (! FilesDirStr.endsWith (sep)) {\n        FilesDirStr += sep;\n    }\n    if (null == newNamesTable) {\n        newNamesTable = new Hashtable ();\n    }\n    FileUtils.getInstance ().createDirectory (FilesDirStr);\n    BufferedInputStream in = null;\n    byte dataBuff [] = new byte [bufferSize];\n    File filesDir = new File (FilesDirStr + \".\");\n    if ((filesDir.exists ()) && (filesDir.isDirectory ())) {\n        String fileList [] = filesDir.list ();\n        if (fileList.length > 0) {\n            ZipOutputStream outStream = new ZipOutputStream (httpout);\n            for (int pos = 0;\n            pos < fileList.length; pos ++) {\n                if (! new File (FilesDirStr + fileList [pos]).isDirectory ()) {\n                    String oldName = fileList [pos];\n                    String oldFileName = FilesDirStr + oldName;\n                    String newName = oldName;\n                    if (newNamesTable.containsKey (oldName)) {\n                        newName = (String) newNamesTable.get (oldName);\n                        if ((newName == null) && (\"\".equals (newName))) {\n                            newName = oldName;\n                        }\n                    }\n                    in = new BufferedInputStream (new FileInputStream (oldFileName), bufferSize);\n                    ZipEntry entry = new ZipEntry (newName);\n                    outStream.putNextEntry (entry);\n                    int writeLen;\n                    while ((writeLen = in.read (dataBuff)) > 0) {\n                        outStream.write (dataBuff, 0, writeLen);\n                    }\n                    outStream.flush ();\n                    outStream.closeEntry ();\n                    in.close ();\n                }\n            }\n            outStream.finish ();\n            httpout.flush ();\n        } else {\n            throw new Exception (\"FilesDirStr is empty !\");\n        }\n    }\n}\n", "code2": "public void sendJobOutputDirPidFilesToZipStream (String userbaseDir, String FilesDirStr, ZipOutputStream zipout, String outputLogType, String pidID) throws Exception {\n    System.out.println (userbaseDir + FilesDirStr);\n    if (! userbaseDir.endsWith (sep)) {\n        userbaseDir += sep;\n    }\n    if (! FilesDirStr.endsWith (sep)) {\n        FilesDirStr += sep;\n    }\n    BufferedInputStream in = null;\n    byte dataBuff [] = new byte [bufferSize];\n    File filesDir = new File (userbaseDir + FilesDirStr + \".\");\n    if ((filesDir.exists ()) && (filesDir.isDirectory ())) {\n        String fileList [] = filesDir.list ();\n        if (fileList.length > 0) {\n            for (int pos = 0;\n            pos < fileList.length; pos ++) {\n                String entry = fileList [pos];\n                String entryPath = FilesDirStr + entry;\n                String entryFullPath = userbaseDir + entryPath;\n                if (new File (entryFullPath).isFile ()) {\n                    boolean sendFileToZip = true;\n                    if (FileUtils.getInstance ().isLogFileName (entry)) {\n                        if (\"none\".equals (outputLogType)) {\n                            sendFileToZip = false;\n                        }\n                    }\n                    if (FileUtils.getInstance ().isLinkFile (entryFullPath)) {\n                        sendFileToZip = false;\n                    }\n                    if (sendFileToZip) {\n                        String entry2 = FileUtils.getInstance ().getNormalFromPidName (entry);\n                        String entryPath2 = FilesDirStr + entry2;\n                        in = new BufferedInputStream (new FileInputStream (entryFullPath), bufferSize);\n                        ZipEntry zipEntry = new ZipEntry (entryPath2);\n                        zipout.putNextEntry (zipEntry);\n                        int writeLen;\n                        while ((writeLen = in.read (dataBuff)) > 0) {\n                            zipout.write (dataBuff, 0, writeLen);\n                        }\n                        zipout.flush ();\n                        zipout.closeEntry ();\n                        in.close ();\n                    }\n                }\n            }\n        } else {\n        }\n    } else {\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 10689659, "method2_id": 13122191, "code1": "public static void copyFile (File fromFile, File toFile) throws OWFileCopyException {\n    try {\n        FileChannel src = new FileInputStream (fromFile).getChannel ();\n        FileChannel dest = new FileOutputStream (toFile).getChannel ();\n        dest.transferFrom (src, 0, src.size ());\n        src.close ();\n        dest.close ();\n    } catch (IOException e) {\n        throw (new OWFileCopyException (\"An error occurred while copying a file\", e));\n    }\n}\n", "code2": "public static void copy (String inputFile, String outputFile) throws EDITSException {\n    try {\n        FileReader in = new FileReader (inputFile);\n        FileWriter out = new FileWriter (outputFile);\n        int c;\n        while ((c = in.read ()) != - 1) out.write (c);\n\n        in.close ();\n        out.close ();\n    } catch (Exception e) {\n        throw new EDITSException (\"Could not copy \" + inputFile + \" into \" + outputFile + \" because:\\n\" + e.getMessage ());\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 7034031, "method2_id": 14624031, "code1": "private void copyFile (File sourceFile, File destFile) throws IOException {\n    if (log.isDebugEnabled ()) {\n        log.debug (\"CopyFile : Source[\" + sourceFile.getAbsolutePath () + \"] Dest[\" + destFile.getAbsolutePath () + \"]\");\n    }\n    if (! destFile.exists ()) {\n        destFile.createNewFile ();\n    }\n    FileChannel source = null;\n    FileChannel destination = null;\n    try {\n        source = new FileInputStream (sourceFile).getChannel ();\n        destination = new FileOutputStream (destFile).getChannel ();\n        destination.transferFrom (source, 0, source.size ());\n    } finally {\n        if (source != null) {\n            source.close ();\n        }\n        if (destination != null) {\n            destination.close ();\n        }\n    }\n}\n", "code2": "public static void copyFile (File in, File out) throws ObclipseException {\n    try {\n        FileChannel inChannel = null;\n        FileChannel outChannel = null;\n        try {\n            inChannel = new FileInputStream (in).getChannel ();\n            outChannel = new FileOutputStream (out).getChannel ();\n            inChannel.transferTo (0, inChannel.size (), outChannel);\n        } finally {\n            if (inChannel != null) {\n                inChannel.close ();\n            }\n            if (outChannel != null) {\n                outChannel.close ();\n            }\n        }\n    } catch (FileNotFoundException e) {\n        Msg.error (\"The file ''{0}'' to copy does not exist!\", e, in.getAbsolutePath ());\n    } catch (IOException e) {\n        Msg.ioException (in, out, e);\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 5638421, "method2_id": 14729256, "code1": "private void copy (File in, File out) {\n    log.info (\"Copying yam file from: \" + in.getName () + \" to: \" + out.getName ());\n    try {\n        FileChannel ic = new FileInputStream (in).getChannel ();\n        FileChannel oc = new FileOutputStream (out).getChannel ();\n        ic.transferTo (0, ic.size (), oc);\n        ic.close ();\n        oc.close ();\n    } catch (IOException ioe) {\n        fail (\"Failed testing while copying modified file: \" + ioe.getMessage ());\n    }\n}\n", "code2": "public static void copyFile (File file, String pathExport) throws IOException {\n    File out = new File (pathExport);\n    FileChannel sourceChannel = new FileInputStream (file).getChannel ();\n    FileChannel destinationChannel = new FileOutputStream (out).getChannel ();\n    sourceChannel.transferTo (0, sourceChannel.size (), destinationChannel);\n    sourceChannel.close ();\n    destinationChannel.close ();\n}\n"}
{"clone_type": "MT3", "method1_id": 2214602, "method2_id": 8292297, "code1": "private void appendTempFile (File temp, OutputStream out) throws IOException {\n    InputStream in = null;\n    try {\n        in = new FileInputStream (temp);\n        IOUtils.copy (in, out);\n    } finally {\n        IOUtil.closeAndIgnoreErrors (in);\n    }\n}\n", "code2": "public void sendContent (OutputStream out, Range range, Map < String, String > params, String contentType) throws IOException {\n    LOGGER.debug (\"GET REQUEST OR RESPONSE - Send content: \" + file.getAbsolutePath ());\n    FileInputStream in = null;\n    try {\n        in = new FileInputStream (file);\n        int bytes = IOUtils.copy (in, out);\n        LOGGER.debug (\"wrote bytes:  \" + bytes);\n        out.flush ();\n    } finally {\n        IOUtils.closeQuietly (in);\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 10826994, "method2_id": 18542300, "code1": "public static void copyFile (File in, File out) throws EnhancedException {\n    try {\n        FileChannel sourceChannel = new FileInputStream (in).getChannel ();\n        FileChannel destinationChannel = new FileOutputStream (out).getChannel ();\n        sourceChannel.transferTo (0, sourceChannel.size (), destinationChannel);\n        sourceChannel.close ();\n        destinationChannel.close ();\n    } catch (Exception e) {\n        throw new EnhancedException (\"Could not copy file \" + in.getAbsolutePath () + \" to \" + out.getAbsolutePath () + \".\", e);\n    }\n}\n", "code2": "public static void copy (File src, File dest) throws IOException {\n    FileChannel srcChannel = new FileInputStream (src).getChannel ();\n    FileChannel destChannel = new FileOutputStream (dest).getChannel ();\n    destChannel.transferFrom (srcChannel, 0, srcChannel.size ());\n    srcChannel.close ();\n    destChannel.close ();\n}\n"}
{"clone_type": "MT3", "method1_id": 47347, "method2_id": 216273, "code1": "private void jButton3ActionPerformed (java.awt.event.ActionEvent evt) {\n    JFileChooser pickFile = new JFileChooser ();\n    pickFile.setCurrentDirectory (new File (txtPreviewFolder.getText ()));\n    pickFile.setFileSelectionMode (JFileChooser.DIRECTORIES_ONLY);\n    int retVal = pickFile.showOpenDialog (super.getParent ());\n    if (retVal == JFileChooser.APPROVE_OPTION) {\n        txtPreviewFolder.setText (pickFile.getSelectedFile ().toString ());\n    }\n}\n", "code2": "public void actionPerformed (ActionEvent e) {\n    dirChooser.setFileSelectionMode (JFileChooser.FILES_AND_DIRECTORIES);\n    int i = dirChooser.showOpenDialog (gimme ());\n    if (i == JFileChooser.APPROVE_OPTION) {\n        fileBrowserField.setText (dirChooser.getSelectedFile ().toString ());\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 1913136, "method2_id": 20368648, "code1": "private void copyFile (File in, File out) throws Exception {\n    FileChannel sourceChannel = new FileInputStream (in).getChannel ();\n    FileChannel destinationChannel = new FileOutputStream (out).getChannel ();\n    sourceChannel.transferTo (0, sourceChannel.size (), destinationChannel);\n    sourceChannel.close ();\n    destinationChannel.close ();\n}\n", "code2": "private void copyFile (File in, File out) {\n    try {\n        FileChannel sourceChannel = new FileInputStream (in).getChannel ();\n        FileChannel destinationChannel = new FileOutputStream (out).getChannel ();\n        sourceChannel.transferTo (0, sourceChannel.size (), destinationChannel);\n        sourceChannel.close ();\n        destinationChannel.close ();\n    } catch (IOException ex) {\n        ex.printStackTrace ();\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 10478671, "method2_id": 13048962, "code1": "private void copyFile (File sourcefile, File targetfile) {\n    BufferedInputStream in = null;\n    BufferedOutputStream out = null;\n    try {\n        in = new BufferedInputStream (new FileInputStream (sourcefile));\n        out = new BufferedOutputStream (new FileOutputStream (targetfile));\n        byte [] buffer = new byte [4096];\n        int bytesread = 0;\n        while ((bytesread = in.read (buffer)) >= 0) {\n            out.write (buffer, 0, bytesread);\n        }\n    } catch (IOException e) {\n        e.printStackTrace ();\n    } finally {\n        try {\n            if (in != null) {\n                in.close ();\n            }\n            if (out != null) {\n                out.close ();\n            }\n        } catch (IOException e) {\n            e.printStackTrace ();\n        }\n    }\n}\n", "code2": "public final void saveAsCopy (String current_image, String destination) {\n    BufferedInputStream from = null;\n    BufferedOutputStream to = null;\n    String source = temp_dir + key + current_image;\n    try {\n        from = new BufferedInputStream (new FileInputStream (source));\n        to = new BufferedOutputStream (new FileOutputStream (destination));\n        byte [] buffer = new byte [65535];\n        int bytes_read;\n        while ((bytes_read = from.read (buffer)) != - 1) to.write (buffer, 0, bytes_read);\n\n    } catch (Exception e) {\n        LogWriter.writeLog (\"Exception \" + e + \" copying file\");\n    }\n    try {\n        to.close ();\n        from.close ();\n    } catch (Exception e) {\n        LogWriter.writeLog (\"Exception \" + e + \" closing files\");\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 10067028, "method2_id": 14711051, "code1": "public static void copyFile (File source, File destination) throws IOException {\n    FileChannel in = null;\n    FileChannel out = null;\n    try {\n        in = new FileInputStream (source).getChannel ();\n        out = new FileOutputStream (destination).getChannel ();\n        long size = in.size ();\n        MappedByteBuffer buffer = in.map (FileChannel.MapMode.READ_ONLY, 0, size);\n        out.write (buffer);\n    } finally {\n        if (in != null) {\n            in.close ();\n        }\n        if (out != null) {\n            out.close ();\n        }\n    }\n}\n", "code2": "public static void copyFile (final File in, final File out) throws IOException {\n    final FileChannel inChannel = new FileInputStream (in).getChannel ();\n    final FileChannel outChannel = new FileOutputStream (out).getChannel ();\n    try {\n        inChannel.transferTo (0, inChannel.size (), outChannel);\n    } catch (IOException e) {\n        throw e;\n    } finally {\n        if (inChannel != null) {\n            inChannel.close ();\n        }\n        if (outChannel != null) {\n            outChannel.close ();\n        }\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 8843442, "method2_id": 16386620, "code1": "public static void copyFile (String target, String source) {\n    try {\n        FileChannel srcChannel = new FileInputStream (source).getChannel ();\n        FileChannel dstChannel = new FileOutputStream (target).getChannel ();\n        dstChannel.transferFrom (srcChannel, 0, srcChannel.size ());\n        srcChannel.close ();\n        dstChannel.close ();\n    } catch (IOException e) {\n        ExceptionHelper.showErrorDialog (e);\n    }\n}\n", "code2": "public static void main (String [] args) {\n    try {\n        FileReader reader = new FileReader (args [0]);\n        FileWriter writer = new FileWriter (args [1]);\n        html2xhtml (reader, writer);\n        writer.close ();\n        reader.close ();\n    } catch (Exception e) {\n        freemind.main.Resources.getInstance ().logException (e);\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 1157033, "method2_id": 7271178, "code1": "protected void copyFile (File src, File dest) throws IOException {\n    if (src.exists ()) {\n        if (src.isDirectory ()) {\n            dest.mkdir ();\n            File children [] = src.listFiles ();\n            for (int i = 0;\n            i < children.length; i ++) {\n                File srcChild = children [i];\n                File destChild = new File (dest, srcChild.getName ());\n                copyFile (srcChild, destChild);\n            }\n        } else {\n            dest.createNewFile ();\n            OutputStream out = new FileOutputStream (dest);\n            InputStream in = new FileInputStream (src);\n            int c;\n            while ((c = in.read ()) >= 0) {\n                out.write (c);\n            }\n            in.close ();\n            out.close ();\n        }\n    }\n}\n", "code2": "public static void copyDirectory (File srcPath, File dstPath) {\n    if (srcPath.isDirectory ()) {\n        if (! dstPath.exists ()) {\n            dstPath.mkdir ();\n        }\n        String files [] = srcPath.list ();\n        for (int i = 0;\n        i < files.length; i ++) {\n            copyDirectory (new File (srcPath, files [i]), new File (dstPath, files [i]));\n        }\n    } else {\n        if (! srcPath.exists ()) {\n            logger.debug (\"[copyDirectory]: Source File or directory does not exist.\");\n            System.exit (0);\n        } else {\n            try {\n                InputStream in = new FileInputStream (srcPath);\n                OutputStream out = new FileOutputStream (dstPath);\n                byte [] buf = new byte [1024];\n                int len;\n                while ((len = in.read (buf)) > 0) {\n                    out.write (buf, 0, len);\n                }\n                in.close ();\n                out.close ();\n            } catch (IOException e) {\n                logger.debug (\"[copyDirectory]: \" + e.getMessage ());\n            }\n        }\n    }\n    logger.info (\"[copyDirectory]: File copied to \" + dstPath);\n}\n"}
{"clone_type": "MT3", "method1_id": 16038356, "method2_id": 19693671, "code1": "public static String md5hash (String text) {\n    java.security.MessageDigest md;\n    try {\n        md = java.security.MessageDigest.getInstance (\"MD5\");\n    } catch (NoSuchAlgorithmException e) {\n        throw new RuntimeException (e);\n    }\n    md.update (text.getBytes ());\n    byte [] md5bytes = md.digest ();\n    return new String (org.apache.commons.codec.binary.Hex.encodeHex (md5bytes));\n}\n", "code2": "public static String hash (String password) {\n    try {\n        MessageDigest digest = MessageDigest.getInstance (digestAlgorithm);\n        digest.update (password.getBytes (charset));\n        byte [] rawHash = digest.digest ();\n        return new String (Hex.encodeHex (rawHash));\n    } catch (Exception e) {\n        throw new RuntimeException (e);\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 14847921, "method2_id": 20805582, "code1": "protected static void copyFile (File from, File to) throws IOException {\n    if (! from.isFile () || ! to.isFile ()) {\n        throw new IOException (\"Both parameters must be files. from is \" + from.isFile () + \", to is \" + to.isFile ());\n    }\n    FileChannel in = (new FileInputStream (from)).getChannel ();\n    FileChannel out = (new FileOutputStream (to)).getChannel ();\n    in.transferTo (0, from.length (), out);\n    in.close ();\n    out.close ();\n}\n", "code2": "public void copyFile (File s, File t) {\n    try {\n        FileChannel in = (new FileInputStream (s)).getChannel ();\n        FileChannel out = (new FileOutputStream (t)).getChannel ();\n        in.transferTo (0, s.length (), out);\n        in.close ();\n        out.close ();\n    } catch (Exception e) {\n        System.out.println (e);\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 2418918, "method2_id": 20128728, "code1": "public static void copyFile (File source, File dest) throws IOException {\n    FileChannel in = null, out = null;\n    try {\n        in = new FileInputStream (source).getChannel ();\n        out = new FileOutputStream (dest).getChannel ();\n        long size = in.size ();\n        MappedByteBuffer buf = in.map (FileChannel.MapMode.READ_ONLY, 0, size);\n        out.write (buf);\n    } finally {\n        if (in != null) in.close ();\n\n        if (out != null) out.close ();\n\n    }\n}\n", "code2": "void copyFile (File src, File dst) throws IOException {\n    FileChannel inChannel = new FileInputStream (src).getChannel ();\n    FileChannel outChannel = new FileOutputStream (dst).getChannel ();\n    try {\n        inChannel.transferTo (0, inChannel.size (), outChannel);\n    } finally {\n        if (inChannel != null) inChannel.close ();\n\n        if (outChannel != null) outChannel.close ();\n\n    }\n}\n"}
{"clone_type": "MT3", "method1_id": 3844626, "method2_id": 6275083, "code1": "private double [] [] transpose (double [] [] in) {\n    double [] [] out = new double [in [0].length] [in.length];\n    for (int r = 0;\n    r < in.length; r ++) {\n        for (int c = 0;\n        c < in [0].length; c ++) {\n            out [c] [r] = in [r] [c];\n        }\n    }\n    return out;\n}\n", "code2": "private void update () {\n    double [] [] data = new double [4] [points.length];\n    for (int i = 0;\n    i < points.length; i ++) {\n        for (int j = 0;\n        j < 3; j ++) {\n            data [j] [i] = points [i] [j];\n        }\n        data [3] [i] = 1;\n    }\n    this.matrix = new Matrix (data);\n    this.dirty = false;\n}\n"}
